/**
 * Autogenerated by Thrift Compiler (0.20.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.iotdb.service.rpc.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.20.0)", date = "2025-05-09")
public class TSExecuteStatementReq implements org.apache.thrift.TBase<TSExecuteStatementReq, TSExecuteStatementReq._Fields>, java.io.Serializable, Cloneable, Comparable<TSExecuteStatementReq> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TSExecuteStatementReq");

  private static final org.apache.thrift.protocol.TField SESSION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sessionId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField STATEMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("statement", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField STATEMENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("statementId", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField FETCH_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("fetchSize", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField TIMEOUT_FIELD_DESC = new org.apache.thrift.protocol.TField("timeout", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField ENABLE_REDIRECT_QUERY_FIELD_DESC = new org.apache.thrift.protocol.TField("enableRedirectQuery", org.apache.thrift.protocol.TType.BOOL, (short)6);
  private static final org.apache.thrift.protocol.TField JDBC_QUERY_FIELD_DESC = new org.apache.thrift.protocol.TField("jdbcQuery", org.apache.thrift.protocol.TType.BOOL, (short)7);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TSExecuteStatementReqStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TSExecuteStatementReqTupleSchemeFactory();

  public long sessionId; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String statement; // required
  public long statementId; // required
  public int fetchSize; // optional
  public long timeout; // optional
  public boolean enableRedirectQuery; // optional
  public boolean jdbcQuery; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SESSION_ID((short)1, "sessionId"),
    STATEMENT((short)2, "statement"),
    STATEMENT_ID((short)3, "statementId"),
    FETCH_SIZE((short)4, "fetchSize"),
    TIMEOUT((short)5, "timeout"),
    ENABLE_REDIRECT_QUERY((short)6, "enableRedirectQuery"),
    JDBC_QUERY((short)7, "jdbcQuery");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SESSION_ID
          return SESSION_ID;
        case 2: // STATEMENT
          return STATEMENT;
        case 3: // STATEMENT_ID
          return STATEMENT_ID;
        case 4: // FETCH_SIZE
          return FETCH_SIZE;
        case 5: // TIMEOUT
          return TIMEOUT;
        case 6: // ENABLE_REDIRECT_QUERY
          return ENABLE_REDIRECT_QUERY;
        case 7: // JDBC_QUERY
          return JDBC_QUERY;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SESSIONID_ISSET_ID = 0;
  private static final int __STATEMENTID_ISSET_ID = 1;
  private static final int __FETCHSIZE_ISSET_ID = 2;
  private static final int __TIMEOUT_ISSET_ID = 3;
  private static final int __ENABLEREDIRECTQUERY_ISSET_ID = 4;
  private static final int __JDBCQUERY_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.FETCH_SIZE,_Fields.TIMEOUT,_Fields.ENABLE_REDIRECT_QUERY,_Fields.JDBC_QUERY};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SESSION_ID, new org.apache.thrift.meta_data.FieldMetaData("sessionId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.STATEMENT, new org.apache.thrift.meta_data.FieldMetaData("statement", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATEMENT_ID, new org.apache.thrift.meta_data.FieldMetaData("statementId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.FETCH_SIZE, new org.apache.thrift.meta_data.FieldMetaData("fetchSize", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TIMEOUT, new org.apache.thrift.meta_data.FieldMetaData("timeout", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ENABLE_REDIRECT_QUERY, new org.apache.thrift.meta_data.FieldMetaData("enableRedirectQuery", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.JDBC_QUERY, new org.apache.thrift.meta_data.FieldMetaData("jdbcQuery", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TSExecuteStatementReq.class, metaDataMap);
  }

  public TSExecuteStatementReq() {
  }

  public TSExecuteStatementReq(
    long sessionId,
    java.lang.String statement,
    long statementId)
  {
    this();
    this.sessionId = sessionId;
    setSessionIdIsSet(true);
    this.statement = statement;
    this.statementId = statementId;
    setStatementIdIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TSExecuteStatementReq(TSExecuteStatementReq other) {
    __isset_bitfield = other.__isset_bitfield;
    this.sessionId = other.sessionId;
    if (other.isSetStatement()) {
      this.statement = other.statement;
    }
    this.statementId = other.statementId;
    this.fetchSize = other.fetchSize;
    this.timeout = other.timeout;
    this.enableRedirectQuery = other.enableRedirectQuery;
    this.jdbcQuery = other.jdbcQuery;
  }

  @Override
  public TSExecuteStatementReq deepCopy() {
    return new TSExecuteStatementReq(this);
  }

  @Override
  public void clear() {
    setSessionIdIsSet(false);
    this.sessionId = 0;
    this.statement = null;
    setStatementIdIsSet(false);
    this.statementId = 0;
    setFetchSizeIsSet(false);
    this.fetchSize = 0;
    setTimeoutIsSet(false);
    this.timeout = 0;
    setEnableRedirectQueryIsSet(false);
    this.enableRedirectQuery = false;
    setJdbcQueryIsSet(false);
    this.jdbcQuery = false;
  }

  public long getSessionId() {
    return this.sessionId;
  }

  public TSExecuteStatementReq setSessionId(long sessionId) {
    this.sessionId = sessionId;
    setSessionIdIsSet(true);
    return this;
  }

  public void unsetSessionId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SESSIONID_ISSET_ID);
  }

  /** Returns true if field sessionId is set (has been assigned a value) and false otherwise */
  public boolean isSetSessionId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SESSIONID_ISSET_ID);
  }

  public void setSessionIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SESSIONID_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getStatement() {
    return this.statement;
  }

  public TSExecuteStatementReq setStatement(@org.apache.thrift.annotation.Nullable java.lang.String statement) {
    this.statement = statement;
    return this;
  }

  public void unsetStatement() {
    this.statement = null;
  }

  /** Returns true if field statement is set (has been assigned a value) and false otherwise */
  public boolean isSetStatement() {
    return this.statement != null;
  }

  public void setStatementIsSet(boolean value) {
    if (!value) {
      this.statement = null;
    }
  }

  public long getStatementId() {
    return this.statementId;
  }

  public TSExecuteStatementReq setStatementId(long statementId) {
    this.statementId = statementId;
    setStatementIdIsSet(true);
    return this;
  }

  public void unsetStatementId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __STATEMENTID_ISSET_ID);
  }

  /** Returns true if field statementId is set (has been assigned a value) and false otherwise */
  public boolean isSetStatementId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __STATEMENTID_ISSET_ID);
  }

  public void setStatementIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __STATEMENTID_ISSET_ID, value);
  }

  public int getFetchSize() {
    return this.fetchSize;
  }

  public TSExecuteStatementReq setFetchSize(int fetchSize) {
    this.fetchSize = fetchSize;
    setFetchSizeIsSet(true);
    return this;
  }

  public void unsetFetchSize() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FETCHSIZE_ISSET_ID);
  }

  /** Returns true if field fetchSize is set (has been assigned a value) and false otherwise */
  public boolean isSetFetchSize() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FETCHSIZE_ISSET_ID);
  }

  public void setFetchSizeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FETCHSIZE_ISSET_ID, value);
  }

  public long getTimeout() {
    return this.timeout;
  }

  public TSExecuteStatementReq setTimeout(long timeout) {
    this.timeout = timeout;
    setTimeoutIsSet(true);
    return this;
  }

  public void unsetTimeout() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TIMEOUT_ISSET_ID);
  }

  /** Returns true if field timeout is set (has been assigned a value) and false otherwise */
  public boolean isSetTimeout() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TIMEOUT_ISSET_ID);
  }

  public void setTimeoutIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TIMEOUT_ISSET_ID, value);
  }

  public boolean isEnableRedirectQuery() {
    return this.enableRedirectQuery;
  }

  public TSExecuteStatementReq setEnableRedirectQuery(boolean enableRedirectQuery) {
    this.enableRedirectQuery = enableRedirectQuery;
    setEnableRedirectQueryIsSet(true);
    return this;
  }

  public void unsetEnableRedirectQuery() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ENABLEREDIRECTQUERY_ISSET_ID);
  }

  /** Returns true if field enableRedirectQuery is set (has been assigned a value) and false otherwise */
  public boolean isSetEnableRedirectQuery() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ENABLEREDIRECTQUERY_ISSET_ID);
  }

  public void setEnableRedirectQueryIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ENABLEREDIRECTQUERY_ISSET_ID, value);
  }

  public boolean isJdbcQuery() {
    return this.jdbcQuery;
  }

  public TSExecuteStatementReq setJdbcQuery(boolean jdbcQuery) {
    this.jdbcQuery = jdbcQuery;
    setJdbcQueryIsSet(true);
    return this;
  }

  public void unsetJdbcQuery() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __JDBCQUERY_ISSET_ID);
  }

  /** Returns true if field jdbcQuery is set (has been assigned a value) and false otherwise */
  public boolean isSetJdbcQuery() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __JDBCQUERY_ISSET_ID);
  }

  public void setJdbcQueryIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __JDBCQUERY_ISSET_ID, value);
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case SESSION_ID:
      if (value == null) {
        unsetSessionId();
      } else {
        setSessionId((java.lang.Long)value);
      }
      break;

    case STATEMENT:
      if (value == null) {
        unsetStatement();
      } else {
        setStatement((java.lang.String)value);
      }
      break;

    case STATEMENT_ID:
      if (value == null) {
        unsetStatementId();
      } else {
        setStatementId((java.lang.Long)value);
      }
      break;

    case FETCH_SIZE:
      if (value == null) {
        unsetFetchSize();
      } else {
        setFetchSize((java.lang.Integer)value);
      }
      break;

    case TIMEOUT:
      if (value == null) {
        unsetTimeout();
      } else {
        setTimeout((java.lang.Long)value);
      }
      break;

    case ENABLE_REDIRECT_QUERY:
      if (value == null) {
        unsetEnableRedirectQuery();
      } else {
        setEnableRedirectQuery((java.lang.Boolean)value);
      }
      break;

    case JDBC_QUERY:
      if (value == null) {
        unsetJdbcQuery();
      } else {
        setJdbcQuery((java.lang.Boolean)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case SESSION_ID:
      return getSessionId();

    case STATEMENT:
      return getStatement();

    case STATEMENT_ID:
      return getStatementId();

    case FETCH_SIZE:
      return getFetchSize();

    case TIMEOUT:
      return getTimeout();

    case ENABLE_REDIRECT_QUERY:
      return isEnableRedirectQuery();

    case JDBC_QUERY:
      return isJdbcQuery();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case SESSION_ID:
      return isSetSessionId();
    case STATEMENT:
      return isSetStatement();
    case STATEMENT_ID:
      return isSetStatementId();
    case FETCH_SIZE:
      return isSetFetchSize();
    case TIMEOUT:
      return isSetTimeout();
    case ENABLE_REDIRECT_QUERY:
      return isSetEnableRedirectQuery();
    case JDBC_QUERY:
      return isSetJdbcQuery();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TSExecuteStatementReq)
      return this.equals((TSExecuteStatementReq)that);
    return false;
  }

  public boolean equals(TSExecuteStatementReq that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_sessionId = true;
    boolean that_present_sessionId = true;
    if (this_present_sessionId || that_present_sessionId) {
      if (!(this_present_sessionId && that_present_sessionId))
        return false;
      if (this.sessionId != that.sessionId)
        return false;
    }

    boolean this_present_statement = true && this.isSetStatement();
    boolean that_present_statement = true && that.isSetStatement();
    if (this_present_statement || that_present_statement) {
      if (!(this_present_statement && that_present_statement))
        return false;
      if (!this.statement.equals(that.statement))
        return false;
    }

    boolean this_present_statementId = true;
    boolean that_present_statementId = true;
    if (this_present_statementId || that_present_statementId) {
      if (!(this_present_statementId && that_present_statementId))
        return false;
      if (this.statementId != that.statementId)
        return false;
    }

    boolean this_present_fetchSize = true && this.isSetFetchSize();
    boolean that_present_fetchSize = true && that.isSetFetchSize();
    if (this_present_fetchSize || that_present_fetchSize) {
      if (!(this_present_fetchSize && that_present_fetchSize))
        return false;
      if (this.fetchSize != that.fetchSize)
        return false;
    }

    boolean this_present_timeout = true && this.isSetTimeout();
    boolean that_present_timeout = true && that.isSetTimeout();
    if (this_present_timeout || that_present_timeout) {
      if (!(this_present_timeout && that_present_timeout))
        return false;
      if (this.timeout != that.timeout)
        return false;
    }

    boolean this_present_enableRedirectQuery = true && this.isSetEnableRedirectQuery();
    boolean that_present_enableRedirectQuery = true && that.isSetEnableRedirectQuery();
    if (this_present_enableRedirectQuery || that_present_enableRedirectQuery) {
      if (!(this_present_enableRedirectQuery && that_present_enableRedirectQuery))
        return false;
      if (this.enableRedirectQuery != that.enableRedirectQuery)
        return false;
    }

    boolean this_present_jdbcQuery = true && this.isSetJdbcQuery();
    boolean that_present_jdbcQuery = true && that.isSetJdbcQuery();
    if (this_present_jdbcQuery || that_present_jdbcQuery) {
      if (!(this_present_jdbcQuery && that_present_jdbcQuery))
        return false;
      if (this.jdbcQuery != that.jdbcQuery)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(sessionId);

    hashCode = hashCode * 8191 + ((isSetStatement()) ? 131071 : 524287);
    if (isSetStatement())
      hashCode = hashCode * 8191 + statement.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(statementId);

    hashCode = hashCode * 8191 + ((isSetFetchSize()) ? 131071 : 524287);
    if (isSetFetchSize())
      hashCode = hashCode * 8191 + fetchSize;

    hashCode = hashCode * 8191 + ((isSetTimeout()) ? 131071 : 524287);
    if (isSetTimeout())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(timeout);

    hashCode = hashCode * 8191 + ((isSetEnableRedirectQuery()) ? 131071 : 524287);
    if (isSetEnableRedirectQuery())
      hashCode = hashCode * 8191 + ((enableRedirectQuery) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetJdbcQuery()) ? 131071 : 524287);
    if (isSetJdbcQuery())
      hashCode = hashCode * 8191 + ((jdbcQuery) ? 131071 : 524287);

    return hashCode;
  }

  @Override
  public int compareTo(TSExecuteStatementReq other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetSessionId(), other.isSetSessionId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSessionId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sessionId, other.sessionId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetStatement(), other.isSetStatement());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatement()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.statement, other.statement);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetStatementId(), other.isSetStatementId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatementId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.statementId, other.statementId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetFetchSize(), other.isSetFetchSize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFetchSize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fetchSize, other.fetchSize);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTimeout(), other.isSetTimeout());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimeout()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timeout, other.timeout);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetEnableRedirectQuery(), other.isSetEnableRedirectQuery());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnableRedirectQuery()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.enableRedirectQuery, other.enableRedirectQuery);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetJdbcQuery(), other.isSetJdbcQuery());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJdbcQuery()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jdbcQuery, other.jdbcQuery);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TSExecuteStatementReq(");
    boolean first = true;

    sb.append("sessionId:");
    sb.append(this.sessionId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("statement:");
    if (this.statement == null) {
      sb.append("null");
    } else {
      sb.append(this.statement);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("statementId:");
    sb.append(this.statementId);
    first = false;
    if (isSetFetchSize()) {
      if (!first) sb.append(", ");
      sb.append("fetchSize:");
      sb.append(this.fetchSize);
      first = false;
    }
    if (isSetTimeout()) {
      if (!first) sb.append(", ");
      sb.append("timeout:");
      sb.append(this.timeout);
      first = false;
    }
    if (isSetEnableRedirectQuery()) {
      if (!first) sb.append(", ");
      sb.append("enableRedirectQuery:");
      sb.append(this.enableRedirectQuery);
      first = false;
    }
    if (isSetJdbcQuery()) {
      if (!first) sb.append(", ");
      sb.append("jdbcQuery:");
      sb.append(this.jdbcQuery);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'sessionId' because it's a primitive and you chose the non-beans generator.
    if (statement == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'statement' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'statementId' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TSExecuteStatementReqStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TSExecuteStatementReqStandardScheme getScheme() {
      return new TSExecuteStatementReqStandardScheme();
    }
  }

  private static class TSExecuteStatementReqStandardScheme extends org.apache.thrift.scheme.StandardScheme<TSExecuteStatementReq> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TSExecuteStatementReq struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SESSION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.sessionId = iprot.readI64();
              struct.setSessionIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // STATEMENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.statement = iprot.readString();
              struct.setStatementIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // STATEMENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.statementId = iprot.readI64();
              struct.setStatementIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // FETCH_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.fetchSize = iprot.readI32();
              struct.setFetchSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TIMEOUT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.timeout = iprot.readI64();
              struct.setTimeoutIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // ENABLE_REDIRECT_QUERY
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.enableRedirectQuery = iprot.readBool();
              struct.setEnableRedirectQueryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // JDBC_QUERY
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.jdbcQuery = iprot.readBool();
              struct.setJdbcQueryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetSessionId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'sessionId' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetStatementId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'statementId' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TSExecuteStatementReq struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(SESSION_ID_FIELD_DESC);
      oprot.writeI64(struct.sessionId);
      oprot.writeFieldEnd();
      if (struct.statement != null) {
        oprot.writeFieldBegin(STATEMENT_FIELD_DESC);
        oprot.writeString(struct.statement);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(STATEMENT_ID_FIELD_DESC);
      oprot.writeI64(struct.statementId);
      oprot.writeFieldEnd();
      if (struct.isSetFetchSize()) {
        oprot.writeFieldBegin(FETCH_SIZE_FIELD_DESC);
        oprot.writeI32(struct.fetchSize);
        oprot.writeFieldEnd();
      }
      if (struct.isSetTimeout()) {
        oprot.writeFieldBegin(TIMEOUT_FIELD_DESC);
        oprot.writeI64(struct.timeout);
        oprot.writeFieldEnd();
      }
      if (struct.isSetEnableRedirectQuery()) {
        oprot.writeFieldBegin(ENABLE_REDIRECT_QUERY_FIELD_DESC);
        oprot.writeBool(struct.enableRedirectQuery);
        oprot.writeFieldEnd();
      }
      if (struct.isSetJdbcQuery()) {
        oprot.writeFieldBegin(JDBC_QUERY_FIELD_DESC);
        oprot.writeBool(struct.jdbcQuery);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TSExecuteStatementReqTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TSExecuteStatementReqTupleScheme getScheme() {
      return new TSExecuteStatementReqTupleScheme();
    }
  }

  private static class TSExecuteStatementReqTupleScheme extends org.apache.thrift.scheme.TupleScheme<TSExecuteStatementReq> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TSExecuteStatementReq struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeI64(struct.sessionId);
      oprot.writeString(struct.statement);
      oprot.writeI64(struct.statementId);
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetFetchSize()) {
        optionals.set(0);
      }
      if (struct.isSetTimeout()) {
        optionals.set(1);
      }
      if (struct.isSetEnableRedirectQuery()) {
        optionals.set(2);
      }
      if (struct.isSetJdbcQuery()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetFetchSize()) {
        oprot.writeI32(struct.fetchSize);
      }
      if (struct.isSetTimeout()) {
        oprot.writeI64(struct.timeout);
      }
      if (struct.isSetEnableRedirectQuery()) {
        oprot.writeBool(struct.enableRedirectQuery);
      }
      if (struct.isSetJdbcQuery()) {
        oprot.writeBool(struct.jdbcQuery);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TSExecuteStatementReq struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.sessionId = iprot.readI64();
      struct.setSessionIdIsSet(true);
      struct.statement = iprot.readString();
      struct.setStatementIsSet(true);
      struct.statementId = iprot.readI64();
      struct.setStatementIdIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.fetchSize = iprot.readI32();
        struct.setFetchSizeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.timeout = iprot.readI64();
        struct.setTimeoutIsSet(true);
      }
      if (incoming.get(2)) {
        struct.enableRedirectQuery = iprot.readBool();
        struct.setEnableRedirectQueryIsSet(true);
      }
      if (incoming.get(3)) {
        struct.jdbcQuery = iprot.readBool();
        struct.setJdbcQueryIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

