/**
 * Autogenerated by Thrift Compiler (0.20.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.iotdb.service.rpc.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.20.0)", date = "2025-05-09")
public class TSAggregationQueryReq implements org.apache.thrift.TBase<TSAggregationQueryReq, TSAggregationQueryReq._Fields>, java.io.Serializable, Cloneable, Comparable<TSAggregationQueryReq> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TSAggregationQueryReq");

  private static final org.apache.thrift.protocol.TField SESSION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sessionId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField STATEMENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("statementId", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField PATHS_FIELD_DESC = new org.apache.thrift.protocol.TField("paths", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField AGGREGATIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("aggregations", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField START_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("startTime", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField END_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("endTime", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField INTERVAL_FIELD_DESC = new org.apache.thrift.protocol.TField("interval", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField SLIDING_STEP_FIELD_DESC = new org.apache.thrift.protocol.TField("slidingStep", org.apache.thrift.protocol.TType.I64, (short)8);
  private static final org.apache.thrift.protocol.TField FETCH_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("fetchSize", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField TIMEOUT_FIELD_DESC = new org.apache.thrift.protocol.TField("timeout", org.apache.thrift.protocol.TType.I64, (short)10);
  private static final org.apache.thrift.protocol.TField LEGAL_PATH_NODES_FIELD_DESC = new org.apache.thrift.protocol.TField("legalPathNodes", org.apache.thrift.protocol.TType.BOOL, (short)11);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TSAggregationQueryReqStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TSAggregationQueryReqTupleSchemeFactory();

  public long sessionId; // required
  public long statementId; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> paths; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<org.apache.iotdb.common.rpc.thrift.TAggregationType> aggregations; // required
  public long startTime; // optional
  public long endTime; // optional
  public long interval; // optional
  public long slidingStep; // optional
  public int fetchSize; // optional
  public long timeout; // optional
  public boolean legalPathNodes; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SESSION_ID((short)1, "sessionId"),
    STATEMENT_ID((short)2, "statementId"),
    PATHS((short)3, "paths"),
    AGGREGATIONS((short)4, "aggregations"),
    START_TIME((short)5, "startTime"),
    END_TIME((short)6, "endTime"),
    INTERVAL((short)7, "interval"),
    SLIDING_STEP((short)8, "slidingStep"),
    FETCH_SIZE((short)9, "fetchSize"),
    TIMEOUT((short)10, "timeout"),
    LEGAL_PATH_NODES((short)11, "legalPathNodes");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SESSION_ID
          return SESSION_ID;
        case 2: // STATEMENT_ID
          return STATEMENT_ID;
        case 3: // PATHS
          return PATHS;
        case 4: // AGGREGATIONS
          return AGGREGATIONS;
        case 5: // START_TIME
          return START_TIME;
        case 6: // END_TIME
          return END_TIME;
        case 7: // INTERVAL
          return INTERVAL;
        case 8: // SLIDING_STEP
          return SLIDING_STEP;
        case 9: // FETCH_SIZE
          return FETCH_SIZE;
        case 10: // TIMEOUT
          return TIMEOUT;
        case 11: // LEGAL_PATH_NODES
          return LEGAL_PATH_NODES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SESSIONID_ISSET_ID = 0;
  private static final int __STATEMENTID_ISSET_ID = 1;
  private static final int __STARTTIME_ISSET_ID = 2;
  private static final int __ENDTIME_ISSET_ID = 3;
  private static final int __INTERVAL_ISSET_ID = 4;
  private static final int __SLIDINGSTEP_ISSET_ID = 5;
  private static final int __FETCHSIZE_ISSET_ID = 6;
  private static final int __TIMEOUT_ISSET_ID = 7;
  private static final int __LEGALPATHNODES_ISSET_ID = 8;
  private short __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.START_TIME,_Fields.END_TIME,_Fields.INTERVAL,_Fields.SLIDING_STEP,_Fields.FETCH_SIZE,_Fields.TIMEOUT,_Fields.LEGAL_PATH_NODES};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SESSION_ID, new org.apache.thrift.meta_data.FieldMetaData("sessionId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.STATEMENT_ID, new org.apache.thrift.meta_data.FieldMetaData("statementId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.PATHS, new org.apache.thrift.meta_data.FieldMetaData("paths", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.AGGREGATIONS, new org.apache.thrift.meta_data.FieldMetaData("aggregations", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, org.apache.iotdb.common.rpc.thrift.TAggregationType.class))));
    tmpMap.put(_Fields.START_TIME, new org.apache.thrift.meta_data.FieldMetaData("startTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.END_TIME, new org.apache.thrift.meta_data.FieldMetaData("endTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.INTERVAL, new org.apache.thrift.meta_data.FieldMetaData("interval", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SLIDING_STEP, new org.apache.thrift.meta_data.FieldMetaData("slidingStep", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.FETCH_SIZE, new org.apache.thrift.meta_data.FieldMetaData("fetchSize", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TIMEOUT, new org.apache.thrift.meta_data.FieldMetaData("timeout", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LEGAL_PATH_NODES, new org.apache.thrift.meta_data.FieldMetaData("legalPathNodes", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TSAggregationQueryReq.class, metaDataMap);
  }

  public TSAggregationQueryReq() {
  }

  public TSAggregationQueryReq(
    long sessionId,
    long statementId,
    java.util.List<java.lang.String> paths,
    java.util.List<org.apache.iotdb.common.rpc.thrift.TAggregationType> aggregations)
  {
    this();
    this.sessionId = sessionId;
    setSessionIdIsSet(true);
    this.statementId = statementId;
    setStatementIdIsSet(true);
    this.paths = paths;
    this.aggregations = aggregations;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TSAggregationQueryReq(TSAggregationQueryReq other) {
    __isset_bitfield = other.__isset_bitfield;
    this.sessionId = other.sessionId;
    this.statementId = other.statementId;
    if (other.isSetPaths()) {
      java.util.List<java.lang.String> __this__paths = new java.util.ArrayList<java.lang.String>(other.paths);
      this.paths = __this__paths;
    }
    if (other.isSetAggregations()) {
      java.util.List<org.apache.iotdb.common.rpc.thrift.TAggregationType> __this__aggregations = new java.util.ArrayList<org.apache.iotdb.common.rpc.thrift.TAggregationType>(other.aggregations.size());
      for (org.apache.iotdb.common.rpc.thrift.TAggregationType other_element : other.aggregations) {
        __this__aggregations.add(other_element);
      }
      this.aggregations = __this__aggregations;
    }
    this.startTime = other.startTime;
    this.endTime = other.endTime;
    this.interval = other.interval;
    this.slidingStep = other.slidingStep;
    this.fetchSize = other.fetchSize;
    this.timeout = other.timeout;
    this.legalPathNodes = other.legalPathNodes;
  }

  @Override
  public TSAggregationQueryReq deepCopy() {
    return new TSAggregationQueryReq(this);
  }

  @Override
  public void clear() {
    setSessionIdIsSet(false);
    this.sessionId = 0;
    setStatementIdIsSet(false);
    this.statementId = 0;
    this.paths = null;
    this.aggregations = null;
    setStartTimeIsSet(false);
    this.startTime = 0;
    setEndTimeIsSet(false);
    this.endTime = 0;
    setIntervalIsSet(false);
    this.interval = 0;
    setSlidingStepIsSet(false);
    this.slidingStep = 0;
    setFetchSizeIsSet(false);
    this.fetchSize = 0;
    setTimeoutIsSet(false);
    this.timeout = 0;
    setLegalPathNodesIsSet(false);
    this.legalPathNodes = false;
  }

  public long getSessionId() {
    return this.sessionId;
  }

  public TSAggregationQueryReq setSessionId(long sessionId) {
    this.sessionId = sessionId;
    setSessionIdIsSet(true);
    return this;
  }

  public void unsetSessionId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SESSIONID_ISSET_ID);
  }

  /** Returns true if field sessionId is set (has been assigned a value) and false otherwise */
  public boolean isSetSessionId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SESSIONID_ISSET_ID);
  }

  public void setSessionIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SESSIONID_ISSET_ID, value);
  }

  public long getStatementId() {
    return this.statementId;
  }

  public TSAggregationQueryReq setStatementId(long statementId) {
    this.statementId = statementId;
    setStatementIdIsSet(true);
    return this;
  }

  public void unsetStatementId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __STATEMENTID_ISSET_ID);
  }

  /** Returns true if field statementId is set (has been assigned a value) and false otherwise */
  public boolean isSetStatementId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __STATEMENTID_ISSET_ID);
  }

  public void setStatementIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __STATEMENTID_ISSET_ID, value);
  }

  public int getPathsSize() {
    return (this.paths == null) ? 0 : this.paths.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.String> getPathsIterator() {
    return (this.paths == null) ? null : this.paths.iterator();
  }

  public void addToPaths(java.lang.String elem) {
    if (this.paths == null) {
      this.paths = new java.util.ArrayList<java.lang.String>();
    }
    this.paths.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.String> getPaths() {
    return this.paths;
  }

  public TSAggregationQueryReq setPaths(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> paths) {
    this.paths = paths;
    return this;
  }

  public void unsetPaths() {
    this.paths = null;
  }

  /** Returns true if field paths is set (has been assigned a value) and false otherwise */
  public boolean isSetPaths() {
    return this.paths != null;
  }

  public void setPathsIsSet(boolean value) {
    if (!value) {
      this.paths = null;
    }
  }

  public int getAggregationsSize() {
    return (this.aggregations == null) ? 0 : this.aggregations.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<org.apache.iotdb.common.rpc.thrift.TAggregationType> getAggregationsIterator() {
    return (this.aggregations == null) ? null : this.aggregations.iterator();
  }

  public void addToAggregations(org.apache.iotdb.common.rpc.thrift.TAggregationType elem) {
    if (this.aggregations == null) {
      this.aggregations = new java.util.ArrayList<org.apache.iotdb.common.rpc.thrift.TAggregationType>();
    }
    this.aggregations.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<org.apache.iotdb.common.rpc.thrift.TAggregationType> getAggregations() {
    return this.aggregations;
  }

  public TSAggregationQueryReq setAggregations(@org.apache.thrift.annotation.Nullable java.util.List<org.apache.iotdb.common.rpc.thrift.TAggregationType> aggregations) {
    this.aggregations = aggregations;
    return this;
  }

  public void unsetAggregations() {
    this.aggregations = null;
  }

  /** Returns true if field aggregations is set (has been assigned a value) and false otherwise */
  public boolean isSetAggregations() {
    return this.aggregations != null;
  }

  public void setAggregationsIsSet(boolean value) {
    if (!value) {
      this.aggregations = null;
    }
  }

  public long getStartTime() {
    return this.startTime;
  }

  public TSAggregationQueryReq setStartTime(long startTime) {
    this.startTime = startTime;
    setStartTimeIsSet(true);
    return this;
  }

  public void unsetStartTime() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __STARTTIME_ISSET_ID);
  }

  /** Returns true if field startTime is set (has been assigned a value) and false otherwise */
  public boolean isSetStartTime() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __STARTTIME_ISSET_ID);
  }

  public void setStartTimeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __STARTTIME_ISSET_ID, value);
  }

  public long getEndTime() {
    return this.endTime;
  }

  public TSAggregationQueryReq setEndTime(long endTime) {
    this.endTime = endTime;
    setEndTimeIsSet(true);
    return this;
  }

  public void unsetEndTime() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ENDTIME_ISSET_ID);
  }

  /** Returns true if field endTime is set (has been assigned a value) and false otherwise */
  public boolean isSetEndTime() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ENDTIME_ISSET_ID);
  }

  public void setEndTimeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ENDTIME_ISSET_ID, value);
  }

  public long getInterval() {
    return this.interval;
  }

  public TSAggregationQueryReq setInterval(long interval) {
    this.interval = interval;
    setIntervalIsSet(true);
    return this;
  }

  public void unsetInterval() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __INTERVAL_ISSET_ID);
  }

  /** Returns true if field interval is set (has been assigned a value) and false otherwise */
  public boolean isSetInterval() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __INTERVAL_ISSET_ID);
  }

  public void setIntervalIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __INTERVAL_ISSET_ID, value);
  }

  public long getSlidingStep() {
    return this.slidingStep;
  }

  public TSAggregationQueryReq setSlidingStep(long slidingStep) {
    this.slidingStep = slidingStep;
    setSlidingStepIsSet(true);
    return this;
  }

  public void unsetSlidingStep() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SLIDINGSTEP_ISSET_ID);
  }

  /** Returns true if field slidingStep is set (has been assigned a value) and false otherwise */
  public boolean isSetSlidingStep() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SLIDINGSTEP_ISSET_ID);
  }

  public void setSlidingStepIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SLIDINGSTEP_ISSET_ID, value);
  }

  public int getFetchSize() {
    return this.fetchSize;
  }

  public TSAggregationQueryReq setFetchSize(int fetchSize) {
    this.fetchSize = fetchSize;
    setFetchSizeIsSet(true);
    return this;
  }

  public void unsetFetchSize() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FETCHSIZE_ISSET_ID);
  }

  /** Returns true if field fetchSize is set (has been assigned a value) and false otherwise */
  public boolean isSetFetchSize() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FETCHSIZE_ISSET_ID);
  }

  public void setFetchSizeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FETCHSIZE_ISSET_ID, value);
  }

  public long getTimeout() {
    return this.timeout;
  }

  public TSAggregationQueryReq setTimeout(long timeout) {
    this.timeout = timeout;
    setTimeoutIsSet(true);
    return this;
  }

  public void unsetTimeout() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TIMEOUT_ISSET_ID);
  }

  /** Returns true if field timeout is set (has been assigned a value) and false otherwise */
  public boolean isSetTimeout() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TIMEOUT_ISSET_ID);
  }

  public void setTimeoutIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TIMEOUT_ISSET_ID, value);
  }

  public boolean isLegalPathNodes() {
    return this.legalPathNodes;
  }

  public TSAggregationQueryReq setLegalPathNodes(boolean legalPathNodes) {
    this.legalPathNodes = legalPathNodes;
    setLegalPathNodesIsSet(true);
    return this;
  }

  public void unsetLegalPathNodes() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LEGALPATHNODES_ISSET_ID);
  }

  /** Returns true if field legalPathNodes is set (has been assigned a value) and false otherwise */
  public boolean isSetLegalPathNodes() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LEGALPATHNODES_ISSET_ID);
  }

  public void setLegalPathNodesIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LEGALPATHNODES_ISSET_ID, value);
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case SESSION_ID:
      if (value == null) {
        unsetSessionId();
      } else {
        setSessionId((java.lang.Long)value);
      }
      break;

    case STATEMENT_ID:
      if (value == null) {
        unsetStatementId();
      } else {
        setStatementId((java.lang.Long)value);
      }
      break;

    case PATHS:
      if (value == null) {
        unsetPaths();
      } else {
        setPaths((java.util.List<java.lang.String>)value);
      }
      break;

    case AGGREGATIONS:
      if (value == null) {
        unsetAggregations();
      } else {
        setAggregations((java.util.List<org.apache.iotdb.common.rpc.thrift.TAggregationType>)value);
      }
      break;

    case START_TIME:
      if (value == null) {
        unsetStartTime();
      } else {
        setStartTime((java.lang.Long)value);
      }
      break;

    case END_TIME:
      if (value == null) {
        unsetEndTime();
      } else {
        setEndTime((java.lang.Long)value);
      }
      break;

    case INTERVAL:
      if (value == null) {
        unsetInterval();
      } else {
        setInterval((java.lang.Long)value);
      }
      break;

    case SLIDING_STEP:
      if (value == null) {
        unsetSlidingStep();
      } else {
        setSlidingStep((java.lang.Long)value);
      }
      break;

    case FETCH_SIZE:
      if (value == null) {
        unsetFetchSize();
      } else {
        setFetchSize((java.lang.Integer)value);
      }
      break;

    case TIMEOUT:
      if (value == null) {
        unsetTimeout();
      } else {
        setTimeout((java.lang.Long)value);
      }
      break;

    case LEGAL_PATH_NODES:
      if (value == null) {
        unsetLegalPathNodes();
      } else {
        setLegalPathNodes((java.lang.Boolean)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case SESSION_ID:
      return getSessionId();

    case STATEMENT_ID:
      return getStatementId();

    case PATHS:
      return getPaths();

    case AGGREGATIONS:
      return getAggregations();

    case START_TIME:
      return getStartTime();

    case END_TIME:
      return getEndTime();

    case INTERVAL:
      return getInterval();

    case SLIDING_STEP:
      return getSlidingStep();

    case FETCH_SIZE:
      return getFetchSize();

    case TIMEOUT:
      return getTimeout();

    case LEGAL_PATH_NODES:
      return isLegalPathNodes();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case SESSION_ID:
      return isSetSessionId();
    case STATEMENT_ID:
      return isSetStatementId();
    case PATHS:
      return isSetPaths();
    case AGGREGATIONS:
      return isSetAggregations();
    case START_TIME:
      return isSetStartTime();
    case END_TIME:
      return isSetEndTime();
    case INTERVAL:
      return isSetInterval();
    case SLIDING_STEP:
      return isSetSlidingStep();
    case FETCH_SIZE:
      return isSetFetchSize();
    case TIMEOUT:
      return isSetTimeout();
    case LEGAL_PATH_NODES:
      return isSetLegalPathNodes();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TSAggregationQueryReq)
      return this.equals((TSAggregationQueryReq)that);
    return false;
  }

  public boolean equals(TSAggregationQueryReq that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_sessionId = true;
    boolean that_present_sessionId = true;
    if (this_present_sessionId || that_present_sessionId) {
      if (!(this_present_sessionId && that_present_sessionId))
        return false;
      if (this.sessionId != that.sessionId)
        return false;
    }

    boolean this_present_statementId = true;
    boolean that_present_statementId = true;
    if (this_present_statementId || that_present_statementId) {
      if (!(this_present_statementId && that_present_statementId))
        return false;
      if (this.statementId != that.statementId)
        return false;
    }

    boolean this_present_paths = true && this.isSetPaths();
    boolean that_present_paths = true && that.isSetPaths();
    if (this_present_paths || that_present_paths) {
      if (!(this_present_paths && that_present_paths))
        return false;
      if (!this.paths.equals(that.paths))
        return false;
    }

    boolean this_present_aggregations = true && this.isSetAggregations();
    boolean that_present_aggregations = true && that.isSetAggregations();
    if (this_present_aggregations || that_present_aggregations) {
      if (!(this_present_aggregations && that_present_aggregations))
        return false;
      if (!this.aggregations.equals(that.aggregations))
        return false;
    }

    boolean this_present_startTime = true && this.isSetStartTime();
    boolean that_present_startTime = true && that.isSetStartTime();
    if (this_present_startTime || that_present_startTime) {
      if (!(this_present_startTime && that_present_startTime))
        return false;
      if (this.startTime != that.startTime)
        return false;
    }

    boolean this_present_endTime = true && this.isSetEndTime();
    boolean that_present_endTime = true && that.isSetEndTime();
    if (this_present_endTime || that_present_endTime) {
      if (!(this_present_endTime && that_present_endTime))
        return false;
      if (this.endTime != that.endTime)
        return false;
    }

    boolean this_present_interval = true && this.isSetInterval();
    boolean that_present_interval = true && that.isSetInterval();
    if (this_present_interval || that_present_interval) {
      if (!(this_present_interval && that_present_interval))
        return false;
      if (this.interval != that.interval)
        return false;
    }

    boolean this_present_slidingStep = true && this.isSetSlidingStep();
    boolean that_present_slidingStep = true && that.isSetSlidingStep();
    if (this_present_slidingStep || that_present_slidingStep) {
      if (!(this_present_slidingStep && that_present_slidingStep))
        return false;
      if (this.slidingStep != that.slidingStep)
        return false;
    }

    boolean this_present_fetchSize = true && this.isSetFetchSize();
    boolean that_present_fetchSize = true && that.isSetFetchSize();
    if (this_present_fetchSize || that_present_fetchSize) {
      if (!(this_present_fetchSize && that_present_fetchSize))
        return false;
      if (this.fetchSize != that.fetchSize)
        return false;
    }

    boolean this_present_timeout = true && this.isSetTimeout();
    boolean that_present_timeout = true && that.isSetTimeout();
    if (this_present_timeout || that_present_timeout) {
      if (!(this_present_timeout && that_present_timeout))
        return false;
      if (this.timeout != that.timeout)
        return false;
    }

    boolean this_present_legalPathNodes = true && this.isSetLegalPathNodes();
    boolean that_present_legalPathNodes = true && that.isSetLegalPathNodes();
    if (this_present_legalPathNodes || that_present_legalPathNodes) {
      if (!(this_present_legalPathNodes && that_present_legalPathNodes))
        return false;
      if (this.legalPathNodes != that.legalPathNodes)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(sessionId);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(statementId);

    hashCode = hashCode * 8191 + ((isSetPaths()) ? 131071 : 524287);
    if (isSetPaths())
      hashCode = hashCode * 8191 + paths.hashCode();

    hashCode = hashCode * 8191 + ((isSetAggregations()) ? 131071 : 524287);
    if (isSetAggregations())
      hashCode = hashCode * 8191 + aggregations.hashCode();

    hashCode = hashCode * 8191 + ((isSetStartTime()) ? 131071 : 524287);
    if (isSetStartTime())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(startTime);

    hashCode = hashCode * 8191 + ((isSetEndTime()) ? 131071 : 524287);
    if (isSetEndTime())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(endTime);

    hashCode = hashCode * 8191 + ((isSetInterval()) ? 131071 : 524287);
    if (isSetInterval())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(interval);

    hashCode = hashCode * 8191 + ((isSetSlidingStep()) ? 131071 : 524287);
    if (isSetSlidingStep())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(slidingStep);

    hashCode = hashCode * 8191 + ((isSetFetchSize()) ? 131071 : 524287);
    if (isSetFetchSize())
      hashCode = hashCode * 8191 + fetchSize;

    hashCode = hashCode * 8191 + ((isSetTimeout()) ? 131071 : 524287);
    if (isSetTimeout())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(timeout);

    hashCode = hashCode * 8191 + ((isSetLegalPathNodes()) ? 131071 : 524287);
    if (isSetLegalPathNodes())
      hashCode = hashCode * 8191 + ((legalPathNodes) ? 131071 : 524287);

    return hashCode;
  }

  @Override
  public int compareTo(TSAggregationQueryReq other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetSessionId(), other.isSetSessionId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSessionId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sessionId, other.sessionId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetStatementId(), other.isSetStatementId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatementId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.statementId, other.statementId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPaths(), other.isSetPaths());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPaths()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paths, other.paths);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetAggregations(), other.isSetAggregations());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAggregations()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.aggregations, other.aggregations);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetStartTime(), other.isSetStartTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startTime, other.startTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetEndTime(), other.isSetEndTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endTime, other.endTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetInterval(), other.isSetInterval());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInterval()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.interval, other.interval);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSlidingStep(), other.isSetSlidingStep());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSlidingStep()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.slidingStep, other.slidingStep);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetFetchSize(), other.isSetFetchSize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFetchSize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fetchSize, other.fetchSize);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTimeout(), other.isSetTimeout());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimeout()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timeout, other.timeout);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetLegalPathNodes(), other.isSetLegalPathNodes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLegalPathNodes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.legalPathNodes, other.legalPathNodes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TSAggregationQueryReq(");
    boolean first = true;

    sb.append("sessionId:");
    sb.append(this.sessionId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("statementId:");
    sb.append(this.statementId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("paths:");
    if (this.paths == null) {
      sb.append("null");
    } else {
      sb.append(this.paths);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("aggregations:");
    if (this.aggregations == null) {
      sb.append("null");
    } else {
      sb.append(this.aggregations);
    }
    first = false;
    if (isSetStartTime()) {
      if (!first) sb.append(", ");
      sb.append("startTime:");
      sb.append(this.startTime);
      first = false;
    }
    if (isSetEndTime()) {
      if (!first) sb.append(", ");
      sb.append("endTime:");
      sb.append(this.endTime);
      first = false;
    }
    if (isSetInterval()) {
      if (!first) sb.append(", ");
      sb.append("interval:");
      sb.append(this.interval);
      first = false;
    }
    if (isSetSlidingStep()) {
      if (!first) sb.append(", ");
      sb.append("slidingStep:");
      sb.append(this.slidingStep);
      first = false;
    }
    if (isSetFetchSize()) {
      if (!first) sb.append(", ");
      sb.append("fetchSize:");
      sb.append(this.fetchSize);
      first = false;
    }
    if (isSetTimeout()) {
      if (!first) sb.append(", ");
      sb.append("timeout:");
      sb.append(this.timeout);
      first = false;
    }
    if (isSetLegalPathNodes()) {
      if (!first) sb.append(", ");
      sb.append("legalPathNodes:");
      sb.append(this.legalPathNodes);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'sessionId' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'statementId' because it's a primitive and you chose the non-beans generator.
    if (paths == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'paths' was not present! Struct: " + toString());
    }
    if (aggregations == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'aggregations' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TSAggregationQueryReqStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TSAggregationQueryReqStandardScheme getScheme() {
      return new TSAggregationQueryReqStandardScheme();
    }
  }

  private static class TSAggregationQueryReqStandardScheme extends org.apache.thrift.scheme.StandardScheme<TSAggregationQueryReq> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TSAggregationQueryReq struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SESSION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.sessionId = iprot.readI64();
              struct.setSessionIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // STATEMENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.statementId = iprot.readI64();
              struct.setStatementIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PATHS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list576 = iprot.readListBegin();
                struct.paths = new java.util.ArrayList<java.lang.String>(_list576.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _elem577;
                for (int _i578 = 0; _i578 < _list576.size; ++_i578)
                {
                  _elem577 = iprot.readString();
                  struct.paths.add(_elem577);
                }
                iprot.readListEnd();
              }
              struct.setPathsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // AGGREGATIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list579 = iprot.readListBegin();
                struct.aggregations = new java.util.ArrayList<org.apache.iotdb.common.rpc.thrift.TAggregationType>(_list579.size);
                @org.apache.thrift.annotation.Nullable org.apache.iotdb.common.rpc.thrift.TAggregationType _elem580;
                for (int _i581 = 0; _i581 < _list579.size; ++_i581)
                {
                  _elem580 = org.apache.iotdb.common.rpc.thrift.TAggregationType.findByValue(iprot.readI32());
                  if (_elem580 != null)
                  {
                    struct.aggregations.add(_elem580);
                  }
                }
                iprot.readListEnd();
              }
              struct.setAggregationsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // START_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.startTime = iprot.readI64();
              struct.setStartTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // END_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.endTime = iprot.readI64();
              struct.setEndTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // INTERVAL
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.interval = iprot.readI64();
              struct.setIntervalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // SLIDING_STEP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.slidingStep = iprot.readI64();
              struct.setSlidingStepIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // FETCH_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.fetchSize = iprot.readI32();
              struct.setFetchSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // TIMEOUT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.timeout = iprot.readI64();
              struct.setTimeoutIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // LEGAL_PATH_NODES
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.legalPathNodes = iprot.readBool();
              struct.setLegalPathNodesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetSessionId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'sessionId' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetStatementId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'statementId' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TSAggregationQueryReq struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(SESSION_ID_FIELD_DESC);
      oprot.writeI64(struct.sessionId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(STATEMENT_ID_FIELD_DESC);
      oprot.writeI64(struct.statementId);
      oprot.writeFieldEnd();
      if (struct.paths != null) {
        oprot.writeFieldBegin(PATHS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.paths.size()));
          for (java.lang.String _iter582 : struct.paths)
          {
            oprot.writeString(_iter582);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.aggregations != null) {
        oprot.writeFieldBegin(AGGREGATIONS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.aggregations.size()));
          for (org.apache.iotdb.common.rpc.thrift.TAggregationType _iter583 : struct.aggregations)
          {
            oprot.writeI32(_iter583.getValue());
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.isSetStartTime()) {
        oprot.writeFieldBegin(START_TIME_FIELD_DESC);
        oprot.writeI64(struct.startTime);
        oprot.writeFieldEnd();
      }
      if (struct.isSetEndTime()) {
        oprot.writeFieldBegin(END_TIME_FIELD_DESC);
        oprot.writeI64(struct.endTime);
        oprot.writeFieldEnd();
      }
      if (struct.isSetInterval()) {
        oprot.writeFieldBegin(INTERVAL_FIELD_DESC);
        oprot.writeI64(struct.interval);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSlidingStep()) {
        oprot.writeFieldBegin(SLIDING_STEP_FIELD_DESC);
        oprot.writeI64(struct.slidingStep);
        oprot.writeFieldEnd();
      }
      if (struct.isSetFetchSize()) {
        oprot.writeFieldBegin(FETCH_SIZE_FIELD_DESC);
        oprot.writeI32(struct.fetchSize);
        oprot.writeFieldEnd();
      }
      if (struct.isSetTimeout()) {
        oprot.writeFieldBegin(TIMEOUT_FIELD_DESC);
        oprot.writeI64(struct.timeout);
        oprot.writeFieldEnd();
      }
      if (struct.isSetLegalPathNodes()) {
        oprot.writeFieldBegin(LEGAL_PATH_NODES_FIELD_DESC);
        oprot.writeBool(struct.legalPathNodes);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TSAggregationQueryReqTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TSAggregationQueryReqTupleScheme getScheme() {
      return new TSAggregationQueryReqTupleScheme();
    }
  }

  private static class TSAggregationQueryReqTupleScheme extends org.apache.thrift.scheme.TupleScheme<TSAggregationQueryReq> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TSAggregationQueryReq struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeI64(struct.sessionId);
      oprot.writeI64(struct.statementId);
      {
        oprot.writeI32(struct.paths.size());
        for (java.lang.String _iter584 : struct.paths)
        {
          oprot.writeString(_iter584);
        }
      }
      {
        oprot.writeI32(struct.aggregations.size());
        for (org.apache.iotdb.common.rpc.thrift.TAggregationType _iter585 : struct.aggregations)
        {
          oprot.writeI32(_iter585.getValue());
        }
      }
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetStartTime()) {
        optionals.set(0);
      }
      if (struct.isSetEndTime()) {
        optionals.set(1);
      }
      if (struct.isSetInterval()) {
        optionals.set(2);
      }
      if (struct.isSetSlidingStep()) {
        optionals.set(3);
      }
      if (struct.isSetFetchSize()) {
        optionals.set(4);
      }
      if (struct.isSetTimeout()) {
        optionals.set(5);
      }
      if (struct.isSetLegalPathNodes()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetStartTime()) {
        oprot.writeI64(struct.startTime);
      }
      if (struct.isSetEndTime()) {
        oprot.writeI64(struct.endTime);
      }
      if (struct.isSetInterval()) {
        oprot.writeI64(struct.interval);
      }
      if (struct.isSetSlidingStep()) {
        oprot.writeI64(struct.slidingStep);
      }
      if (struct.isSetFetchSize()) {
        oprot.writeI32(struct.fetchSize);
      }
      if (struct.isSetTimeout()) {
        oprot.writeI64(struct.timeout);
      }
      if (struct.isSetLegalPathNodes()) {
        oprot.writeBool(struct.legalPathNodes);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TSAggregationQueryReq struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.sessionId = iprot.readI64();
      struct.setSessionIdIsSet(true);
      struct.statementId = iprot.readI64();
      struct.setStatementIdIsSet(true);
      {
        org.apache.thrift.protocol.TList _list586 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRING);
        struct.paths = new java.util.ArrayList<java.lang.String>(_list586.size);
        @org.apache.thrift.annotation.Nullable java.lang.String _elem587;
        for (int _i588 = 0; _i588 < _list586.size; ++_i588)
        {
          _elem587 = iprot.readString();
          struct.paths.add(_elem587);
        }
      }
      struct.setPathsIsSet(true);
      {
        org.apache.thrift.protocol.TList _list589 = iprot.readListBegin(org.apache.thrift.protocol.TType.I32);
        struct.aggregations = new java.util.ArrayList<org.apache.iotdb.common.rpc.thrift.TAggregationType>(_list589.size);
        @org.apache.thrift.annotation.Nullable org.apache.iotdb.common.rpc.thrift.TAggregationType _elem590;
        for (int _i591 = 0; _i591 < _list589.size; ++_i591)
        {
          _elem590 = org.apache.iotdb.common.rpc.thrift.TAggregationType.findByValue(iprot.readI32());
          if (_elem590 != null)
          {
            struct.aggregations.add(_elem590);
          }
        }
      }
      struct.setAggregationsIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.startTime = iprot.readI64();
        struct.setStartTimeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.endTime = iprot.readI64();
        struct.setEndTimeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.interval = iprot.readI64();
        struct.setIntervalIsSet(true);
      }
      if (incoming.get(3)) {
        struct.slidingStep = iprot.readI64();
        struct.setSlidingStepIsSet(true);
      }
      if (incoming.get(4)) {
        struct.fetchSize = iprot.readI32();
        struct.setFetchSizeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.timeout = iprot.readI64();
        struct.setTimeoutIsSet(true);
      }
      if (incoming.get(6)) {
        struct.legalPathNodes = iprot.readBool();
        struct.setLegalPathNodesIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

