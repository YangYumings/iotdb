/**
 * Autogenerated by Thrift Compiler (0.20.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.iotdb.service.rpc.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.20.0)", date = "2025-05-09")
public class TSInsertRecordReq implements org.apache.thrift.TBase<TSInsertRecordReq, TSInsertRecordReq._Fields>, java.io.Serializable, Cloneable, Comparable<TSInsertRecordReq> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TSInsertRecordReq");

  private static final org.apache.thrift.protocol.TField SESSION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sessionId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField PREFIX_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("prefixPath", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField MEASUREMENTS_FIELD_DESC = new org.apache.thrift.protocol.TField("measurements", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField VALUES_FIELD_DESC = new org.apache.thrift.protocol.TField("values", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("timestamp", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField IS_ALIGNED_FIELD_DESC = new org.apache.thrift.protocol.TField("isAligned", org.apache.thrift.protocol.TType.BOOL, (short)6);
  private static final org.apache.thrift.protocol.TField IS_WRITE_TO_TABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("isWriteToTable", org.apache.thrift.protocol.TType.BOOL, (short)7);
  private static final org.apache.thrift.protocol.TField COLUMN_CATEGORYIES_FIELD_DESC = new org.apache.thrift.protocol.TField("columnCategoryies", org.apache.thrift.protocol.TType.LIST, (short)8);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TSInsertRecordReqStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TSInsertRecordReqTupleSchemeFactory();

  public long sessionId; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String prefixPath; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> measurements; // required
  public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer values; // required
  public long timestamp; // required
  public boolean isAligned; // optional
  public boolean isWriteToTable; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Byte> columnCategoryies; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SESSION_ID((short)1, "sessionId"),
    PREFIX_PATH((short)2, "prefixPath"),
    MEASUREMENTS((short)3, "measurements"),
    VALUES((short)4, "values"),
    TIMESTAMP((short)5, "timestamp"),
    IS_ALIGNED((short)6, "isAligned"),
    IS_WRITE_TO_TABLE((short)7, "isWriteToTable"),
    COLUMN_CATEGORYIES((short)8, "columnCategoryies");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SESSION_ID
          return SESSION_ID;
        case 2: // PREFIX_PATH
          return PREFIX_PATH;
        case 3: // MEASUREMENTS
          return MEASUREMENTS;
        case 4: // VALUES
          return VALUES;
        case 5: // TIMESTAMP
          return TIMESTAMP;
        case 6: // IS_ALIGNED
          return IS_ALIGNED;
        case 7: // IS_WRITE_TO_TABLE
          return IS_WRITE_TO_TABLE;
        case 8: // COLUMN_CATEGORYIES
          return COLUMN_CATEGORYIES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SESSIONID_ISSET_ID = 0;
  private static final int __TIMESTAMP_ISSET_ID = 1;
  private static final int __ISALIGNED_ISSET_ID = 2;
  private static final int __ISWRITETOTABLE_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.IS_ALIGNED,_Fields.IS_WRITE_TO_TABLE,_Fields.COLUMN_CATEGORYIES};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SESSION_ID, new org.apache.thrift.meta_data.FieldMetaData("sessionId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.PREFIX_PATH, new org.apache.thrift.meta_data.FieldMetaData("prefixPath", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MEASUREMENTS, new org.apache.thrift.meta_data.FieldMetaData("measurements", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.VALUES, new org.apache.thrift.meta_data.FieldMetaData("values", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("timestamp", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.IS_ALIGNED, new org.apache.thrift.meta_data.FieldMetaData("isAligned", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.IS_WRITE_TO_TABLE, new org.apache.thrift.meta_data.FieldMetaData("isWriteToTable", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.COLUMN_CATEGORYIES, new org.apache.thrift.meta_data.FieldMetaData("columnCategoryies", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TSInsertRecordReq.class, metaDataMap);
  }

  public TSInsertRecordReq() {
  }

  public TSInsertRecordReq(
    long sessionId,
    java.lang.String prefixPath,
    java.util.List<java.lang.String> measurements,
    java.nio.ByteBuffer values,
    long timestamp)
  {
    this();
    this.sessionId = sessionId;
    setSessionIdIsSet(true);
    this.prefixPath = prefixPath;
    this.measurements = measurements;
    this.values = org.apache.thrift.TBaseHelper.copyBinary(values);
    this.timestamp = timestamp;
    setTimestampIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TSInsertRecordReq(TSInsertRecordReq other) {
    __isset_bitfield = other.__isset_bitfield;
    this.sessionId = other.sessionId;
    if (other.isSetPrefixPath()) {
      this.prefixPath = other.prefixPath;
    }
    if (other.isSetMeasurements()) {
      java.util.List<java.lang.String> __this__measurements = new java.util.ArrayList<java.lang.String>(other.measurements);
      this.measurements = __this__measurements;
    }
    if (other.isSetValues()) {
      this.values = org.apache.thrift.TBaseHelper.copyBinary(other.values);
    }
    this.timestamp = other.timestamp;
    this.isAligned = other.isAligned;
    this.isWriteToTable = other.isWriteToTable;
    if (other.isSetColumnCategoryies()) {
      java.util.List<java.lang.Byte> __this__columnCategoryies = new java.util.ArrayList<java.lang.Byte>(other.columnCategoryies);
      this.columnCategoryies = __this__columnCategoryies;
    }
  }

  @Override
  public TSInsertRecordReq deepCopy() {
    return new TSInsertRecordReq(this);
  }

  @Override
  public void clear() {
    setSessionIdIsSet(false);
    this.sessionId = 0;
    this.prefixPath = null;
    this.measurements = null;
    this.values = null;
    setTimestampIsSet(false);
    this.timestamp = 0;
    setIsAlignedIsSet(false);
    this.isAligned = false;
    setIsWriteToTableIsSet(false);
    this.isWriteToTable = false;
    this.columnCategoryies = null;
  }

  public long getSessionId() {
    return this.sessionId;
  }

  public TSInsertRecordReq setSessionId(long sessionId) {
    this.sessionId = sessionId;
    setSessionIdIsSet(true);
    return this;
  }

  public void unsetSessionId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SESSIONID_ISSET_ID);
  }

  /** Returns true if field sessionId is set (has been assigned a value) and false otherwise */
  public boolean isSetSessionId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SESSIONID_ISSET_ID);
  }

  public void setSessionIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SESSIONID_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getPrefixPath() {
    return this.prefixPath;
  }

  public TSInsertRecordReq setPrefixPath(@org.apache.thrift.annotation.Nullable java.lang.String prefixPath) {
    this.prefixPath = prefixPath;
    return this;
  }

  public void unsetPrefixPath() {
    this.prefixPath = null;
  }

  /** Returns true if field prefixPath is set (has been assigned a value) and false otherwise */
  public boolean isSetPrefixPath() {
    return this.prefixPath != null;
  }

  public void setPrefixPathIsSet(boolean value) {
    if (!value) {
      this.prefixPath = null;
    }
  }

  public int getMeasurementsSize() {
    return (this.measurements == null) ? 0 : this.measurements.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.String> getMeasurementsIterator() {
    return (this.measurements == null) ? null : this.measurements.iterator();
  }

  public void addToMeasurements(java.lang.String elem) {
    if (this.measurements == null) {
      this.measurements = new java.util.ArrayList<java.lang.String>();
    }
    this.measurements.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.String> getMeasurements() {
    return this.measurements;
  }

  public TSInsertRecordReq setMeasurements(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> measurements) {
    this.measurements = measurements;
    return this;
  }

  public void unsetMeasurements() {
    this.measurements = null;
  }

  /** Returns true if field measurements is set (has been assigned a value) and false otherwise */
  public boolean isSetMeasurements() {
    return this.measurements != null;
  }

  public void setMeasurementsIsSet(boolean value) {
    if (!value) {
      this.measurements = null;
    }
  }

  public byte[] getValues() {
    setValues(org.apache.thrift.TBaseHelper.rightSize(values));
    return values == null ? null : values.array();
  }

  public java.nio.ByteBuffer bufferForValues() {
    return org.apache.thrift.TBaseHelper.copyBinary(values);
  }

  public TSInsertRecordReq setValues(byte[] values) {
    this.values = values == null ? (java.nio.ByteBuffer)null   : java.nio.ByteBuffer.wrap(values.clone());
    return this;
  }

  public TSInsertRecordReq setValues(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer values) {
    this.values = org.apache.thrift.TBaseHelper.copyBinary(values);
    return this;
  }

  public void unsetValues() {
    this.values = null;
  }

  /** Returns true if field values is set (has been assigned a value) and false otherwise */
  public boolean isSetValues() {
    return this.values != null;
  }

  public void setValuesIsSet(boolean value) {
    if (!value) {
      this.values = null;
    }
  }

  public long getTimestamp() {
    return this.timestamp;
  }

  public TSInsertRecordReq setTimestamp(long timestamp) {
    this.timestamp = timestamp;
    setTimestampIsSet(true);
    return this;
  }

  public void unsetTimestamp() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
  }

  /** Returns true if field timestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetTimestamp() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
  }

  public void setTimestampIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TIMESTAMP_ISSET_ID, value);
  }

  public boolean isIsAligned() {
    return this.isAligned;
  }

  public TSInsertRecordReq setIsAligned(boolean isAligned) {
    this.isAligned = isAligned;
    setIsAlignedIsSet(true);
    return this;
  }

  public void unsetIsAligned() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISALIGNED_ISSET_ID);
  }

  /** Returns true if field isAligned is set (has been assigned a value) and false otherwise */
  public boolean isSetIsAligned() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISALIGNED_ISSET_ID);
  }

  public void setIsAlignedIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISALIGNED_ISSET_ID, value);
  }

  public boolean isIsWriteToTable() {
    return this.isWriteToTable;
  }

  public TSInsertRecordReq setIsWriteToTable(boolean isWriteToTable) {
    this.isWriteToTable = isWriteToTable;
    setIsWriteToTableIsSet(true);
    return this;
  }

  public void unsetIsWriteToTable() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISWRITETOTABLE_ISSET_ID);
  }

  /** Returns true if field isWriteToTable is set (has been assigned a value) and false otherwise */
  public boolean isSetIsWriteToTable() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISWRITETOTABLE_ISSET_ID);
  }

  public void setIsWriteToTableIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISWRITETOTABLE_ISSET_ID, value);
  }

  public int getColumnCategoryiesSize() {
    return (this.columnCategoryies == null) ? 0 : this.columnCategoryies.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.Byte> getColumnCategoryiesIterator() {
    return (this.columnCategoryies == null) ? null : this.columnCategoryies.iterator();
  }

  public void addToColumnCategoryies(byte elem) {
    if (this.columnCategoryies == null) {
      this.columnCategoryies = new java.util.ArrayList<java.lang.Byte>();
    }
    this.columnCategoryies.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.Byte> getColumnCategoryies() {
    return this.columnCategoryies;
  }

  public TSInsertRecordReq setColumnCategoryies(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Byte> columnCategoryies) {
    this.columnCategoryies = columnCategoryies;
    return this;
  }

  public void unsetColumnCategoryies() {
    this.columnCategoryies = null;
  }

  /** Returns true if field columnCategoryies is set (has been assigned a value) and false otherwise */
  public boolean isSetColumnCategoryies() {
    return this.columnCategoryies != null;
  }

  public void setColumnCategoryiesIsSet(boolean value) {
    if (!value) {
      this.columnCategoryies = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case SESSION_ID:
      if (value == null) {
        unsetSessionId();
      } else {
        setSessionId((java.lang.Long)value);
      }
      break;

    case PREFIX_PATH:
      if (value == null) {
        unsetPrefixPath();
      } else {
        setPrefixPath((java.lang.String)value);
      }
      break;

    case MEASUREMENTS:
      if (value == null) {
        unsetMeasurements();
      } else {
        setMeasurements((java.util.List<java.lang.String>)value);
      }
      break;

    case VALUES:
      if (value == null) {
        unsetValues();
      } else {
        if (value instanceof byte[]) {
          setValues((byte[])value);
        } else {
          setValues((java.nio.ByteBuffer)value);
        }
      }
      break;

    case TIMESTAMP:
      if (value == null) {
        unsetTimestamp();
      } else {
        setTimestamp((java.lang.Long)value);
      }
      break;

    case IS_ALIGNED:
      if (value == null) {
        unsetIsAligned();
      } else {
        setIsAligned((java.lang.Boolean)value);
      }
      break;

    case IS_WRITE_TO_TABLE:
      if (value == null) {
        unsetIsWriteToTable();
      } else {
        setIsWriteToTable((java.lang.Boolean)value);
      }
      break;

    case COLUMN_CATEGORYIES:
      if (value == null) {
        unsetColumnCategoryies();
      } else {
        setColumnCategoryies((java.util.List<java.lang.Byte>)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case SESSION_ID:
      return getSessionId();

    case PREFIX_PATH:
      return getPrefixPath();

    case MEASUREMENTS:
      return getMeasurements();

    case VALUES:
      return getValues();

    case TIMESTAMP:
      return getTimestamp();

    case IS_ALIGNED:
      return isIsAligned();

    case IS_WRITE_TO_TABLE:
      return isIsWriteToTable();

    case COLUMN_CATEGORYIES:
      return getColumnCategoryies();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case SESSION_ID:
      return isSetSessionId();
    case PREFIX_PATH:
      return isSetPrefixPath();
    case MEASUREMENTS:
      return isSetMeasurements();
    case VALUES:
      return isSetValues();
    case TIMESTAMP:
      return isSetTimestamp();
    case IS_ALIGNED:
      return isSetIsAligned();
    case IS_WRITE_TO_TABLE:
      return isSetIsWriteToTable();
    case COLUMN_CATEGORYIES:
      return isSetColumnCategoryies();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TSInsertRecordReq)
      return this.equals((TSInsertRecordReq)that);
    return false;
  }

  public boolean equals(TSInsertRecordReq that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_sessionId = true;
    boolean that_present_sessionId = true;
    if (this_present_sessionId || that_present_sessionId) {
      if (!(this_present_sessionId && that_present_sessionId))
        return false;
      if (this.sessionId != that.sessionId)
        return false;
    }

    boolean this_present_prefixPath = true && this.isSetPrefixPath();
    boolean that_present_prefixPath = true && that.isSetPrefixPath();
    if (this_present_prefixPath || that_present_prefixPath) {
      if (!(this_present_prefixPath && that_present_prefixPath))
        return false;
      if (!this.prefixPath.equals(that.prefixPath))
        return false;
    }

    boolean this_present_measurements = true && this.isSetMeasurements();
    boolean that_present_measurements = true && that.isSetMeasurements();
    if (this_present_measurements || that_present_measurements) {
      if (!(this_present_measurements && that_present_measurements))
        return false;
      if (!this.measurements.equals(that.measurements))
        return false;
    }

    boolean this_present_values = true && this.isSetValues();
    boolean that_present_values = true && that.isSetValues();
    if (this_present_values || that_present_values) {
      if (!(this_present_values && that_present_values))
        return false;
      if (!this.values.equals(that.values))
        return false;
    }

    boolean this_present_timestamp = true;
    boolean that_present_timestamp = true;
    if (this_present_timestamp || that_present_timestamp) {
      if (!(this_present_timestamp && that_present_timestamp))
        return false;
      if (this.timestamp != that.timestamp)
        return false;
    }

    boolean this_present_isAligned = true && this.isSetIsAligned();
    boolean that_present_isAligned = true && that.isSetIsAligned();
    if (this_present_isAligned || that_present_isAligned) {
      if (!(this_present_isAligned && that_present_isAligned))
        return false;
      if (this.isAligned != that.isAligned)
        return false;
    }

    boolean this_present_isWriteToTable = true && this.isSetIsWriteToTable();
    boolean that_present_isWriteToTable = true && that.isSetIsWriteToTable();
    if (this_present_isWriteToTable || that_present_isWriteToTable) {
      if (!(this_present_isWriteToTable && that_present_isWriteToTable))
        return false;
      if (this.isWriteToTable != that.isWriteToTable)
        return false;
    }

    boolean this_present_columnCategoryies = true && this.isSetColumnCategoryies();
    boolean that_present_columnCategoryies = true && that.isSetColumnCategoryies();
    if (this_present_columnCategoryies || that_present_columnCategoryies) {
      if (!(this_present_columnCategoryies && that_present_columnCategoryies))
        return false;
      if (!this.columnCategoryies.equals(that.columnCategoryies))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(sessionId);

    hashCode = hashCode * 8191 + ((isSetPrefixPath()) ? 131071 : 524287);
    if (isSetPrefixPath())
      hashCode = hashCode * 8191 + prefixPath.hashCode();

    hashCode = hashCode * 8191 + ((isSetMeasurements()) ? 131071 : 524287);
    if (isSetMeasurements())
      hashCode = hashCode * 8191 + measurements.hashCode();

    hashCode = hashCode * 8191 + ((isSetValues()) ? 131071 : 524287);
    if (isSetValues())
      hashCode = hashCode * 8191 + values.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(timestamp);

    hashCode = hashCode * 8191 + ((isSetIsAligned()) ? 131071 : 524287);
    if (isSetIsAligned())
      hashCode = hashCode * 8191 + ((isAligned) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetIsWriteToTable()) ? 131071 : 524287);
    if (isSetIsWriteToTable())
      hashCode = hashCode * 8191 + ((isWriteToTable) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetColumnCategoryies()) ? 131071 : 524287);
    if (isSetColumnCategoryies())
      hashCode = hashCode * 8191 + columnCategoryies.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TSInsertRecordReq other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetSessionId(), other.isSetSessionId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSessionId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sessionId, other.sessionId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPrefixPath(), other.isSetPrefixPath());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrefixPath()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.prefixPath, other.prefixPath);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetMeasurements(), other.isSetMeasurements());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMeasurements()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.measurements, other.measurements);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetValues(), other.isSetValues());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetValues()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.values, other.values);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTimestamp(), other.isSetTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timestamp, other.timestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetIsAligned(), other.isSetIsAligned());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsAligned()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isAligned, other.isAligned);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetIsWriteToTable(), other.isSetIsWriteToTable());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsWriteToTable()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isWriteToTable, other.isWriteToTable);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetColumnCategoryies(), other.isSetColumnCategoryies());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetColumnCategoryies()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.columnCategoryies, other.columnCategoryies);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TSInsertRecordReq(");
    boolean first = true;

    sb.append("sessionId:");
    sb.append(this.sessionId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("prefixPath:");
    if (this.prefixPath == null) {
      sb.append("null");
    } else {
      sb.append(this.prefixPath);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("measurements:");
    if (this.measurements == null) {
      sb.append("null");
    } else {
      sb.append(this.measurements);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("values:");
    if (this.values == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.values, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("timestamp:");
    sb.append(this.timestamp);
    first = false;
    if (isSetIsAligned()) {
      if (!first) sb.append(", ");
      sb.append("isAligned:");
      sb.append(this.isAligned);
      first = false;
    }
    if (isSetIsWriteToTable()) {
      if (!first) sb.append(", ");
      sb.append("isWriteToTable:");
      sb.append(this.isWriteToTable);
      first = false;
    }
    if (isSetColumnCategoryies()) {
      if (!first) sb.append(", ");
      sb.append("columnCategoryies:");
      if (this.columnCategoryies == null) {
        sb.append("null");
      } else {
        sb.append(this.columnCategoryies);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'sessionId' because it's a primitive and you chose the non-beans generator.
    if (prefixPath == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'prefixPath' was not present! Struct: " + toString());
    }
    if (measurements == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'measurements' was not present! Struct: " + toString());
    }
    if (values == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'values' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'timestamp' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TSInsertRecordReqStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TSInsertRecordReqStandardScheme getScheme() {
      return new TSInsertRecordReqStandardScheme();
    }
  }

  private static class TSInsertRecordReqStandardScheme extends org.apache.thrift.scheme.StandardScheme<TSInsertRecordReq> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TSInsertRecordReq struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SESSION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.sessionId = iprot.readI64();
              struct.setSessionIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PREFIX_PATH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.prefixPath = iprot.readString();
              struct.setPrefixPathIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MEASUREMENTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list150 = iprot.readListBegin();
                struct.measurements = new java.util.ArrayList<java.lang.String>(_list150.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _elem151;
                for (int _i152 = 0; _i152 < _list150.size; ++_i152)
                {
                  _elem151 = iprot.readString();
                  struct.measurements.add(_elem151);
                }
                iprot.readListEnd();
              }
              struct.setMeasurementsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // VALUES
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.values = iprot.readBinary();
              struct.setValuesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.timestamp = iprot.readI64();
              struct.setTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // IS_ALIGNED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isAligned = iprot.readBool();
              struct.setIsAlignedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // IS_WRITE_TO_TABLE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isWriteToTable = iprot.readBool();
              struct.setIsWriteToTableIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // COLUMN_CATEGORYIES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list153 = iprot.readListBegin();
                struct.columnCategoryies = new java.util.ArrayList<java.lang.Byte>(_list153.size);
                byte _elem154;
                for (int _i155 = 0; _i155 < _list153.size; ++_i155)
                {
                  _elem154 = iprot.readByte();
                  struct.columnCategoryies.add(_elem154);
                }
                iprot.readListEnd();
              }
              struct.setColumnCategoryiesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetSessionId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'sessionId' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetTimestamp()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'timestamp' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TSInsertRecordReq struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(SESSION_ID_FIELD_DESC);
      oprot.writeI64(struct.sessionId);
      oprot.writeFieldEnd();
      if (struct.prefixPath != null) {
        oprot.writeFieldBegin(PREFIX_PATH_FIELD_DESC);
        oprot.writeString(struct.prefixPath);
        oprot.writeFieldEnd();
      }
      if (struct.measurements != null) {
        oprot.writeFieldBegin(MEASUREMENTS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.measurements.size()));
          for (java.lang.String _iter156 : struct.measurements)
          {
            oprot.writeString(_iter156);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.values != null) {
        oprot.writeFieldBegin(VALUES_FIELD_DESC);
        oprot.writeBinary(struct.values);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TIMESTAMP_FIELD_DESC);
      oprot.writeI64(struct.timestamp);
      oprot.writeFieldEnd();
      if (struct.isSetIsAligned()) {
        oprot.writeFieldBegin(IS_ALIGNED_FIELD_DESC);
        oprot.writeBool(struct.isAligned);
        oprot.writeFieldEnd();
      }
      if (struct.isSetIsWriteToTable()) {
        oprot.writeFieldBegin(IS_WRITE_TO_TABLE_FIELD_DESC);
        oprot.writeBool(struct.isWriteToTable);
        oprot.writeFieldEnd();
      }
      if (struct.columnCategoryies != null) {
        if (struct.isSetColumnCategoryies()) {
          oprot.writeFieldBegin(COLUMN_CATEGORYIES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.BYTE, struct.columnCategoryies.size()));
            for (byte _iter157 : struct.columnCategoryies)
            {
              oprot.writeByte(_iter157);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TSInsertRecordReqTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TSInsertRecordReqTupleScheme getScheme() {
      return new TSInsertRecordReqTupleScheme();
    }
  }

  private static class TSInsertRecordReqTupleScheme extends org.apache.thrift.scheme.TupleScheme<TSInsertRecordReq> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TSInsertRecordReq struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeI64(struct.sessionId);
      oprot.writeString(struct.prefixPath);
      {
        oprot.writeI32(struct.measurements.size());
        for (java.lang.String _iter158 : struct.measurements)
        {
          oprot.writeString(_iter158);
        }
      }
      oprot.writeBinary(struct.values);
      oprot.writeI64(struct.timestamp);
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetIsAligned()) {
        optionals.set(0);
      }
      if (struct.isSetIsWriteToTable()) {
        optionals.set(1);
      }
      if (struct.isSetColumnCategoryies()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetIsAligned()) {
        oprot.writeBool(struct.isAligned);
      }
      if (struct.isSetIsWriteToTable()) {
        oprot.writeBool(struct.isWriteToTable);
      }
      if (struct.isSetColumnCategoryies()) {
        {
          oprot.writeI32(struct.columnCategoryies.size());
          for (byte _iter159 : struct.columnCategoryies)
          {
            oprot.writeByte(_iter159);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TSInsertRecordReq struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.sessionId = iprot.readI64();
      struct.setSessionIdIsSet(true);
      struct.prefixPath = iprot.readString();
      struct.setPrefixPathIsSet(true);
      {
        org.apache.thrift.protocol.TList _list160 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRING);
        struct.measurements = new java.util.ArrayList<java.lang.String>(_list160.size);
        @org.apache.thrift.annotation.Nullable java.lang.String _elem161;
        for (int _i162 = 0; _i162 < _list160.size; ++_i162)
        {
          _elem161 = iprot.readString();
          struct.measurements.add(_elem161);
        }
      }
      struct.setMeasurementsIsSet(true);
      struct.values = iprot.readBinary();
      struct.setValuesIsSet(true);
      struct.timestamp = iprot.readI64();
      struct.setTimestampIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.isAligned = iprot.readBool();
        struct.setIsAlignedIsSet(true);
      }
      if (incoming.get(1)) {
        struct.isWriteToTable = iprot.readBool();
        struct.setIsWriteToTableIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list163 = iprot.readListBegin(org.apache.thrift.protocol.TType.BYTE);
          struct.columnCategoryies = new java.util.ArrayList<java.lang.Byte>(_list163.size);
          byte _elem164;
          for (int _i165 = 0; _i165 < _list163.size; ++_i165)
          {
            _elem164 = iprot.readByte();
            struct.columnCategoryies.add(_elem164);
          }
        }
        struct.setColumnCategoryiesIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

