/**
 * Autogenerated by Thrift Compiler (0.20.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.iotdb.service.rpc.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.20.0)", date = "2025-05-09")
public class TSTracingInfo implements org.apache.thrift.TBase<TSTracingInfo, TSTracingInfo._Fields>, java.io.Serializable, Cloneable, Comparable<TSTracingInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TSTracingInfo");

  private static final org.apache.thrift.protocol.TField ACTIVITY_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("activityList", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField ELAPSED_TIME_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("elapsedTimeList", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField SERIES_PATH_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("seriesPathNum", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField SEQ_FILE_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("seqFileNum", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField UN_SEQ_FILE_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("unSeqFileNum", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField SEQUENCE_CHUNK_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("sequenceChunkNum", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField SEQUENCE_CHUNK_POINT_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("sequenceChunkPointNum", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField UNSEQUENCE_CHUNK_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("unsequenceChunkNum", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField UNSEQUENCE_CHUNK_POINT_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("unsequenceChunkPointNum", org.apache.thrift.protocol.TType.I64, (short)9);
  private static final org.apache.thrift.protocol.TField TOTAL_PAGE_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("totalPageNum", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField OVERLAPPED_PAGE_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("overlappedPageNum", org.apache.thrift.protocol.TType.I32, (short)11);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TSTracingInfoStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TSTracingInfoTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> activityList; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Long> elapsedTimeList; // required
  public int seriesPathNum; // optional
  public int seqFileNum; // optional
  public int unSeqFileNum; // optional
  public int sequenceChunkNum; // optional
  public long sequenceChunkPointNum; // optional
  public int unsequenceChunkNum; // optional
  public long unsequenceChunkPointNum; // optional
  public int totalPageNum; // optional
  public int overlappedPageNum; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ACTIVITY_LIST((short)1, "activityList"),
    ELAPSED_TIME_LIST((short)2, "elapsedTimeList"),
    SERIES_PATH_NUM((short)3, "seriesPathNum"),
    SEQ_FILE_NUM((short)4, "seqFileNum"),
    UN_SEQ_FILE_NUM((short)5, "unSeqFileNum"),
    SEQUENCE_CHUNK_NUM((short)6, "sequenceChunkNum"),
    SEQUENCE_CHUNK_POINT_NUM((short)7, "sequenceChunkPointNum"),
    UNSEQUENCE_CHUNK_NUM((short)8, "unsequenceChunkNum"),
    UNSEQUENCE_CHUNK_POINT_NUM((short)9, "unsequenceChunkPointNum"),
    TOTAL_PAGE_NUM((short)10, "totalPageNum"),
    OVERLAPPED_PAGE_NUM((short)11, "overlappedPageNum");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ACTIVITY_LIST
          return ACTIVITY_LIST;
        case 2: // ELAPSED_TIME_LIST
          return ELAPSED_TIME_LIST;
        case 3: // SERIES_PATH_NUM
          return SERIES_PATH_NUM;
        case 4: // SEQ_FILE_NUM
          return SEQ_FILE_NUM;
        case 5: // UN_SEQ_FILE_NUM
          return UN_SEQ_FILE_NUM;
        case 6: // SEQUENCE_CHUNK_NUM
          return SEQUENCE_CHUNK_NUM;
        case 7: // SEQUENCE_CHUNK_POINT_NUM
          return SEQUENCE_CHUNK_POINT_NUM;
        case 8: // UNSEQUENCE_CHUNK_NUM
          return UNSEQUENCE_CHUNK_NUM;
        case 9: // UNSEQUENCE_CHUNK_POINT_NUM
          return UNSEQUENCE_CHUNK_POINT_NUM;
        case 10: // TOTAL_PAGE_NUM
          return TOTAL_PAGE_NUM;
        case 11: // OVERLAPPED_PAGE_NUM
          return OVERLAPPED_PAGE_NUM;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SERIESPATHNUM_ISSET_ID = 0;
  private static final int __SEQFILENUM_ISSET_ID = 1;
  private static final int __UNSEQFILENUM_ISSET_ID = 2;
  private static final int __SEQUENCECHUNKNUM_ISSET_ID = 3;
  private static final int __SEQUENCECHUNKPOINTNUM_ISSET_ID = 4;
  private static final int __UNSEQUENCECHUNKNUM_ISSET_ID = 5;
  private static final int __UNSEQUENCECHUNKPOINTNUM_ISSET_ID = 6;
  private static final int __TOTALPAGENUM_ISSET_ID = 7;
  private static final int __OVERLAPPEDPAGENUM_ISSET_ID = 8;
  private short __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.SERIES_PATH_NUM,_Fields.SEQ_FILE_NUM,_Fields.UN_SEQ_FILE_NUM,_Fields.SEQUENCE_CHUNK_NUM,_Fields.SEQUENCE_CHUNK_POINT_NUM,_Fields.UNSEQUENCE_CHUNK_NUM,_Fields.UNSEQUENCE_CHUNK_POINT_NUM,_Fields.TOTAL_PAGE_NUM,_Fields.OVERLAPPED_PAGE_NUM};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ACTIVITY_LIST, new org.apache.thrift.meta_data.FieldMetaData("activityList", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.ELAPSED_TIME_LIST, new org.apache.thrift.meta_data.FieldMetaData("elapsedTimeList", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.SERIES_PATH_NUM, new org.apache.thrift.meta_data.FieldMetaData("seriesPathNum", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SEQ_FILE_NUM, new org.apache.thrift.meta_data.FieldMetaData("seqFileNum", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.UN_SEQ_FILE_NUM, new org.apache.thrift.meta_data.FieldMetaData("unSeqFileNum", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SEQUENCE_CHUNK_NUM, new org.apache.thrift.meta_data.FieldMetaData("sequenceChunkNum", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SEQUENCE_CHUNK_POINT_NUM, new org.apache.thrift.meta_data.FieldMetaData("sequenceChunkPointNum", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.UNSEQUENCE_CHUNK_NUM, new org.apache.thrift.meta_data.FieldMetaData("unsequenceChunkNum", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.UNSEQUENCE_CHUNK_POINT_NUM, new org.apache.thrift.meta_data.FieldMetaData("unsequenceChunkPointNum", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TOTAL_PAGE_NUM, new org.apache.thrift.meta_data.FieldMetaData("totalPageNum", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.OVERLAPPED_PAGE_NUM, new org.apache.thrift.meta_data.FieldMetaData("overlappedPageNum", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TSTracingInfo.class, metaDataMap);
  }

  public TSTracingInfo() {
  }

  public TSTracingInfo(
    java.util.List<java.lang.String> activityList,
    java.util.List<java.lang.Long> elapsedTimeList)
  {
    this();
    this.activityList = activityList;
    this.elapsedTimeList = elapsedTimeList;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TSTracingInfo(TSTracingInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetActivityList()) {
      java.util.List<java.lang.String> __this__activityList = new java.util.ArrayList<java.lang.String>(other.activityList);
      this.activityList = __this__activityList;
    }
    if (other.isSetElapsedTimeList()) {
      java.util.List<java.lang.Long> __this__elapsedTimeList = new java.util.ArrayList<java.lang.Long>(other.elapsedTimeList);
      this.elapsedTimeList = __this__elapsedTimeList;
    }
    this.seriesPathNum = other.seriesPathNum;
    this.seqFileNum = other.seqFileNum;
    this.unSeqFileNum = other.unSeqFileNum;
    this.sequenceChunkNum = other.sequenceChunkNum;
    this.sequenceChunkPointNum = other.sequenceChunkPointNum;
    this.unsequenceChunkNum = other.unsequenceChunkNum;
    this.unsequenceChunkPointNum = other.unsequenceChunkPointNum;
    this.totalPageNum = other.totalPageNum;
    this.overlappedPageNum = other.overlappedPageNum;
  }

  @Override
  public TSTracingInfo deepCopy() {
    return new TSTracingInfo(this);
  }

  @Override
  public void clear() {
    this.activityList = null;
    this.elapsedTimeList = null;
    setSeriesPathNumIsSet(false);
    this.seriesPathNum = 0;
    setSeqFileNumIsSet(false);
    this.seqFileNum = 0;
    setUnSeqFileNumIsSet(false);
    this.unSeqFileNum = 0;
    setSequenceChunkNumIsSet(false);
    this.sequenceChunkNum = 0;
    setSequenceChunkPointNumIsSet(false);
    this.sequenceChunkPointNum = 0;
    setUnsequenceChunkNumIsSet(false);
    this.unsequenceChunkNum = 0;
    setUnsequenceChunkPointNumIsSet(false);
    this.unsequenceChunkPointNum = 0;
    setTotalPageNumIsSet(false);
    this.totalPageNum = 0;
    setOverlappedPageNumIsSet(false);
    this.overlappedPageNum = 0;
  }

  public int getActivityListSize() {
    return (this.activityList == null) ? 0 : this.activityList.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.String> getActivityListIterator() {
    return (this.activityList == null) ? null : this.activityList.iterator();
  }

  public void addToActivityList(java.lang.String elem) {
    if (this.activityList == null) {
      this.activityList = new java.util.ArrayList<java.lang.String>();
    }
    this.activityList.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.String> getActivityList() {
    return this.activityList;
  }

  public TSTracingInfo setActivityList(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> activityList) {
    this.activityList = activityList;
    return this;
  }

  public void unsetActivityList() {
    this.activityList = null;
  }

  /** Returns true if field activityList is set (has been assigned a value) and false otherwise */
  public boolean isSetActivityList() {
    return this.activityList != null;
  }

  public void setActivityListIsSet(boolean value) {
    if (!value) {
      this.activityList = null;
    }
  }

  public int getElapsedTimeListSize() {
    return (this.elapsedTimeList == null) ? 0 : this.elapsedTimeList.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.Long> getElapsedTimeListIterator() {
    return (this.elapsedTimeList == null) ? null : this.elapsedTimeList.iterator();
  }

  public void addToElapsedTimeList(long elem) {
    if (this.elapsedTimeList == null) {
      this.elapsedTimeList = new java.util.ArrayList<java.lang.Long>();
    }
    this.elapsedTimeList.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.Long> getElapsedTimeList() {
    return this.elapsedTimeList;
  }

  public TSTracingInfo setElapsedTimeList(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Long> elapsedTimeList) {
    this.elapsedTimeList = elapsedTimeList;
    return this;
  }

  public void unsetElapsedTimeList() {
    this.elapsedTimeList = null;
  }

  /** Returns true if field elapsedTimeList is set (has been assigned a value) and false otherwise */
  public boolean isSetElapsedTimeList() {
    return this.elapsedTimeList != null;
  }

  public void setElapsedTimeListIsSet(boolean value) {
    if (!value) {
      this.elapsedTimeList = null;
    }
  }

  public int getSeriesPathNum() {
    return this.seriesPathNum;
  }

  public TSTracingInfo setSeriesPathNum(int seriesPathNum) {
    this.seriesPathNum = seriesPathNum;
    setSeriesPathNumIsSet(true);
    return this;
  }

  public void unsetSeriesPathNum() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SERIESPATHNUM_ISSET_ID);
  }

  /** Returns true if field seriesPathNum is set (has been assigned a value) and false otherwise */
  public boolean isSetSeriesPathNum() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SERIESPATHNUM_ISSET_ID);
  }

  public void setSeriesPathNumIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SERIESPATHNUM_ISSET_ID, value);
  }

  public int getSeqFileNum() {
    return this.seqFileNum;
  }

  public TSTracingInfo setSeqFileNum(int seqFileNum) {
    this.seqFileNum = seqFileNum;
    setSeqFileNumIsSet(true);
    return this;
  }

  public void unsetSeqFileNum() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SEQFILENUM_ISSET_ID);
  }

  /** Returns true if field seqFileNum is set (has been assigned a value) and false otherwise */
  public boolean isSetSeqFileNum() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SEQFILENUM_ISSET_ID);
  }

  public void setSeqFileNumIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SEQFILENUM_ISSET_ID, value);
  }

  public int getUnSeqFileNum() {
    return this.unSeqFileNum;
  }

  public TSTracingInfo setUnSeqFileNum(int unSeqFileNum) {
    this.unSeqFileNum = unSeqFileNum;
    setUnSeqFileNumIsSet(true);
    return this;
  }

  public void unsetUnSeqFileNum() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __UNSEQFILENUM_ISSET_ID);
  }

  /** Returns true if field unSeqFileNum is set (has been assigned a value) and false otherwise */
  public boolean isSetUnSeqFileNum() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __UNSEQFILENUM_ISSET_ID);
  }

  public void setUnSeqFileNumIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __UNSEQFILENUM_ISSET_ID, value);
  }

  public int getSequenceChunkNum() {
    return this.sequenceChunkNum;
  }

  public TSTracingInfo setSequenceChunkNum(int sequenceChunkNum) {
    this.sequenceChunkNum = sequenceChunkNum;
    setSequenceChunkNumIsSet(true);
    return this;
  }

  public void unsetSequenceChunkNum() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SEQUENCECHUNKNUM_ISSET_ID);
  }

  /** Returns true if field sequenceChunkNum is set (has been assigned a value) and false otherwise */
  public boolean isSetSequenceChunkNum() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SEQUENCECHUNKNUM_ISSET_ID);
  }

  public void setSequenceChunkNumIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SEQUENCECHUNKNUM_ISSET_ID, value);
  }

  public long getSequenceChunkPointNum() {
    return this.sequenceChunkPointNum;
  }

  public TSTracingInfo setSequenceChunkPointNum(long sequenceChunkPointNum) {
    this.sequenceChunkPointNum = sequenceChunkPointNum;
    setSequenceChunkPointNumIsSet(true);
    return this;
  }

  public void unsetSequenceChunkPointNum() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SEQUENCECHUNKPOINTNUM_ISSET_ID);
  }

  /** Returns true if field sequenceChunkPointNum is set (has been assigned a value) and false otherwise */
  public boolean isSetSequenceChunkPointNum() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SEQUENCECHUNKPOINTNUM_ISSET_ID);
  }

  public void setSequenceChunkPointNumIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SEQUENCECHUNKPOINTNUM_ISSET_ID, value);
  }

  public int getUnsequenceChunkNum() {
    return this.unsequenceChunkNum;
  }

  public TSTracingInfo setUnsequenceChunkNum(int unsequenceChunkNum) {
    this.unsequenceChunkNum = unsequenceChunkNum;
    setUnsequenceChunkNumIsSet(true);
    return this;
  }

  public void unsetUnsequenceChunkNum() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __UNSEQUENCECHUNKNUM_ISSET_ID);
  }

  /** Returns true if field unsequenceChunkNum is set (has been assigned a value) and false otherwise */
  public boolean isSetUnsequenceChunkNum() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __UNSEQUENCECHUNKNUM_ISSET_ID);
  }

  public void setUnsequenceChunkNumIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __UNSEQUENCECHUNKNUM_ISSET_ID, value);
  }

  public long getUnsequenceChunkPointNum() {
    return this.unsequenceChunkPointNum;
  }

  public TSTracingInfo setUnsequenceChunkPointNum(long unsequenceChunkPointNum) {
    this.unsequenceChunkPointNum = unsequenceChunkPointNum;
    setUnsequenceChunkPointNumIsSet(true);
    return this;
  }

  public void unsetUnsequenceChunkPointNum() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __UNSEQUENCECHUNKPOINTNUM_ISSET_ID);
  }

  /** Returns true if field unsequenceChunkPointNum is set (has been assigned a value) and false otherwise */
  public boolean isSetUnsequenceChunkPointNum() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __UNSEQUENCECHUNKPOINTNUM_ISSET_ID);
  }

  public void setUnsequenceChunkPointNumIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __UNSEQUENCECHUNKPOINTNUM_ISSET_ID, value);
  }

  public int getTotalPageNum() {
    return this.totalPageNum;
  }

  public TSTracingInfo setTotalPageNum(int totalPageNum) {
    this.totalPageNum = totalPageNum;
    setTotalPageNumIsSet(true);
    return this;
  }

  public void unsetTotalPageNum() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TOTALPAGENUM_ISSET_ID);
  }

  /** Returns true if field totalPageNum is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalPageNum() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TOTALPAGENUM_ISSET_ID);
  }

  public void setTotalPageNumIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TOTALPAGENUM_ISSET_ID, value);
  }

  public int getOverlappedPageNum() {
    return this.overlappedPageNum;
  }

  public TSTracingInfo setOverlappedPageNum(int overlappedPageNum) {
    this.overlappedPageNum = overlappedPageNum;
    setOverlappedPageNumIsSet(true);
    return this;
  }

  public void unsetOverlappedPageNum() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __OVERLAPPEDPAGENUM_ISSET_ID);
  }

  /** Returns true if field overlappedPageNum is set (has been assigned a value) and false otherwise */
  public boolean isSetOverlappedPageNum() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __OVERLAPPEDPAGENUM_ISSET_ID);
  }

  public void setOverlappedPageNumIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __OVERLAPPEDPAGENUM_ISSET_ID, value);
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case ACTIVITY_LIST:
      if (value == null) {
        unsetActivityList();
      } else {
        setActivityList((java.util.List<java.lang.String>)value);
      }
      break;

    case ELAPSED_TIME_LIST:
      if (value == null) {
        unsetElapsedTimeList();
      } else {
        setElapsedTimeList((java.util.List<java.lang.Long>)value);
      }
      break;

    case SERIES_PATH_NUM:
      if (value == null) {
        unsetSeriesPathNum();
      } else {
        setSeriesPathNum((java.lang.Integer)value);
      }
      break;

    case SEQ_FILE_NUM:
      if (value == null) {
        unsetSeqFileNum();
      } else {
        setSeqFileNum((java.lang.Integer)value);
      }
      break;

    case UN_SEQ_FILE_NUM:
      if (value == null) {
        unsetUnSeqFileNum();
      } else {
        setUnSeqFileNum((java.lang.Integer)value);
      }
      break;

    case SEQUENCE_CHUNK_NUM:
      if (value == null) {
        unsetSequenceChunkNum();
      } else {
        setSequenceChunkNum((java.lang.Integer)value);
      }
      break;

    case SEQUENCE_CHUNK_POINT_NUM:
      if (value == null) {
        unsetSequenceChunkPointNum();
      } else {
        setSequenceChunkPointNum((java.lang.Long)value);
      }
      break;

    case UNSEQUENCE_CHUNK_NUM:
      if (value == null) {
        unsetUnsequenceChunkNum();
      } else {
        setUnsequenceChunkNum((java.lang.Integer)value);
      }
      break;

    case UNSEQUENCE_CHUNK_POINT_NUM:
      if (value == null) {
        unsetUnsequenceChunkPointNum();
      } else {
        setUnsequenceChunkPointNum((java.lang.Long)value);
      }
      break;

    case TOTAL_PAGE_NUM:
      if (value == null) {
        unsetTotalPageNum();
      } else {
        setTotalPageNum((java.lang.Integer)value);
      }
      break;

    case OVERLAPPED_PAGE_NUM:
      if (value == null) {
        unsetOverlappedPageNum();
      } else {
        setOverlappedPageNum((java.lang.Integer)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ACTIVITY_LIST:
      return getActivityList();

    case ELAPSED_TIME_LIST:
      return getElapsedTimeList();

    case SERIES_PATH_NUM:
      return getSeriesPathNum();

    case SEQ_FILE_NUM:
      return getSeqFileNum();

    case UN_SEQ_FILE_NUM:
      return getUnSeqFileNum();

    case SEQUENCE_CHUNK_NUM:
      return getSequenceChunkNum();

    case SEQUENCE_CHUNK_POINT_NUM:
      return getSequenceChunkPointNum();

    case UNSEQUENCE_CHUNK_NUM:
      return getUnsequenceChunkNum();

    case UNSEQUENCE_CHUNK_POINT_NUM:
      return getUnsequenceChunkPointNum();

    case TOTAL_PAGE_NUM:
      return getTotalPageNum();

    case OVERLAPPED_PAGE_NUM:
      return getOverlappedPageNum();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ACTIVITY_LIST:
      return isSetActivityList();
    case ELAPSED_TIME_LIST:
      return isSetElapsedTimeList();
    case SERIES_PATH_NUM:
      return isSetSeriesPathNum();
    case SEQ_FILE_NUM:
      return isSetSeqFileNum();
    case UN_SEQ_FILE_NUM:
      return isSetUnSeqFileNum();
    case SEQUENCE_CHUNK_NUM:
      return isSetSequenceChunkNum();
    case SEQUENCE_CHUNK_POINT_NUM:
      return isSetSequenceChunkPointNum();
    case UNSEQUENCE_CHUNK_NUM:
      return isSetUnsequenceChunkNum();
    case UNSEQUENCE_CHUNK_POINT_NUM:
      return isSetUnsequenceChunkPointNum();
    case TOTAL_PAGE_NUM:
      return isSetTotalPageNum();
    case OVERLAPPED_PAGE_NUM:
      return isSetOverlappedPageNum();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TSTracingInfo)
      return this.equals((TSTracingInfo)that);
    return false;
  }

  public boolean equals(TSTracingInfo that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_activityList = true && this.isSetActivityList();
    boolean that_present_activityList = true && that.isSetActivityList();
    if (this_present_activityList || that_present_activityList) {
      if (!(this_present_activityList && that_present_activityList))
        return false;
      if (!this.activityList.equals(that.activityList))
        return false;
    }

    boolean this_present_elapsedTimeList = true && this.isSetElapsedTimeList();
    boolean that_present_elapsedTimeList = true && that.isSetElapsedTimeList();
    if (this_present_elapsedTimeList || that_present_elapsedTimeList) {
      if (!(this_present_elapsedTimeList && that_present_elapsedTimeList))
        return false;
      if (!this.elapsedTimeList.equals(that.elapsedTimeList))
        return false;
    }

    boolean this_present_seriesPathNum = true && this.isSetSeriesPathNum();
    boolean that_present_seriesPathNum = true && that.isSetSeriesPathNum();
    if (this_present_seriesPathNum || that_present_seriesPathNum) {
      if (!(this_present_seriesPathNum && that_present_seriesPathNum))
        return false;
      if (this.seriesPathNum != that.seriesPathNum)
        return false;
    }

    boolean this_present_seqFileNum = true && this.isSetSeqFileNum();
    boolean that_present_seqFileNum = true && that.isSetSeqFileNum();
    if (this_present_seqFileNum || that_present_seqFileNum) {
      if (!(this_present_seqFileNum && that_present_seqFileNum))
        return false;
      if (this.seqFileNum != that.seqFileNum)
        return false;
    }

    boolean this_present_unSeqFileNum = true && this.isSetUnSeqFileNum();
    boolean that_present_unSeqFileNum = true && that.isSetUnSeqFileNum();
    if (this_present_unSeqFileNum || that_present_unSeqFileNum) {
      if (!(this_present_unSeqFileNum && that_present_unSeqFileNum))
        return false;
      if (this.unSeqFileNum != that.unSeqFileNum)
        return false;
    }

    boolean this_present_sequenceChunkNum = true && this.isSetSequenceChunkNum();
    boolean that_present_sequenceChunkNum = true && that.isSetSequenceChunkNum();
    if (this_present_sequenceChunkNum || that_present_sequenceChunkNum) {
      if (!(this_present_sequenceChunkNum && that_present_sequenceChunkNum))
        return false;
      if (this.sequenceChunkNum != that.sequenceChunkNum)
        return false;
    }

    boolean this_present_sequenceChunkPointNum = true && this.isSetSequenceChunkPointNum();
    boolean that_present_sequenceChunkPointNum = true && that.isSetSequenceChunkPointNum();
    if (this_present_sequenceChunkPointNum || that_present_sequenceChunkPointNum) {
      if (!(this_present_sequenceChunkPointNum && that_present_sequenceChunkPointNum))
        return false;
      if (this.sequenceChunkPointNum != that.sequenceChunkPointNum)
        return false;
    }

    boolean this_present_unsequenceChunkNum = true && this.isSetUnsequenceChunkNum();
    boolean that_present_unsequenceChunkNum = true && that.isSetUnsequenceChunkNum();
    if (this_present_unsequenceChunkNum || that_present_unsequenceChunkNum) {
      if (!(this_present_unsequenceChunkNum && that_present_unsequenceChunkNum))
        return false;
      if (this.unsequenceChunkNum != that.unsequenceChunkNum)
        return false;
    }

    boolean this_present_unsequenceChunkPointNum = true && this.isSetUnsequenceChunkPointNum();
    boolean that_present_unsequenceChunkPointNum = true && that.isSetUnsequenceChunkPointNum();
    if (this_present_unsequenceChunkPointNum || that_present_unsequenceChunkPointNum) {
      if (!(this_present_unsequenceChunkPointNum && that_present_unsequenceChunkPointNum))
        return false;
      if (this.unsequenceChunkPointNum != that.unsequenceChunkPointNum)
        return false;
    }

    boolean this_present_totalPageNum = true && this.isSetTotalPageNum();
    boolean that_present_totalPageNum = true && that.isSetTotalPageNum();
    if (this_present_totalPageNum || that_present_totalPageNum) {
      if (!(this_present_totalPageNum && that_present_totalPageNum))
        return false;
      if (this.totalPageNum != that.totalPageNum)
        return false;
    }

    boolean this_present_overlappedPageNum = true && this.isSetOverlappedPageNum();
    boolean that_present_overlappedPageNum = true && that.isSetOverlappedPageNum();
    if (this_present_overlappedPageNum || that_present_overlappedPageNum) {
      if (!(this_present_overlappedPageNum && that_present_overlappedPageNum))
        return false;
      if (this.overlappedPageNum != that.overlappedPageNum)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetActivityList()) ? 131071 : 524287);
    if (isSetActivityList())
      hashCode = hashCode * 8191 + activityList.hashCode();

    hashCode = hashCode * 8191 + ((isSetElapsedTimeList()) ? 131071 : 524287);
    if (isSetElapsedTimeList())
      hashCode = hashCode * 8191 + elapsedTimeList.hashCode();

    hashCode = hashCode * 8191 + ((isSetSeriesPathNum()) ? 131071 : 524287);
    if (isSetSeriesPathNum())
      hashCode = hashCode * 8191 + seriesPathNum;

    hashCode = hashCode * 8191 + ((isSetSeqFileNum()) ? 131071 : 524287);
    if (isSetSeqFileNum())
      hashCode = hashCode * 8191 + seqFileNum;

    hashCode = hashCode * 8191 + ((isSetUnSeqFileNum()) ? 131071 : 524287);
    if (isSetUnSeqFileNum())
      hashCode = hashCode * 8191 + unSeqFileNum;

    hashCode = hashCode * 8191 + ((isSetSequenceChunkNum()) ? 131071 : 524287);
    if (isSetSequenceChunkNum())
      hashCode = hashCode * 8191 + sequenceChunkNum;

    hashCode = hashCode * 8191 + ((isSetSequenceChunkPointNum()) ? 131071 : 524287);
    if (isSetSequenceChunkPointNum())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(sequenceChunkPointNum);

    hashCode = hashCode * 8191 + ((isSetUnsequenceChunkNum()) ? 131071 : 524287);
    if (isSetUnsequenceChunkNum())
      hashCode = hashCode * 8191 + unsequenceChunkNum;

    hashCode = hashCode * 8191 + ((isSetUnsequenceChunkPointNum()) ? 131071 : 524287);
    if (isSetUnsequenceChunkPointNum())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(unsequenceChunkPointNum);

    hashCode = hashCode * 8191 + ((isSetTotalPageNum()) ? 131071 : 524287);
    if (isSetTotalPageNum())
      hashCode = hashCode * 8191 + totalPageNum;

    hashCode = hashCode * 8191 + ((isSetOverlappedPageNum()) ? 131071 : 524287);
    if (isSetOverlappedPageNum())
      hashCode = hashCode * 8191 + overlappedPageNum;

    return hashCode;
  }

  @Override
  public int compareTo(TSTracingInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetActivityList(), other.isSetActivityList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActivityList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.activityList, other.activityList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetElapsedTimeList(), other.isSetElapsedTimeList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetElapsedTimeList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.elapsedTimeList, other.elapsedTimeList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSeriesPathNum(), other.isSetSeriesPathNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSeriesPathNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.seriesPathNum, other.seriesPathNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSeqFileNum(), other.isSetSeqFileNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSeqFileNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.seqFileNum, other.seqFileNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetUnSeqFileNum(), other.isSetUnSeqFileNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUnSeqFileNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unSeqFileNum, other.unSeqFileNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSequenceChunkNum(), other.isSetSequenceChunkNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSequenceChunkNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sequenceChunkNum, other.sequenceChunkNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSequenceChunkPointNum(), other.isSetSequenceChunkPointNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSequenceChunkPointNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sequenceChunkPointNum, other.sequenceChunkPointNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetUnsequenceChunkNum(), other.isSetUnsequenceChunkNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUnsequenceChunkNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unsequenceChunkNum, other.unsequenceChunkNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetUnsequenceChunkPointNum(), other.isSetUnsequenceChunkPointNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUnsequenceChunkPointNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unsequenceChunkPointNum, other.unsequenceChunkPointNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTotalPageNum(), other.isSetTotalPageNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalPageNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalPageNum, other.totalPageNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetOverlappedPageNum(), other.isSetOverlappedPageNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOverlappedPageNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.overlappedPageNum, other.overlappedPageNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TSTracingInfo(");
    boolean first = true;

    sb.append("activityList:");
    if (this.activityList == null) {
      sb.append("null");
    } else {
      sb.append(this.activityList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("elapsedTimeList:");
    if (this.elapsedTimeList == null) {
      sb.append("null");
    } else {
      sb.append(this.elapsedTimeList);
    }
    first = false;
    if (isSetSeriesPathNum()) {
      if (!first) sb.append(", ");
      sb.append("seriesPathNum:");
      sb.append(this.seriesPathNum);
      first = false;
    }
    if (isSetSeqFileNum()) {
      if (!first) sb.append(", ");
      sb.append("seqFileNum:");
      sb.append(this.seqFileNum);
      first = false;
    }
    if (isSetUnSeqFileNum()) {
      if (!first) sb.append(", ");
      sb.append("unSeqFileNum:");
      sb.append(this.unSeqFileNum);
      first = false;
    }
    if (isSetSequenceChunkNum()) {
      if (!first) sb.append(", ");
      sb.append("sequenceChunkNum:");
      sb.append(this.sequenceChunkNum);
      first = false;
    }
    if (isSetSequenceChunkPointNum()) {
      if (!first) sb.append(", ");
      sb.append("sequenceChunkPointNum:");
      sb.append(this.sequenceChunkPointNum);
      first = false;
    }
    if (isSetUnsequenceChunkNum()) {
      if (!first) sb.append(", ");
      sb.append("unsequenceChunkNum:");
      sb.append(this.unsequenceChunkNum);
      first = false;
    }
    if (isSetUnsequenceChunkPointNum()) {
      if (!first) sb.append(", ");
      sb.append("unsequenceChunkPointNum:");
      sb.append(this.unsequenceChunkPointNum);
      first = false;
    }
    if (isSetTotalPageNum()) {
      if (!first) sb.append(", ");
      sb.append("totalPageNum:");
      sb.append(this.totalPageNum);
      first = false;
    }
    if (isSetOverlappedPageNum()) {
      if (!first) sb.append(", ");
      sb.append("overlappedPageNum:");
      sb.append(this.overlappedPageNum);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (activityList == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'activityList' was not present! Struct: " + toString());
    }
    if (elapsedTimeList == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'elapsedTimeList' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TSTracingInfoStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TSTracingInfoStandardScheme getScheme() {
      return new TSTracingInfoStandardScheme();
    }
  }

  private static class TSTracingInfoStandardScheme extends org.apache.thrift.scheme.StandardScheme<TSTracingInfo> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TSTracingInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ACTIVITY_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list32 = iprot.readListBegin();
                struct.activityList = new java.util.ArrayList<java.lang.String>(_list32.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _elem33;
                for (int _i34 = 0; _i34 < _list32.size; ++_i34)
                {
                  _elem33 = iprot.readString();
                  struct.activityList.add(_elem33);
                }
                iprot.readListEnd();
              }
              struct.setActivityListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ELAPSED_TIME_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list35 = iprot.readListBegin();
                struct.elapsedTimeList = new java.util.ArrayList<java.lang.Long>(_list35.size);
                long _elem36;
                for (int _i37 = 0; _i37 < _list35.size; ++_i37)
                {
                  _elem36 = iprot.readI64();
                  struct.elapsedTimeList.add(_elem36);
                }
                iprot.readListEnd();
              }
              struct.setElapsedTimeListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SERIES_PATH_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.seriesPathNum = iprot.readI32();
              struct.setSeriesPathNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SEQ_FILE_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.seqFileNum = iprot.readI32();
              struct.setSeqFileNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // UN_SEQ_FILE_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.unSeqFileNum = iprot.readI32();
              struct.setUnSeqFileNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // SEQUENCE_CHUNK_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sequenceChunkNum = iprot.readI32();
              struct.setSequenceChunkNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // SEQUENCE_CHUNK_POINT_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.sequenceChunkPointNum = iprot.readI64();
              struct.setSequenceChunkPointNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // UNSEQUENCE_CHUNK_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.unsequenceChunkNum = iprot.readI32();
              struct.setUnsequenceChunkNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // UNSEQUENCE_CHUNK_POINT_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.unsequenceChunkPointNum = iprot.readI64();
              struct.setUnsequenceChunkPointNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // TOTAL_PAGE_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.totalPageNum = iprot.readI32();
              struct.setTotalPageNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // OVERLAPPED_PAGE_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.overlappedPageNum = iprot.readI32();
              struct.setOverlappedPageNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TSTracingInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.activityList != null) {
        oprot.writeFieldBegin(ACTIVITY_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.activityList.size()));
          for (java.lang.String _iter38 : struct.activityList)
          {
            oprot.writeString(_iter38);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.elapsedTimeList != null) {
        oprot.writeFieldBegin(ELAPSED_TIME_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.elapsedTimeList.size()));
          for (long _iter39 : struct.elapsedTimeList)
          {
            oprot.writeI64(_iter39);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.isSetSeriesPathNum()) {
        oprot.writeFieldBegin(SERIES_PATH_NUM_FIELD_DESC);
        oprot.writeI32(struct.seriesPathNum);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSeqFileNum()) {
        oprot.writeFieldBegin(SEQ_FILE_NUM_FIELD_DESC);
        oprot.writeI32(struct.seqFileNum);
        oprot.writeFieldEnd();
      }
      if (struct.isSetUnSeqFileNum()) {
        oprot.writeFieldBegin(UN_SEQ_FILE_NUM_FIELD_DESC);
        oprot.writeI32(struct.unSeqFileNum);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSequenceChunkNum()) {
        oprot.writeFieldBegin(SEQUENCE_CHUNK_NUM_FIELD_DESC);
        oprot.writeI32(struct.sequenceChunkNum);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSequenceChunkPointNum()) {
        oprot.writeFieldBegin(SEQUENCE_CHUNK_POINT_NUM_FIELD_DESC);
        oprot.writeI64(struct.sequenceChunkPointNum);
        oprot.writeFieldEnd();
      }
      if (struct.isSetUnsequenceChunkNum()) {
        oprot.writeFieldBegin(UNSEQUENCE_CHUNK_NUM_FIELD_DESC);
        oprot.writeI32(struct.unsequenceChunkNum);
        oprot.writeFieldEnd();
      }
      if (struct.isSetUnsequenceChunkPointNum()) {
        oprot.writeFieldBegin(UNSEQUENCE_CHUNK_POINT_NUM_FIELD_DESC);
        oprot.writeI64(struct.unsequenceChunkPointNum);
        oprot.writeFieldEnd();
      }
      if (struct.isSetTotalPageNum()) {
        oprot.writeFieldBegin(TOTAL_PAGE_NUM_FIELD_DESC);
        oprot.writeI32(struct.totalPageNum);
        oprot.writeFieldEnd();
      }
      if (struct.isSetOverlappedPageNum()) {
        oprot.writeFieldBegin(OVERLAPPED_PAGE_NUM_FIELD_DESC);
        oprot.writeI32(struct.overlappedPageNum);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TSTracingInfoTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TSTracingInfoTupleScheme getScheme() {
      return new TSTracingInfoTupleScheme();
    }
  }

  private static class TSTracingInfoTupleScheme extends org.apache.thrift.scheme.TupleScheme<TSTracingInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TSTracingInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      {
        oprot.writeI32(struct.activityList.size());
        for (java.lang.String _iter40 : struct.activityList)
        {
          oprot.writeString(_iter40);
        }
      }
      {
        oprot.writeI32(struct.elapsedTimeList.size());
        for (long _iter41 : struct.elapsedTimeList)
        {
          oprot.writeI64(_iter41);
        }
      }
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetSeriesPathNum()) {
        optionals.set(0);
      }
      if (struct.isSetSeqFileNum()) {
        optionals.set(1);
      }
      if (struct.isSetUnSeqFileNum()) {
        optionals.set(2);
      }
      if (struct.isSetSequenceChunkNum()) {
        optionals.set(3);
      }
      if (struct.isSetSequenceChunkPointNum()) {
        optionals.set(4);
      }
      if (struct.isSetUnsequenceChunkNum()) {
        optionals.set(5);
      }
      if (struct.isSetUnsequenceChunkPointNum()) {
        optionals.set(6);
      }
      if (struct.isSetTotalPageNum()) {
        optionals.set(7);
      }
      if (struct.isSetOverlappedPageNum()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetSeriesPathNum()) {
        oprot.writeI32(struct.seriesPathNum);
      }
      if (struct.isSetSeqFileNum()) {
        oprot.writeI32(struct.seqFileNum);
      }
      if (struct.isSetUnSeqFileNum()) {
        oprot.writeI32(struct.unSeqFileNum);
      }
      if (struct.isSetSequenceChunkNum()) {
        oprot.writeI32(struct.sequenceChunkNum);
      }
      if (struct.isSetSequenceChunkPointNum()) {
        oprot.writeI64(struct.sequenceChunkPointNum);
      }
      if (struct.isSetUnsequenceChunkNum()) {
        oprot.writeI32(struct.unsequenceChunkNum);
      }
      if (struct.isSetUnsequenceChunkPointNum()) {
        oprot.writeI64(struct.unsequenceChunkPointNum);
      }
      if (struct.isSetTotalPageNum()) {
        oprot.writeI32(struct.totalPageNum);
      }
      if (struct.isSetOverlappedPageNum()) {
        oprot.writeI32(struct.overlappedPageNum);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TSTracingInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      {
        org.apache.thrift.protocol.TList _list42 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRING);
        struct.activityList = new java.util.ArrayList<java.lang.String>(_list42.size);
        @org.apache.thrift.annotation.Nullable java.lang.String _elem43;
        for (int _i44 = 0; _i44 < _list42.size; ++_i44)
        {
          _elem43 = iprot.readString();
          struct.activityList.add(_elem43);
        }
      }
      struct.setActivityListIsSet(true);
      {
        org.apache.thrift.protocol.TList _list45 = iprot.readListBegin(org.apache.thrift.protocol.TType.I64);
        struct.elapsedTimeList = new java.util.ArrayList<java.lang.Long>(_list45.size);
        long _elem46;
        for (int _i47 = 0; _i47 < _list45.size; ++_i47)
        {
          _elem46 = iprot.readI64();
          struct.elapsedTimeList.add(_elem46);
        }
      }
      struct.setElapsedTimeListIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        struct.seriesPathNum = iprot.readI32();
        struct.setSeriesPathNumIsSet(true);
      }
      if (incoming.get(1)) {
        struct.seqFileNum = iprot.readI32();
        struct.setSeqFileNumIsSet(true);
      }
      if (incoming.get(2)) {
        struct.unSeqFileNum = iprot.readI32();
        struct.setUnSeqFileNumIsSet(true);
      }
      if (incoming.get(3)) {
        struct.sequenceChunkNum = iprot.readI32();
        struct.setSequenceChunkNumIsSet(true);
      }
      if (incoming.get(4)) {
        struct.sequenceChunkPointNum = iprot.readI64();
        struct.setSequenceChunkPointNumIsSet(true);
      }
      if (incoming.get(5)) {
        struct.unsequenceChunkNum = iprot.readI32();
        struct.setUnsequenceChunkNumIsSet(true);
      }
      if (incoming.get(6)) {
        struct.unsequenceChunkPointNum = iprot.readI64();
        struct.setUnsequenceChunkPointNumIsSet(true);
      }
      if (incoming.get(7)) {
        struct.totalPageNum = iprot.readI32();
        struct.setTotalPageNumIsSet(true);
      }
      if (incoming.get(8)) {
        struct.overlappedPageNum = iprot.readI32();
        struct.setOverlappedPageNumIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

