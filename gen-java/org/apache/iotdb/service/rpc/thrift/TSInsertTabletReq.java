/**
 * Autogenerated by Thrift Compiler (0.20.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.iotdb.service.rpc.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.20.0)", date = "2025-05-09")
public class TSInsertTabletReq implements org.apache.thrift.TBase<TSInsertTabletReq, TSInsertTabletReq._Fields>, java.io.Serializable, Cloneable, Comparable<TSInsertTabletReq> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TSInsertTabletReq");

  private static final org.apache.thrift.protocol.TField SESSION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sessionId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField PREFIX_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("prefixPath", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField MEASUREMENTS_FIELD_DESC = new org.apache.thrift.protocol.TField("measurements", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField VALUES_FIELD_DESC = new org.apache.thrift.protocol.TField("values", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField TIMESTAMPS_FIELD_DESC = new org.apache.thrift.protocol.TField("timestamps", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField TYPES_FIELD_DESC = new org.apache.thrift.protocol.TField("types", org.apache.thrift.protocol.TType.LIST, (short)6);
  private static final org.apache.thrift.protocol.TField SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("size", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField IS_ALIGNED_FIELD_DESC = new org.apache.thrift.protocol.TField("isAligned", org.apache.thrift.protocol.TType.BOOL, (short)8);
  private static final org.apache.thrift.protocol.TField WRITE_TO_TABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("writeToTable", org.apache.thrift.protocol.TType.BOOL, (short)9);
  private static final org.apache.thrift.protocol.TField COLUMN_CATEGORIES_FIELD_DESC = new org.apache.thrift.protocol.TField("columnCategories", org.apache.thrift.protocol.TType.LIST, (short)10);
  private static final org.apache.thrift.protocol.TField IS_COMPRESSED_FIELD_DESC = new org.apache.thrift.protocol.TField("isCompressed", org.apache.thrift.protocol.TType.BOOL, (short)11);
  private static final org.apache.thrift.protocol.TField ENCODING_TYPES_FIELD_DESC = new org.apache.thrift.protocol.TField("encodingTypes", org.apache.thrift.protocol.TType.LIST, (short)12);
  private static final org.apache.thrift.protocol.TField COMPRESS_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("compressType", org.apache.thrift.protocol.TType.I32, (short)13);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TSInsertTabletReqStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TSInsertTabletReqTupleSchemeFactory();

  public long sessionId; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String prefixPath; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> measurements; // required
  public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer values; // required
  public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer timestamps; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Integer> types; // required
  public int size; // required
  public boolean isAligned; // optional
  public boolean writeToTable; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Byte> columnCategories; // optional
  public boolean isCompressed; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Integer> encodingTypes; // optional
  public int compressType; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SESSION_ID((short)1, "sessionId"),
    PREFIX_PATH((short)2, "prefixPath"),
    MEASUREMENTS((short)3, "measurements"),
    VALUES((short)4, "values"),
    TIMESTAMPS((short)5, "timestamps"),
    TYPES((short)6, "types"),
    SIZE((short)7, "size"),
    IS_ALIGNED((short)8, "isAligned"),
    WRITE_TO_TABLE((short)9, "writeToTable"),
    COLUMN_CATEGORIES((short)10, "columnCategories"),
    IS_COMPRESSED((short)11, "isCompressed"),
    ENCODING_TYPES((short)12, "encodingTypes"),
    COMPRESS_TYPE((short)13, "compressType");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SESSION_ID
          return SESSION_ID;
        case 2: // PREFIX_PATH
          return PREFIX_PATH;
        case 3: // MEASUREMENTS
          return MEASUREMENTS;
        case 4: // VALUES
          return VALUES;
        case 5: // TIMESTAMPS
          return TIMESTAMPS;
        case 6: // TYPES
          return TYPES;
        case 7: // SIZE
          return SIZE;
        case 8: // IS_ALIGNED
          return IS_ALIGNED;
        case 9: // WRITE_TO_TABLE
          return WRITE_TO_TABLE;
        case 10: // COLUMN_CATEGORIES
          return COLUMN_CATEGORIES;
        case 11: // IS_COMPRESSED
          return IS_COMPRESSED;
        case 12: // ENCODING_TYPES
          return ENCODING_TYPES;
        case 13: // COMPRESS_TYPE
          return COMPRESS_TYPE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SESSIONID_ISSET_ID = 0;
  private static final int __SIZE_ISSET_ID = 1;
  private static final int __ISALIGNED_ISSET_ID = 2;
  private static final int __WRITETOTABLE_ISSET_ID = 3;
  private static final int __ISCOMPRESSED_ISSET_ID = 4;
  private static final int __COMPRESSTYPE_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.IS_ALIGNED,_Fields.WRITE_TO_TABLE,_Fields.COLUMN_CATEGORIES,_Fields.IS_COMPRESSED,_Fields.ENCODING_TYPES,_Fields.COMPRESS_TYPE};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SESSION_ID, new org.apache.thrift.meta_data.FieldMetaData("sessionId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.PREFIX_PATH, new org.apache.thrift.meta_data.FieldMetaData("prefixPath", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MEASUREMENTS, new org.apache.thrift.meta_data.FieldMetaData("measurements", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.VALUES, new org.apache.thrift.meta_data.FieldMetaData("values", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.TIMESTAMPS, new org.apache.thrift.meta_data.FieldMetaData("timestamps", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.TYPES, new org.apache.thrift.meta_data.FieldMetaData("types", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.SIZE, new org.apache.thrift.meta_data.FieldMetaData("size", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IS_ALIGNED, new org.apache.thrift.meta_data.FieldMetaData("isAligned", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.WRITE_TO_TABLE, new org.apache.thrift.meta_data.FieldMetaData("writeToTable", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.COLUMN_CATEGORIES, new org.apache.thrift.meta_data.FieldMetaData("columnCategories", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE))));
    tmpMap.put(_Fields.IS_COMPRESSED, new org.apache.thrift.meta_data.FieldMetaData("isCompressed", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.ENCODING_TYPES, new org.apache.thrift.meta_data.FieldMetaData("encodingTypes", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.COMPRESS_TYPE, new org.apache.thrift.meta_data.FieldMetaData("compressType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TSInsertTabletReq.class, metaDataMap);
  }

  public TSInsertTabletReq() {
  }

  public TSInsertTabletReq(
    long sessionId,
    java.lang.String prefixPath,
    java.util.List<java.lang.String> measurements,
    java.nio.ByteBuffer values,
    java.nio.ByteBuffer timestamps,
    java.util.List<java.lang.Integer> types,
    int size)
  {
    this();
    this.sessionId = sessionId;
    setSessionIdIsSet(true);
    this.prefixPath = prefixPath;
    this.measurements = measurements;
    this.values = org.apache.thrift.TBaseHelper.copyBinary(values);
    this.timestamps = org.apache.thrift.TBaseHelper.copyBinary(timestamps);
    this.types = types;
    this.size = size;
    setSizeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TSInsertTabletReq(TSInsertTabletReq other) {
    __isset_bitfield = other.__isset_bitfield;
    this.sessionId = other.sessionId;
    if (other.isSetPrefixPath()) {
      this.prefixPath = other.prefixPath;
    }
    if (other.isSetMeasurements()) {
      java.util.List<java.lang.String> __this__measurements = new java.util.ArrayList<java.lang.String>(other.measurements);
      this.measurements = __this__measurements;
    }
    if (other.isSetValues()) {
      this.values = org.apache.thrift.TBaseHelper.copyBinary(other.values);
    }
    if (other.isSetTimestamps()) {
      this.timestamps = org.apache.thrift.TBaseHelper.copyBinary(other.timestamps);
    }
    if (other.isSetTypes()) {
      java.util.List<java.lang.Integer> __this__types = new java.util.ArrayList<java.lang.Integer>(other.types);
      this.types = __this__types;
    }
    this.size = other.size;
    this.isAligned = other.isAligned;
    this.writeToTable = other.writeToTable;
    if (other.isSetColumnCategories()) {
      java.util.List<java.lang.Byte> __this__columnCategories = new java.util.ArrayList<java.lang.Byte>(other.columnCategories);
      this.columnCategories = __this__columnCategories;
    }
    this.isCompressed = other.isCompressed;
    if (other.isSetEncodingTypes()) {
      java.util.List<java.lang.Integer> __this__encodingTypes = new java.util.ArrayList<java.lang.Integer>(other.encodingTypes);
      this.encodingTypes = __this__encodingTypes;
    }
    this.compressType = other.compressType;
  }

  @Override
  public TSInsertTabletReq deepCopy() {
    return new TSInsertTabletReq(this);
  }

  @Override
  public void clear() {
    setSessionIdIsSet(false);
    this.sessionId = 0;
    this.prefixPath = null;
    this.measurements = null;
    this.values = null;
    this.timestamps = null;
    this.types = null;
    setSizeIsSet(false);
    this.size = 0;
    setIsAlignedIsSet(false);
    this.isAligned = false;
    setWriteToTableIsSet(false);
    this.writeToTable = false;
    this.columnCategories = null;
    setIsCompressedIsSet(false);
    this.isCompressed = false;
    this.encodingTypes = null;
    setCompressTypeIsSet(false);
    this.compressType = 0;
  }

  public long getSessionId() {
    return this.sessionId;
  }

  public TSInsertTabletReq setSessionId(long sessionId) {
    this.sessionId = sessionId;
    setSessionIdIsSet(true);
    return this;
  }

  public void unsetSessionId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SESSIONID_ISSET_ID);
  }

  /** Returns true if field sessionId is set (has been assigned a value) and false otherwise */
  public boolean isSetSessionId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SESSIONID_ISSET_ID);
  }

  public void setSessionIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SESSIONID_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getPrefixPath() {
    return this.prefixPath;
  }

  public TSInsertTabletReq setPrefixPath(@org.apache.thrift.annotation.Nullable java.lang.String prefixPath) {
    this.prefixPath = prefixPath;
    return this;
  }

  public void unsetPrefixPath() {
    this.prefixPath = null;
  }

  /** Returns true if field prefixPath is set (has been assigned a value) and false otherwise */
  public boolean isSetPrefixPath() {
    return this.prefixPath != null;
  }

  public void setPrefixPathIsSet(boolean value) {
    if (!value) {
      this.prefixPath = null;
    }
  }

  public int getMeasurementsSize() {
    return (this.measurements == null) ? 0 : this.measurements.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.String> getMeasurementsIterator() {
    return (this.measurements == null) ? null : this.measurements.iterator();
  }

  public void addToMeasurements(java.lang.String elem) {
    if (this.measurements == null) {
      this.measurements = new java.util.ArrayList<java.lang.String>();
    }
    this.measurements.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.String> getMeasurements() {
    return this.measurements;
  }

  public TSInsertTabletReq setMeasurements(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> measurements) {
    this.measurements = measurements;
    return this;
  }

  public void unsetMeasurements() {
    this.measurements = null;
  }

  /** Returns true if field measurements is set (has been assigned a value) and false otherwise */
  public boolean isSetMeasurements() {
    return this.measurements != null;
  }

  public void setMeasurementsIsSet(boolean value) {
    if (!value) {
      this.measurements = null;
    }
  }

  public byte[] getValues() {
    setValues(org.apache.thrift.TBaseHelper.rightSize(values));
    return values == null ? null : values.array();
  }

  public java.nio.ByteBuffer bufferForValues() {
    return org.apache.thrift.TBaseHelper.copyBinary(values);
  }

  public TSInsertTabletReq setValues(byte[] values) {
    this.values = values == null ? (java.nio.ByteBuffer)null   : java.nio.ByteBuffer.wrap(values.clone());
    return this;
  }

  public TSInsertTabletReq setValues(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer values) {
    this.values = org.apache.thrift.TBaseHelper.copyBinary(values);
    return this;
  }

  public void unsetValues() {
    this.values = null;
  }

  /** Returns true if field values is set (has been assigned a value) and false otherwise */
  public boolean isSetValues() {
    return this.values != null;
  }

  public void setValuesIsSet(boolean value) {
    if (!value) {
      this.values = null;
    }
  }

  public byte[] getTimestamps() {
    setTimestamps(org.apache.thrift.TBaseHelper.rightSize(timestamps));
    return timestamps == null ? null : timestamps.array();
  }

  public java.nio.ByteBuffer bufferForTimestamps() {
    return org.apache.thrift.TBaseHelper.copyBinary(timestamps);
  }

  public TSInsertTabletReq setTimestamps(byte[] timestamps) {
    this.timestamps = timestamps == null ? (java.nio.ByteBuffer)null   : java.nio.ByteBuffer.wrap(timestamps.clone());
    return this;
  }

  public TSInsertTabletReq setTimestamps(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer timestamps) {
    this.timestamps = org.apache.thrift.TBaseHelper.copyBinary(timestamps);
    return this;
  }

  public void unsetTimestamps() {
    this.timestamps = null;
  }

  /** Returns true if field timestamps is set (has been assigned a value) and false otherwise */
  public boolean isSetTimestamps() {
    return this.timestamps != null;
  }

  public void setTimestampsIsSet(boolean value) {
    if (!value) {
      this.timestamps = null;
    }
  }

  public int getTypesSize() {
    return (this.types == null) ? 0 : this.types.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.Integer> getTypesIterator() {
    return (this.types == null) ? null : this.types.iterator();
  }

  public void addToTypes(int elem) {
    if (this.types == null) {
      this.types = new java.util.ArrayList<java.lang.Integer>();
    }
    this.types.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.Integer> getTypes() {
    return this.types;
  }

  public TSInsertTabletReq setTypes(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Integer> types) {
    this.types = types;
    return this;
  }

  public void unsetTypes() {
    this.types = null;
  }

  /** Returns true if field types is set (has been assigned a value) and false otherwise */
  public boolean isSetTypes() {
    return this.types != null;
  }

  public void setTypesIsSet(boolean value) {
    if (!value) {
      this.types = null;
    }
  }

  public int getSize() {
    return this.size;
  }

  public TSInsertTabletReq setSize(int size) {
    this.size = size;
    setSizeIsSet(true);
    return this;
  }

  public void unsetSize() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SIZE_ISSET_ID);
  }

  /** Returns true if field size is set (has been assigned a value) and false otherwise */
  public boolean isSetSize() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SIZE_ISSET_ID);
  }

  public void setSizeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SIZE_ISSET_ID, value);
  }

  public boolean isIsAligned() {
    return this.isAligned;
  }

  public TSInsertTabletReq setIsAligned(boolean isAligned) {
    this.isAligned = isAligned;
    setIsAlignedIsSet(true);
    return this;
  }

  public void unsetIsAligned() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISALIGNED_ISSET_ID);
  }

  /** Returns true if field isAligned is set (has been assigned a value) and false otherwise */
  public boolean isSetIsAligned() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISALIGNED_ISSET_ID);
  }

  public void setIsAlignedIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISALIGNED_ISSET_ID, value);
  }

  public boolean isWriteToTable() {
    return this.writeToTable;
  }

  public TSInsertTabletReq setWriteToTable(boolean writeToTable) {
    this.writeToTable = writeToTable;
    setWriteToTableIsSet(true);
    return this;
  }

  public void unsetWriteToTable() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __WRITETOTABLE_ISSET_ID);
  }

  /** Returns true if field writeToTable is set (has been assigned a value) and false otherwise */
  public boolean isSetWriteToTable() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __WRITETOTABLE_ISSET_ID);
  }

  public void setWriteToTableIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __WRITETOTABLE_ISSET_ID, value);
  }

  public int getColumnCategoriesSize() {
    return (this.columnCategories == null) ? 0 : this.columnCategories.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.Byte> getColumnCategoriesIterator() {
    return (this.columnCategories == null) ? null : this.columnCategories.iterator();
  }

  public void addToColumnCategories(byte elem) {
    if (this.columnCategories == null) {
      this.columnCategories = new java.util.ArrayList<java.lang.Byte>();
    }
    this.columnCategories.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.Byte> getColumnCategories() {
    return this.columnCategories;
  }

  public TSInsertTabletReq setColumnCategories(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Byte> columnCategories) {
    this.columnCategories = columnCategories;
    return this;
  }

  public void unsetColumnCategories() {
    this.columnCategories = null;
  }

  /** Returns true if field columnCategories is set (has been assigned a value) and false otherwise */
  public boolean isSetColumnCategories() {
    return this.columnCategories != null;
  }

  public void setColumnCategoriesIsSet(boolean value) {
    if (!value) {
      this.columnCategories = null;
    }
  }

  public boolean isIsCompressed() {
    return this.isCompressed;
  }

  public TSInsertTabletReq setIsCompressed(boolean isCompressed) {
    this.isCompressed = isCompressed;
    setIsCompressedIsSet(true);
    return this;
  }

  public void unsetIsCompressed() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISCOMPRESSED_ISSET_ID);
  }

  /** Returns true if field isCompressed is set (has been assigned a value) and false otherwise */
  public boolean isSetIsCompressed() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISCOMPRESSED_ISSET_ID);
  }

  public void setIsCompressedIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISCOMPRESSED_ISSET_ID, value);
  }

  public int getEncodingTypesSize() {
    return (this.encodingTypes == null) ? 0 : this.encodingTypes.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.Integer> getEncodingTypesIterator() {
    return (this.encodingTypes == null) ? null : this.encodingTypes.iterator();
  }

  public void addToEncodingTypes(int elem) {
    if (this.encodingTypes == null) {
      this.encodingTypes = new java.util.ArrayList<java.lang.Integer>();
    }
    this.encodingTypes.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.Integer> getEncodingTypes() {
    return this.encodingTypes;
  }

  public TSInsertTabletReq setEncodingTypes(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Integer> encodingTypes) {
    this.encodingTypes = encodingTypes;
    return this;
  }

  public void unsetEncodingTypes() {
    this.encodingTypes = null;
  }

  /** Returns true if field encodingTypes is set (has been assigned a value) and false otherwise */
  public boolean isSetEncodingTypes() {
    return this.encodingTypes != null;
  }

  public void setEncodingTypesIsSet(boolean value) {
    if (!value) {
      this.encodingTypes = null;
    }
  }

  public int getCompressType() {
    return this.compressType;
  }

  public TSInsertTabletReq setCompressType(int compressType) {
    this.compressType = compressType;
    setCompressTypeIsSet(true);
    return this;
  }

  public void unsetCompressType() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMPRESSTYPE_ISSET_ID);
  }

  /** Returns true if field compressType is set (has been assigned a value) and false otherwise */
  public boolean isSetCompressType() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMPRESSTYPE_ISSET_ID);
  }

  public void setCompressTypeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMPRESSTYPE_ISSET_ID, value);
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case SESSION_ID:
      if (value == null) {
        unsetSessionId();
      } else {
        setSessionId((java.lang.Long)value);
      }
      break;

    case PREFIX_PATH:
      if (value == null) {
        unsetPrefixPath();
      } else {
        setPrefixPath((java.lang.String)value);
      }
      break;

    case MEASUREMENTS:
      if (value == null) {
        unsetMeasurements();
      } else {
        setMeasurements((java.util.List<java.lang.String>)value);
      }
      break;

    case VALUES:
      if (value == null) {
        unsetValues();
      } else {
        if (value instanceof byte[]) {
          setValues((byte[])value);
        } else {
          setValues((java.nio.ByteBuffer)value);
        }
      }
      break;

    case TIMESTAMPS:
      if (value == null) {
        unsetTimestamps();
      } else {
        if (value instanceof byte[]) {
          setTimestamps((byte[])value);
        } else {
          setTimestamps((java.nio.ByteBuffer)value);
        }
      }
      break;

    case TYPES:
      if (value == null) {
        unsetTypes();
      } else {
        setTypes((java.util.List<java.lang.Integer>)value);
      }
      break;

    case SIZE:
      if (value == null) {
        unsetSize();
      } else {
        setSize((java.lang.Integer)value);
      }
      break;

    case IS_ALIGNED:
      if (value == null) {
        unsetIsAligned();
      } else {
        setIsAligned((java.lang.Boolean)value);
      }
      break;

    case WRITE_TO_TABLE:
      if (value == null) {
        unsetWriteToTable();
      } else {
        setWriteToTable((java.lang.Boolean)value);
      }
      break;

    case COLUMN_CATEGORIES:
      if (value == null) {
        unsetColumnCategories();
      } else {
        setColumnCategories((java.util.List<java.lang.Byte>)value);
      }
      break;

    case IS_COMPRESSED:
      if (value == null) {
        unsetIsCompressed();
      } else {
        setIsCompressed((java.lang.Boolean)value);
      }
      break;

    case ENCODING_TYPES:
      if (value == null) {
        unsetEncodingTypes();
      } else {
        setEncodingTypes((java.util.List<java.lang.Integer>)value);
      }
      break;

    case COMPRESS_TYPE:
      if (value == null) {
        unsetCompressType();
      } else {
        setCompressType((java.lang.Integer)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case SESSION_ID:
      return getSessionId();

    case PREFIX_PATH:
      return getPrefixPath();

    case MEASUREMENTS:
      return getMeasurements();

    case VALUES:
      return getValues();

    case TIMESTAMPS:
      return getTimestamps();

    case TYPES:
      return getTypes();

    case SIZE:
      return getSize();

    case IS_ALIGNED:
      return isIsAligned();

    case WRITE_TO_TABLE:
      return isWriteToTable();

    case COLUMN_CATEGORIES:
      return getColumnCategories();

    case IS_COMPRESSED:
      return isIsCompressed();

    case ENCODING_TYPES:
      return getEncodingTypes();

    case COMPRESS_TYPE:
      return getCompressType();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case SESSION_ID:
      return isSetSessionId();
    case PREFIX_PATH:
      return isSetPrefixPath();
    case MEASUREMENTS:
      return isSetMeasurements();
    case VALUES:
      return isSetValues();
    case TIMESTAMPS:
      return isSetTimestamps();
    case TYPES:
      return isSetTypes();
    case SIZE:
      return isSetSize();
    case IS_ALIGNED:
      return isSetIsAligned();
    case WRITE_TO_TABLE:
      return isSetWriteToTable();
    case COLUMN_CATEGORIES:
      return isSetColumnCategories();
    case IS_COMPRESSED:
      return isSetIsCompressed();
    case ENCODING_TYPES:
      return isSetEncodingTypes();
    case COMPRESS_TYPE:
      return isSetCompressType();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TSInsertTabletReq)
      return this.equals((TSInsertTabletReq)that);
    return false;
  }

  public boolean equals(TSInsertTabletReq that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_sessionId = true;
    boolean that_present_sessionId = true;
    if (this_present_sessionId || that_present_sessionId) {
      if (!(this_present_sessionId && that_present_sessionId))
        return false;
      if (this.sessionId != that.sessionId)
        return false;
    }

    boolean this_present_prefixPath = true && this.isSetPrefixPath();
    boolean that_present_prefixPath = true && that.isSetPrefixPath();
    if (this_present_prefixPath || that_present_prefixPath) {
      if (!(this_present_prefixPath && that_present_prefixPath))
        return false;
      if (!this.prefixPath.equals(that.prefixPath))
        return false;
    }

    boolean this_present_measurements = true && this.isSetMeasurements();
    boolean that_present_measurements = true && that.isSetMeasurements();
    if (this_present_measurements || that_present_measurements) {
      if (!(this_present_measurements && that_present_measurements))
        return false;
      if (!this.measurements.equals(that.measurements))
        return false;
    }

    boolean this_present_values = true && this.isSetValues();
    boolean that_present_values = true && that.isSetValues();
    if (this_present_values || that_present_values) {
      if (!(this_present_values && that_present_values))
        return false;
      if (!this.values.equals(that.values))
        return false;
    }

    boolean this_present_timestamps = true && this.isSetTimestamps();
    boolean that_present_timestamps = true && that.isSetTimestamps();
    if (this_present_timestamps || that_present_timestamps) {
      if (!(this_present_timestamps && that_present_timestamps))
        return false;
      if (!this.timestamps.equals(that.timestamps))
        return false;
    }

    boolean this_present_types = true && this.isSetTypes();
    boolean that_present_types = true && that.isSetTypes();
    if (this_present_types || that_present_types) {
      if (!(this_present_types && that_present_types))
        return false;
      if (!this.types.equals(that.types))
        return false;
    }

    boolean this_present_size = true;
    boolean that_present_size = true;
    if (this_present_size || that_present_size) {
      if (!(this_present_size && that_present_size))
        return false;
      if (this.size != that.size)
        return false;
    }

    boolean this_present_isAligned = true && this.isSetIsAligned();
    boolean that_present_isAligned = true && that.isSetIsAligned();
    if (this_present_isAligned || that_present_isAligned) {
      if (!(this_present_isAligned && that_present_isAligned))
        return false;
      if (this.isAligned != that.isAligned)
        return false;
    }

    boolean this_present_writeToTable = true && this.isSetWriteToTable();
    boolean that_present_writeToTable = true && that.isSetWriteToTable();
    if (this_present_writeToTable || that_present_writeToTable) {
      if (!(this_present_writeToTable && that_present_writeToTable))
        return false;
      if (this.writeToTable != that.writeToTable)
        return false;
    }

    boolean this_present_columnCategories = true && this.isSetColumnCategories();
    boolean that_present_columnCategories = true && that.isSetColumnCategories();
    if (this_present_columnCategories || that_present_columnCategories) {
      if (!(this_present_columnCategories && that_present_columnCategories))
        return false;
      if (!this.columnCategories.equals(that.columnCategories))
        return false;
    }

    boolean this_present_isCompressed = true && this.isSetIsCompressed();
    boolean that_present_isCompressed = true && that.isSetIsCompressed();
    if (this_present_isCompressed || that_present_isCompressed) {
      if (!(this_present_isCompressed && that_present_isCompressed))
        return false;
      if (this.isCompressed != that.isCompressed)
        return false;
    }

    boolean this_present_encodingTypes = true && this.isSetEncodingTypes();
    boolean that_present_encodingTypes = true && that.isSetEncodingTypes();
    if (this_present_encodingTypes || that_present_encodingTypes) {
      if (!(this_present_encodingTypes && that_present_encodingTypes))
        return false;
      if (!this.encodingTypes.equals(that.encodingTypes))
        return false;
    }

    boolean this_present_compressType = true && this.isSetCompressType();
    boolean that_present_compressType = true && that.isSetCompressType();
    if (this_present_compressType || that_present_compressType) {
      if (!(this_present_compressType && that_present_compressType))
        return false;
      if (this.compressType != that.compressType)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(sessionId);

    hashCode = hashCode * 8191 + ((isSetPrefixPath()) ? 131071 : 524287);
    if (isSetPrefixPath())
      hashCode = hashCode * 8191 + prefixPath.hashCode();

    hashCode = hashCode * 8191 + ((isSetMeasurements()) ? 131071 : 524287);
    if (isSetMeasurements())
      hashCode = hashCode * 8191 + measurements.hashCode();

    hashCode = hashCode * 8191 + ((isSetValues()) ? 131071 : 524287);
    if (isSetValues())
      hashCode = hashCode * 8191 + values.hashCode();

    hashCode = hashCode * 8191 + ((isSetTimestamps()) ? 131071 : 524287);
    if (isSetTimestamps())
      hashCode = hashCode * 8191 + timestamps.hashCode();

    hashCode = hashCode * 8191 + ((isSetTypes()) ? 131071 : 524287);
    if (isSetTypes())
      hashCode = hashCode * 8191 + types.hashCode();

    hashCode = hashCode * 8191 + size;

    hashCode = hashCode * 8191 + ((isSetIsAligned()) ? 131071 : 524287);
    if (isSetIsAligned())
      hashCode = hashCode * 8191 + ((isAligned) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetWriteToTable()) ? 131071 : 524287);
    if (isSetWriteToTable())
      hashCode = hashCode * 8191 + ((writeToTable) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetColumnCategories()) ? 131071 : 524287);
    if (isSetColumnCategories())
      hashCode = hashCode * 8191 + columnCategories.hashCode();

    hashCode = hashCode * 8191 + ((isSetIsCompressed()) ? 131071 : 524287);
    if (isSetIsCompressed())
      hashCode = hashCode * 8191 + ((isCompressed) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetEncodingTypes()) ? 131071 : 524287);
    if (isSetEncodingTypes())
      hashCode = hashCode * 8191 + encodingTypes.hashCode();

    hashCode = hashCode * 8191 + ((isSetCompressType()) ? 131071 : 524287);
    if (isSetCompressType())
      hashCode = hashCode * 8191 + compressType;

    return hashCode;
  }

  @Override
  public int compareTo(TSInsertTabletReq other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetSessionId(), other.isSetSessionId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSessionId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sessionId, other.sessionId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPrefixPath(), other.isSetPrefixPath());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrefixPath()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.prefixPath, other.prefixPath);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetMeasurements(), other.isSetMeasurements());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMeasurements()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.measurements, other.measurements);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetValues(), other.isSetValues());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetValues()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.values, other.values);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTimestamps(), other.isSetTimestamps());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimestamps()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timestamps, other.timestamps);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTypes(), other.isSetTypes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTypes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.types, other.types);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSize(), other.isSetSize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.size, other.size);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetIsAligned(), other.isSetIsAligned());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsAligned()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isAligned, other.isAligned);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetWriteToTable(), other.isSetWriteToTable());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWriteToTable()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.writeToTable, other.writeToTable);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetColumnCategories(), other.isSetColumnCategories());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetColumnCategories()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.columnCategories, other.columnCategories);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetIsCompressed(), other.isSetIsCompressed());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsCompressed()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isCompressed, other.isCompressed);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetEncodingTypes(), other.isSetEncodingTypes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEncodingTypes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.encodingTypes, other.encodingTypes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetCompressType(), other.isSetCompressType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompressType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.compressType, other.compressType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TSInsertTabletReq(");
    boolean first = true;

    sb.append("sessionId:");
    sb.append(this.sessionId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("prefixPath:");
    if (this.prefixPath == null) {
      sb.append("null");
    } else {
      sb.append(this.prefixPath);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("measurements:");
    if (this.measurements == null) {
      sb.append("null");
    } else {
      sb.append(this.measurements);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("values:");
    if (this.values == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.values, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("timestamps:");
    if (this.timestamps == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.timestamps, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("types:");
    if (this.types == null) {
      sb.append("null");
    } else {
      sb.append(this.types);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("size:");
    sb.append(this.size);
    first = false;
    if (isSetIsAligned()) {
      if (!first) sb.append(", ");
      sb.append("isAligned:");
      sb.append(this.isAligned);
      first = false;
    }
    if (isSetWriteToTable()) {
      if (!first) sb.append(", ");
      sb.append("writeToTable:");
      sb.append(this.writeToTable);
      first = false;
    }
    if (isSetColumnCategories()) {
      if (!first) sb.append(", ");
      sb.append("columnCategories:");
      if (this.columnCategories == null) {
        sb.append("null");
      } else {
        sb.append(this.columnCategories);
      }
      first = false;
    }
    if (isSetIsCompressed()) {
      if (!first) sb.append(", ");
      sb.append("isCompressed:");
      sb.append(this.isCompressed);
      first = false;
    }
    if (isSetEncodingTypes()) {
      if (!first) sb.append(", ");
      sb.append("encodingTypes:");
      if (this.encodingTypes == null) {
        sb.append("null");
      } else {
        sb.append(this.encodingTypes);
      }
      first = false;
    }
    if (isSetCompressType()) {
      if (!first) sb.append(", ");
      sb.append("compressType:");
      sb.append(this.compressType);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'sessionId' because it's a primitive and you chose the non-beans generator.
    if (prefixPath == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'prefixPath' was not present! Struct: " + toString());
    }
    if (measurements == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'measurements' was not present! Struct: " + toString());
    }
    if (values == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'values' was not present! Struct: " + toString());
    }
    if (timestamps == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'timestamps' was not present! Struct: " + toString());
    }
    if (types == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'types' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'size' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TSInsertTabletReqStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TSInsertTabletReqStandardScheme getScheme() {
      return new TSInsertTabletReqStandardScheme();
    }
  }

  private static class TSInsertTabletReqStandardScheme extends org.apache.thrift.scheme.StandardScheme<TSInsertTabletReq> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TSInsertTabletReq struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SESSION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.sessionId = iprot.readI64();
              struct.setSessionIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PREFIX_PATH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.prefixPath = iprot.readString();
              struct.setPrefixPathIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MEASUREMENTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list182 = iprot.readListBegin();
                struct.measurements = new java.util.ArrayList<java.lang.String>(_list182.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _elem183;
                for (int _i184 = 0; _i184 < _list182.size; ++_i184)
                {
                  _elem183 = iprot.readString();
                  struct.measurements.add(_elem183);
                }
                iprot.readListEnd();
              }
              struct.setMeasurementsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // VALUES
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.values = iprot.readBinary();
              struct.setValuesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TIMESTAMPS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.timestamps = iprot.readBinary();
              struct.setTimestampsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // TYPES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list185 = iprot.readListBegin();
                struct.types = new java.util.ArrayList<java.lang.Integer>(_list185.size);
                int _elem186;
                for (int _i187 = 0; _i187 < _list185.size; ++_i187)
                {
                  _elem186 = iprot.readI32();
                  struct.types.add(_elem186);
                }
                iprot.readListEnd();
              }
              struct.setTypesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.size = iprot.readI32();
              struct.setSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // IS_ALIGNED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isAligned = iprot.readBool();
              struct.setIsAlignedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // WRITE_TO_TABLE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.writeToTable = iprot.readBool();
              struct.setWriteToTableIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // COLUMN_CATEGORIES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list188 = iprot.readListBegin();
                struct.columnCategories = new java.util.ArrayList<java.lang.Byte>(_list188.size);
                byte _elem189;
                for (int _i190 = 0; _i190 < _list188.size; ++_i190)
                {
                  _elem189 = iprot.readByte();
                  struct.columnCategories.add(_elem189);
                }
                iprot.readListEnd();
              }
              struct.setColumnCategoriesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // IS_COMPRESSED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isCompressed = iprot.readBool();
              struct.setIsCompressedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // ENCODING_TYPES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list191 = iprot.readListBegin();
                struct.encodingTypes = new java.util.ArrayList<java.lang.Integer>(_list191.size);
                int _elem192;
                for (int _i193 = 0; _i193 < _list191.size; ++_i193)
                {
                  _elem192 = iprot.readI32();
                  struct.encodingTypes.add(_elem192);
                }
                iprot.readListEnd();
              }
              struct.setEncodingTypesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // COMPRESS_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.compressType = iprot.readI32();
              struct.setCompressTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetSessionId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'sessionId' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetSize()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'size' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TSInsertTabletReq struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(SESSION_ID_FIELD_DESC);
      oprot.writeI64(struct.sessionId);
      oprot.writeFieldEnd();
      if (struct.prefixPath != null) {
        oprot.writeFieldBegin(PREFIX_PATH_FIELD_DESC);
        oprot.writeString(struct.prefixPath);
        oprot.writeFieldEnd();
      }
      if (struct.measurements != null) {
        oprot.writeFieldBegin(MEASUREMENTS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.measurements.size()));
          for (java.lang.String _iter194 : struct.measurements)
          {
            oprot.writeString(_iter194);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.values != null) {
        oprot.writeFieldBegin(VALUES_FIELD_DESC);
        oprot.writeBinary(struct.values);
        oprot.writeFieldEnd();
      }
      if (struct.timestamps != null) {
        oprot.writeFieldBegin(TIMESTAMPS_FIELD_DESC);
        oprot.writeBinary(struct.timestamps);
        oprot.writeFieldEnd();
      }
      if (struct.types != null) {
        oprot.writeFieldBegin(TYPES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.types.size()));
          for (int _iter195 : struct.types)
          {
            oprot.writeI32(_iter195);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SIZE_FIELD_DESC);
      oprot.writeI32(struct.size);
      oprot.writeFieldEnd();
      if (struct.isSetIsAligned()) {
        oprot.writeFieldBegin(IS_ALIGNED_FIELD_DESC);
        oprot.writeBool(struct.isAligned);
        oprot.writeFieldEnd();
      }
      if (struct.isSetWriteToTable()) {
        oprot.writeFieldBegin(WRITE_TO_TABLE_FIELD_DESC);
        oprot.writeBool(struct.writeToTable);
        oprot.writeFieldEnd();
      }
      if (struct.columnCategories != null) {
        if (struct.isSetColumnCategories()) {
          oprot.writeFieldBegin(COLUMN_CATEGORIES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.BYTE, struct.columnCategories.size()));
            for (byte _iter196 : struct.columnCategories)
            {
              oprot.writeByte(_iter196);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetIsCompressed()) {
        oprot.writeFieldBegin(IS_COMPRESSED_FIELD_DESC);
        oprot.writeBool(struct.isCompressed);
        oprot.writeFieldEnd();
      }
      if (struct.encodingTypes != null) {
        if (struct.isSetEncodingTypes()) {
          oprot.writeFieldBegin(ENCODING_TYPES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.encodingTypes.size()));
            for (int _iter197 : struct.encodingTypes)
            {
              oprot.writeI32(_iter197);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetCompressType()) {
        oprot.writeFieldBegin(COMPRESS_TYPE_FIELD_DESC);
        oprot.writeI32(struct.compressType);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TSInsertTabletReqTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TSInsertTabletReqTupleScheme getScheme() {
      return new TSInsertTabletReqTupleScheme();
    }
  }

  private static class TSInsertTabletReqTupleScheme extends org.apache.thrift.scheme.TupleScheme<TSInsertTabletReq> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TSInsertTabletReq struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeI64(struct.sessionId);
      oprot.writeString(struct.prefixPath);
      {
        oprot.writeI32(struct.measurements.size());
        for (java.lang.String _iter198 : struct.measurements)
        {
          oprot.writeString(_iter198);
        }
      }
      oprot.writeBinary(struct.values);
      oprot.writeBinary(struct.timestamps);
      {
        oprot.writeI32(struct.types.size());
        for (int _iter199 : struct.types)
        {
          oprot.writeI32(_iter199);
        }
      }
      oprot.writeI32(struct.size);
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetIsAligned()) {
        optionals.set(0);
      }
      if (struct.isSetWriteToTable()) {
        optionals.set(1);
      }
      if (struct.isSetColumnCategories()) {
        optionals.set(2);
      }
      if (struct.isSetIsCompressed()) {
        optionals.set(3);
      }
      if (struct.isSetEncodingTypes()) {
        optionals.set(4);
      }
      if (struct.isSetCompressType()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetIsAligned()) {
        oprot.writeBool(struct.isAligned);
      }
      if (struct.isSetWriteToTable()) {
        oprot.writeBool(struct.writeToTable);
      }
      if (struct.isSetColumnCategories()) {
        {
          oprot.writeI32(struct.columnCategories.size());
          for (byte _iter200 : struct.columnCategories)
          {
            oprot.writeByte(_iter200);
          }
        }
      }
      if (struct.isSetIsCompressed()) {
        oprot.writeBool(struct.isCompressed);
      }
      if (struct.isSetEncodingTypes()) {
        {
          oprot.writeI32(struct.encodingTypes.size());
          for (int _iter201 : struct.encodingTypes)
          {
            oprot.writeI32(_iter201);
          }
        }
      }
      if (struct.isSetCompressType()) {
        oprot.writeI32(struct.compressType);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TSInsertTabletReq struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.sessionId = iprot.readI64();
      struct.setSessionIdIsSet(true);
      struct.prefixPath = iprot.readString();
      struct.setPrefixPathIsSet(true);
      {
        org.apache.thrift.protocol.TList _list202 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRING);
        struct.measurements = new java.util.ArrayList<java.lang.String>(_list202.size);
        @org.apache.thrift.annotation.Nullable java.lang.String _elem203;
        for (int _i204 = 0; _i204 < _list202.size; ++_i204)
        {
          _elem203 = iprot.readString();
          struct.measurements.add(_elem203);
        }
      }
      struct.setMeasurementsIsSet(true);
      struct.values = iprot.readBinary();
      struct.setValuesIsSet(true);
      struct.timestamps = iprot.readBinary();
      struct.setTimestampsIsSet(true);
      {
        org.apache.thrift.protocol.TList _list205 = iprot.readListBegin(org.apache.thrift.protocol.TType.I32);
        struct.types = new java.util.ArrayList<java.lang.Integer>(_list205.size);
        int _elem206;
        for (int _i207 = 0; _i207 < _list205.size; ++_i207)
        {
          _elem206 = iprot.readI32();
          struct.types.add(_elem206);
        }
      }
      struct.setTypesIsSet(true);
      struct.size = iprot.readI32();
      struct.setSizeIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.isAligned = iprot.readBool();
        struct.setIsAlignedIsSet(true);
      }
      if (incoming.get(1)) {
        struct.writeToTable = iprot.readBool();
        struct.setWriteToTableIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list208 = iprot.readListBegin(org.apache.thrift.protocol.TType.BYTE);
          struct.columnCategories = new java.util.ArrayList<java.lang.Byte>(_list208.size);
          byte _elem209;
          for (int _i210 = 0; _i210 < _list208.size; ++_i210)
          {
            _elem209 = iprot.readByte();
            struct.columnCategories.add(_elem209);
          }
        }
        struct.setColumnCategoriesIsSet(true);
      }
      if (incoming.get(3)) {
        struct.isCompressed = iprot.readBool();
        struct.setIsCompressedIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list211 = iprot.readListBegin(org.apache.thrift.protocol.TType.I32);
          struct.encodingTypes = new java.util.ArrayList<java.lang.Integer>(_list211.size);
          int _elem212;
          for (int _i213 = 0; _i213 < _list211.size; ++_i213)
          {
            _elem212 = iprot.readI32();
            struct.encodingTypes.add(_elem212);
          }
        }
        struct.setEncodingTypesIsSet(true);
      }
      if (incoming.get(5)) {
        struct.compressType = iprot.readI32();
        struct.setCompressTypeIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

