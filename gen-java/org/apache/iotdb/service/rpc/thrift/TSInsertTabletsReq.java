/**
 * Autogenerated by Thrift Compiler (0.20.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.iotdb.service.rpc.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.20.0)", date = "2025-05-09")
public class TSInsertTabletsReq implements org.apache.thrift.TBase<TSInsertTabletsReq, TSInsertTabletsReq._Fields>, java.io.Serializable, Cloneable, Comparable<TSInsertTabletsReq> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TSInsertTabletsReq");

  private static final org.apache.thrift.protocol.TField SESSION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sessionId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField PREFIX_PATHS_FIELD_DESC = new org.apache.thrift.protocol.TField("prefixPaths", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField MEASUREMENTS_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("measurementsList", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField VALUES_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("valuesList", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField TIMESTAMPS_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("timestampsList", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField TYPES_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("typesList", org.apache.thrift.protocol.TType.LIST, (short)6);
  private static final org.apache.thrift.protocol.TField SIZE_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("sizeList", org.apache.thrift.protocol.TType.LIST, (short)7);
  private static final org.apache.thrift.protocol.TField IS_ALIGNED_FIELD_DESC = new org.apache.thrift.protocol.TField("isAligned", org.apache.thrift.protocol.TType.BOOL, (short)8);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TSInsertTabletsReqStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TSInsertTabletsReqTupleSchemeFactory();

  public long sessionId; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> prefixPaths; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<java.util.List<java.lang.String>> measurementsList; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<java.nio.ByteBuffer> valuesList; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<java.nio.ByteBuffer> timestampsList; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<java.util.List<java.lang.Integer>> typesList; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Integer> sizeList; // required
  public boolean isAligned; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SESSION_ID((short)1, "sessionId"),
    PREFIX_PATHS((short)2, "prefixPaths"),
    MEASUREMENTS_LIST((short)3, "measurementsList"),
    VALUES_LIST((short)4, "valuesList"),
    TIMESTAMPS_LIST((short)5, "timestampsList"),
    TYPES_LIST((short)6, "typesList"),
    SIZE_LIST((short)7, "sizeList"),
    IS_ALIGNED((short)8, "isAligned");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SESSION_ID
          return SESSION_ID;
        case 2: // PREFIX_PATHS
          return PREFIX_PATHS;
        case 3: // MEASUREMENTS_LIST
          return MEASUREMENTS_LIST;
        case 4: // VALUES_LIST
          return VALUES_LIST;
        case 5: // TIMESTAMPS_LIST
          return TIMESTAMPS_LIST;
        case 6: // TYPES_LIST
          return TYPES_LIST;
        case 7: // SIZE_LIST
          return SIZE_LIST;
        case 8: // IS_ALIGNED
          return IS_ALIGNED;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SESSIONID_ISSET_ID = 0;
  private static final int __ISALIGNED_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.IS_ALIGNED};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SESSION_ID, new org.apache.thrift.meta_data.FieldMetaData("sessionId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.PREFIX_PATHS, new org.apache.thrift.meta_data.FieldMetaData("prefixPaths", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.MEASUREMENTS_LIST, new org.apache.thrift.meta_data.FieldMetaData("measurementsList", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)))));
    tmpMap.put(_Fields.VALUES_LIST, new org.apache.thrift.meta_data.FieldMetaData("valuesList", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING            , true))));
    tmpMap.put(_Fields.TIMESTAMPS_LIST, new org.apache.thrift.meta_data.FieldMetaData("timestampsList", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING            , true))));
    tmpMap.put(_Fields.TYPES_LIST, new org.apache.thrift.meta_data.FieldMetaData("typesList", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)))));
    tmpMap.put(_Fields.SIZE_LIST, new org.apache.thrift.meta_data.FieldMetaData("sizeList", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.IS_ALIGNED, new org.apache.thrift.meta_data.FieldMetaData("isAligned", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TSInsertTabletsReq.class, metaDataMap);
  }

  public TSInsertTabletsReq() {
  }

  public TSInsertTabletsReq(
    long sessionId,
    java.util.List<java.lang.String> prefixPaths,
    java.util.List<java.util.List<java.lang.String>> measurementsList,
    java.util.List<java.nio.ByteBuffer> valuesList,
    java.util.List<java.nio.ByteBuffer> timestampsList,
    java.util.List<java.util.List<java.lang.Integer>> typesList,
    java.util.List<java.lang.Integer> sizeList)
  {
    this();
    this.sessionId = sessionId;
    setSessionIdIsSet(true);
    this.prefixPaths = prefixPaths;
    this.measurementsList = measurementsList;
    this.valuesList = valuesList;
    this.timestampsList = timestampsList;
    this.typesList = typesList;
    this.sizeList = sizeList;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TSInsertTabletsReq(TSInsertTabletsReq other) {
    __isset_bitfield = other.__isset_bitfield;
    this.sessionId = other.sessionId;
    if (other.isSetPrefixPaths()) {
      java.util.List<java.lang.String> __this__prefixPaths = new java.util.ArrayList<java.lang.String>(other.prefixPaths);
      this.prefixPaths = __this__prefixPaths;
    }
    if (other.isSetMeasurementsList()) {
      java.util.List<java.util.List<java.lang.String>> __this__measurementsList = new java.util.ArrayList<java.util.List<java.lang.String>>(other.measurementsList.size());
      for (java.util.List<java.lang.String> other_element : other.measurementsList) {
        java.util.List<java.lang.String> __this__measurementsList_copy = new java.util.ArrayList<java.lang.String>(other_element);
        __this__measurementsList.add(__this__measurementsList_copy);
      }
      this.measurementsList = __this__measurementsList;
    }
    if (other.isSetValuesList()) {
      java.util.List<java.nio.ByteBuffer> __this__valuesList = new java.util.ArrayList<java.nio.ByteBuffer>(other.valuesList);
      this.valuesList = __this__valuesList;
    }
    if (other.isSetTimestampsList()) {
      java.util.List<java.nio.ByteBuffer> __this__timestampsList = new java.util.ArrayList<java.nio.ByteBuffer>(other.timestampsList);
      this.timestampsList = __this__timestampsList;
    }
    if (other.isSetTypesList()) {
      java.util.List<java.util.List<java.lang.Integer>> __this__typesList = new java.util.ArrayList<java.util.List<java.lang.Integer>>(other.typesList.size());
      for (java.util.List<java.lang.Integer> other_element : other.typesList) {
        java.util.List<java.lang.Integer> __this__typesList_copy = new java.util.ArrayList<java.lang.Integer>(other_element);
        __this__typesList.add(__this__typesList_copy);
      }
      this.typesList = __this__typesList;
    }
    if (other.isSetSizeList()) {
      java.util.List<java.lang.Integer> __this__sizeList = new java.util.ArrayList<java.lang.Integer>(other.sizeList);
      this.sizeList = __this__sizeList;
    }
    this.isAligned = other.isAligned;
  }

  @Override
  public TSInsertTabletsReq deepCopy() {
    return new TSInsertTabletsReq(this);
  }

  @Override
  public void clear() {
    setSessionIdIsSet(false);
    this.sessionId = 0;
    this.prefixPaths = null;
    this.measurementsList = null;
    this.valuesList = null;
    this.timestampsList = null;
    this.typesList = null;
    this.sizeList = null;
    setIsAlignedIsSet(false);
    this.isAligned = false;
  }

  public long getSessionId() {
    return this.sessionId;
  }

  public TSInsertTabletsReq setSessionId(long sessionId) {
    this.sessionId = sessionId;
    setSessionIdIsSet(true);
    return this;
  }

  public void unsetSessionId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SESSIONID_ISSET_ID);
  }

  /** Returns true if field sessionId is set (has been assigned a value) and false otherwise */
  public boolean isSetSessionId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SESSIONID_ISSET_ID);
  }

  public void setSessionIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SESSIONID_ISSET_ID, value);
  }

  public int getPrefixPathsSize() {
    return (this.prefixPaths == null) ? 0 : this.prefixPaths.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.String> getPrefixPathsIterator() {
    return (this.prefixPaths == null) ? null : this.prefixPaths.iterator();
  }

  public void addToPrefixPaths(java.lang.String elem) {
    if (this.prefixPaths == null) {
      this.prefixPaths = new java.util.ArrayList<java.lang.String>();
    }
    this.prefixPaths.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.String> getPrefixPaths() {
    return this.prefixPaths;
  }

  public TSInsertTabletsReq setPrefixPaths(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> prefixPaths) {
    this.prefixPaths = prefixPaths;
    return this;
  }

  public void unsetPrefixPaths() {
    this.prefixPaths = null;
  }

  /** Returns true if field prefixPaths is set (has been assigned a value) and false otherwise */
  public boolean isSetPrefixPaths() {
    return this.prefixPaths != null;
  }

  public void setPrefixPathsIsSet(boolean value) {
    if (!value) {
      this.prefixPaths = null;
    }
  }

  public int getMeasurementsListSize() {
    return (this.measurementsList == null) ? 0 : this.measurementsList.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.util.List<java.lang.String>> getMeasurementsListIterator() {
    return (this.measurementsList == null) ? null : this.measurementsList.iterator();
  }

  public void addToMeasurementsList(java.util.List<java.lang.String> elem) {
    if (this.measurementsList == null) {
      this.measurementsList = new java.util.ArrayList<java.util.List<java.lang.String>>();
    }
    this.measurementsList.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.util.List<java.lang.String>> getMeasurementsList() {
    return this.measurementsList;
  }

  public TSInsertTabletsReq setMeasurementsList(@org.apache.thrift.annotation.Nullable java.util.List<java.util.List<java.lang.String>> measurementsList) {
    this.measurementsList = measurementsList;
    return this;
  }

  public void unsetMeasurementsList() {
    this.measurementsList = null;
  }

  /** Returns true if field measurementsList is set (has been assigned a value) and false otherwise */
  public boolean isSetMeasurementsList() {
    return this.measurementsList != null;
  }

  public void setMeasurementsListIsSet(boolean value) {
    if (!value) {
      this.measurementsList = null;
    }
  }

  public int getValuesListSize() {
    return (this.valuesList == null) ? 0 : this.valuesList.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.nio.ByteBuffer> getValuesListIterator() {
    return (this.valuesList == null) ? null : this.valuesList.iterator();
  }

  public void addToValuesList(java.nio.ByteBuffer elem) {
    if (this.valuesList == null) {
      this.valuesList = new java.util.ArrayList<java.nio.ByteBuffer>();
    }
    this.valuesList.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.nio.ByteBuffer> getValuesList() {
    return this.valuesList;
  }

  public TSInsertTabletsReq setValuesList(@org.apache.thrift.annotation.Nullable java.util.List<java.nio.ByteBuffer> valuesList) {
    this.valuesList = valuesList;
    return this;
  }

  public void unsetValuesList() {
    this.valuesList = null;
  }

  /** Returns true if field valuesList is set (has been assigned a value) and false otherwise */
  public boolean isSetValuesList() {
    return this.valuesList != null;
  }

  public void setValuesListIsSet(boolean value) {
    if (!value) {
      this.valuesList = null;
    }
  }

  public int getTimestampsListSize() {
    return (this.timestampsList == null) ? 0 : this.timestampsList.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.nio.ByteBuffer> getTimestampsListIterator() {
    return (this.timestampsList == null) ? null : this.timestampsList.iterator();
  }

  public void addToTimestampsList(java.nio.ByteBuffer elem) {
    if (this.timestampsList == null) {
      this.timestampsList = new java.util.ArrayList<java.nio.ByteBuffer>();
    }
    this.timestampsList.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.nio.ByteBuffer> getTimestampsList() {
    return this.timestampsList;
  }

  public TSInsertTabletsReq setTimestampsList(@org.apache.thrift.annotation.Nullable java.util.List<java.nio.ByteBuffer> timestampsList) {
    this.timestampsList = timestampsList;
    return this;
  }

  public void unsetTimestampsList() {
    this.timestampsList = null;
  }

  /** Returns true if field timestampsList is set (has been assigned a value) and false otherwise */
  public boolean isSetTimestampsList() {
    return this.timestampsList != null;
  }

  public void setTimestampsListIsSet(boolean value) {
    if (!value) {
      this.timestampsList = null;
    }
  }

  public int getTypesListSize() {
    return (this.typesList == null) ? 0 : this.typesList.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.util.List<java.lang.Integer>> getTypesListIterator() {
    return (this.typesList == null) ? null : this.typesList.iterator();
  }

  public void addToTypesList(java.util.List<java.lang.Integer> elem) {
    if (this.typesList == null) {
      this.typesList = new java.util.ArrayList<java.util.List<java.lang.Integer>>();
    }
    this.typesList.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.util.List<java.lang.Integer>> getTypesList() {
    return this.typesList;
  }

  public TSInsertTabletsReq setTypesList(@org.apache.thrift.annotation.Nullable java.util.List<java.util.List<java.lang.Integer>> typesList) {
    this.typesList = typesList;
    return this;
  }

  public void unsetTypesList() {
    this.typesList = null;
  }

  /** Returns true if field typesList is set (has been assigned a value) and false otherwise */
  public boolean isSetTypesList() {
    return this.typesList != null;
  }

  public void setTypesListIsSet(boolean value) {
    if (!value) {
      this.typesList = null;
    }
  }

  public int getSizeListSize() {
    return (this.sizeList == null) ? 0 : this.sizeList.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.Integer> getSizeListIterator() {
    return (this.sizeList == null) ? null : this.sizeList.iterator();
  }

  public void addToSizeList(int elem) {
    if (this.sizeList == null) {
      this.sizeList = new java.util.ArrayList<java.lang.Integer>();
    }
    this.sizeList.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.Integer> getSizeList() {
    return this.sizeList;
  }

  public TSInsertTabletsReq setSizeList(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Integer> sizeList) {
    this.sizeList = sizeList;
    return this;
  }

  public void unsetSizeList() {
    this.sizeList = null;
  }

  /** Returns true if field sizeList is set (has been assigned a value) and false otherwise */
  public boolean isSetSizeList() {
    return this.sizeList != null;
  }

  public void setSizeListIsSet(boolean value) {
    if (!value) {
      this.sizeList = null;
    }
  }

  public boolean isIsAligned() {
    return this.isAligned;
  }

  public TSInsertTabletsReq setIsAligned(boolean isAligned) {
    this.isAligned = isAligned;
    setIsAlignedIsSet(true);
    return this;
  }

  public void unsetIsAligned() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISALIGNED_ISSET_ID);
  }

  /** Returns true if field isAligned is set (has been assigned a value) and false otherwise */
  public boolean isSetIsAligned() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISALIGNED_ISSET_ID);
  }

  public void setIsAlignedIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISALIGNED_ISSET_ID, value);
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case SESSION_ID:
      if (value == null) {
        unsetSessionId();
      } else {
        setSessionId((java.lang.Long)value);
      }
      break;

    case PREFIX_PATHS:
      if (value == null) {
        unsetPrefixPaths();
      } else {
        setPrefixPaths((java.util.List<java.lang.String>)value);
      }
      break;

    case MEASUREMENTS_LIST:
      if (value == null) {
        unsetMeasurementsList();
      } else {
        setMeasurementsList((java.util.List<java.util.List<java.lang.String>>)value);
      }
      break;

    case VALUES_LIST:
      if (value == null) {
        unsetValuesList();
      } else {
        setValuesList((java.util.List<java.nio.ByteBuffer>)value);
      }
      break;

    case TIMESTAMPS_LIST:
      if (value == null) {
        unsetTimestampsList();
      } else {
        setTimestampsList((java.util.List<java.nio.ByteBuffer>)value);
      }
      break;

    case TYPES_LIST:
      if (value == null) {
        unsetTypesList();
      } else {
        setTypesList((java.util.List<java.util.List<java.lang.Integer>>)value);
      }
      break;

    case SIZE_LIST:
      if (value == null) {
        unsetSizeList();
      } else {
        setSizeList((java.util.List<java.lang.Integer>)value);
      }
      break;

    case IS_ALIGNED:
      if (value == null) {
        unsetIsAligned();
      } else {
        setIsAligned((java.lang.Boolean)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case SESSION_ID:
      return getSessionId();

    case PREFIX_PATHS:
      return getPrefixPaths();

    case MEASUREMENTS_LIST:
      return getMeasurementsList();

    case VALUES_LIST:
      return getValuesList();

    case TIMESTAMPS_LIST:
      return getTimestampsList();

    case TYPES_LIST:
      return getTypesList();

    case SIZE_LIST:
      return getSizeList();

    case IS_ALIGNED:
      return isIsAligned();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case SESSION_ID:
      return isSetSessionId();
    case PREFIX_PATHS:
      return isSetPrefixPaths();
    case MEASUREMENTS_LIST:
      return isSetMeasurementsList();
    case VALUES_LIST:
      return isSetValuesList();
    case TIMESTAMPS_LIST:
      return isSetTimestampsList();
    case TYPES_LIST:
      return isSetTypesList();
    case SIZE_LIST:
      return isSetSizeList();
    case IS_ALIGNED:
      return isSetIsAligned();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TSInsertTabletsReq)
      return this.equals((TSInsertTabletsReq)that);
    return false;
  }

  public boolean equals(TSInsertTabletsReq that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_sessionId = true;
    boolean that_present_sessionId = true;
    if (this_present_sessionId || that_present_sessionId) {
      if (!(this_present_sessionId && that_present_sessionId))
        return false;
      if (this.sessionId != that.sessionId)
        return false;
    }

    boolean this_present_prefixPaths = true && this.isSetPrefixPaths();
    boolean that_present_prefixPaths = true && that.isSetPrefixPaths();
    if (this_present_prefixPaths || that_present_prefixPaths) {
      if (!(this_present_prefixPaths && that_present_prefixPaths))
        return false;
      if (!this.prefixPaths.equals(that.prefixPaths))
        return false;
    }

    boolean this_present_measurementsList = true && this.isSetMeasurementsList();
    boolean that_present_measurementsList = true && that.isSetMeasurementsList();
    if (this_present_measurementsList || that_present_measurementsList) {
      if (!(this_present_measurementsList && that_present_measurementsList))
        return false;
      if (!this.measurementsList.equals(that.measurementsList))
        return false;
    }

    boolean this_present_valuesList = true && this.isSetValuesList();
    boolean that_present_valuesList = true && that.isSetValuesList();
    if (this_present_valuesList || that_present_valuesList) {
      if (!(this_present_valuesList && that_present_valuesList))
        return false;
      if (!this.valuesList.equals(that.valuesList))
        return false;
    }

    boolean this_present_timestampsList = true && this.isSetTimestampsList();
    boolean that_present_timestampsList = true && that.isSetTimestampsList();
    if (this_present_timestampsList || that_present_timestampsList) {
      if (!(this_present_timestampsList && that_present_timestampsList))
        return false;
      if (!this.timestampsList.equals(that.timestampsList))
        return false;
    }

    boolean this_present_typesList = true && this.isSetTypesList();
    boolean that_present_typesList = true && that.isSetTypesList();
    if (this_present_typesList || that_present_typesList) {
      if (!(this_present_typesList && that_present_typesList))
        return false;
      if (!this.typesList.equals(that.typesList))
        return false;
    }

    boolean this_present_sizeList = true && this.isSetSizeList();
    boolean that_present_sizeList = true && that.isSetSizeList();
    if (this_present_sizeList || that_present_sizeList) {
      if (!(this_present_sizeList && that_present_sizeList))
        return false;
      if (!this.sizeList.equals(that.sizeList))
        return false;
    }

    boolean this_present_isAligned = true && this.isSetIsAligned();
    boolean that_present_isAligned = true && that.isSetIsAligned();
    if (this_present_isAligned || that_present_isAligned) {
      if (!(this_present_isAligned && that_present_isAligned))
        return false;
      if (this.isAligned != that.isAligned)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(sessionId);

    hashCode = hashCode * 8191 + ((isSetPrefixPaths()) ? 131071 : 524287);
    if (isSetPrefixPaths())
      hashCode = hashCode * 8191 + prefixPaths.hashCode();

    hashCode = hashCode * 8191 + ((isSetMeasurementsList()) ? 131071 : 524287);
    if (isSetMeasurementsList())
      hashCode = hashCode * 8191 + measurementsList.hashCode();

    hashCode = hashCode * 8191 + ((isSetValuesList()) ? 131071 : 524287);
    if (isSetValuesList())
      hashCode = hashCode * 8191 + valuesList.hashCode();

    hashCode = hashCode * 8191 + ((isSetTimestampsList()) ? 131071 : 524287);
    if (isSetTimestampsList())
      hashCode = hashCode * 8191 + timestampsList.hashCode();

    hashCode = hashCode * 8191 + ((isSetTypesList()) ? 131071 : 524287);
    if (isSetTypesList())
      hashCode = hashCode * 8191 + typesList.hashCode();

    hashCode = hashCode * 8191 + ((isSetSizeList()) ? 131071 : 524287);
    if (isSetSizeList())
      hashCode = hashCode * 8191 + sizeList.hashCode();

    hashCode = hashCode * 8191 + ((isSetIsAligned()) ? 131071 : 524287);
    if (isSetIsAligned())
      hashCode = hashCode * 8191 + ((isAligned) ? 131071 : 524287);

    return hashCode;
  }

  @Override
  public int compareTo(TSInsertTabletsReq other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetSessionId(), other.isSetSessionId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSessionId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sessionId, other.sessionId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPrefixPaths(), other.isSetPrefixPaths());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrefixPaths()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.prefixPaths, other.prefixPaths);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetMeasurementsList(), other.isSetMeasurementsList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMeasurementsList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.measurementsList, other.measurementsList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetValuesList(), other.isSetValuesList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetValuesList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.valuesList, other.valuesList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTimestampsList(), other.isSetTimestampsList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimestampsList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timestampsList, other.timestampsList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTypesList(), other.isSetTypesList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTypesList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.typesList, other.typesList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSizeList(), other.isSetSizeList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSizeList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sizeList, other.sizeList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetIsAligned(), other.isSetIsAligned());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsAligned()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isAligned, other.isAligned);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TSInsertTabletsReq(");
    boolean first = true;

    sb.append("sessionId:");
    sb.append(this.sessionId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("prefixPaths:");
    if (this.prefixPaths == null) {
      sb.append("null");
    } else {
      sb.append(this.prefixPaths);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("measurementsList:");
    if (this.measurementsList == null) {
      sb.append("null");
    } else {
      sb.append(this.measurementsList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("valuesList:");
    if (this.valuesList == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.valuesList, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("timestampsList:");
    if (this.timestampsList == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.timestampsList, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("typesList:");
    if (this.typesList == null) {
      sb.append("null");
    } else {
      sb.append(this.typesList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sizeList:");
    if (this.sizeList == null) {
      sb.append("null");
    } else {
      sb.append(this.sizeList);
    }
    first = false;
    if (isSetIsAligned()) {
      if (!first) sb.append(", ");
      sb.append("isAligned:");
      sb.append(this.isAligned);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'sessionId' because it's a primitive and you chose the non-beans generator.
    if (prefixPaths == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'prefixPaths' was not present! Struct: " + toString());
    }
    if (measurementsList == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'measurementsList' was not present! Struct: " + toString());
    }
    if (valuesList == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'valuesList' was not present! Struct: " + toString());
    }
    if (timestampsList == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'timestampsList' was not present! Struct: " + toString());
    }
    if (typesList == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'typesList' was not present! Struct: " + toString());
    }
    if (sizeList == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'sizeList' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TSInsertTabletsReqStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TSInsertTabletsReqStandardScheme getScheme() {
      return new TSInsertTabletsReqStandardScheme();
    }
  }

  private static class TSInsertTabletsReqStandardScheme extends org.apache.thrift.scheme.StandardScheme<TSInsertTabletsReq> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TSInsertTabletsReq struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SESSION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.sessionId = iprot.readI64();
              struct.setSessionIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PREFIX_PATHS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list214 = iprot.readListBegin();
                struct.prefixPaths = new java.util.ArrayList<java.lang.String>(_list214.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _elem215;
                for (int _i216 = 0; _i216 < _list214.size; ++_i216)
                {
                  _elem215 = iprot.readString();
                  struct.prefixPaths.add(_elem215);
                }
                iprot.readListEnd();
              }
              struct.setPrefixPathsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MEASUREMENTS_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list217 = iprot.readListBegin();
                struct.measurementsList = new java.util.ArrayList<java.util.List<java.lang.String>>(_list217.size);
                @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> _elem218;
                for (int _i219 = 0; _i219 < _list217.size; ++_i219)
                {
                  {
                    org.apache.thrift.protocol.TList _list220 = iprot.readListBegin();
                    _elem218 = new java.util.ArrayList<java.lang.String>(_list220.size);
                    @org.apache.thrift.annotation.Nullable java.lang.String _elem221;
                    for (int _i222 = 0; _i222 < _list220.size; ++_i222)
                    {
                      _elem221 = iprot.readString();
                      _elem218.add(_elem221);
                    }
                    iprot.readListEnd();
                  }
                  struct.measurementsList.add(_elem218);
                }
                iprot.readListEnd();
              }
              struct.setMeasurementsListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // VALUES_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list223 = iprot.readListBegin();
                struct.valuesList = new java.util.ArrayList<java.nio.ByteBuffer>(_list223.size);
                @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer _elem224;
                for (int _i225 = 0; _i225 < _list223.size; ++_i225)
                {
                  _elem224 = iprot.readBinary();
                  struct.valuesList.add(_elem224);
                }
                iprot.readListEnd();
              }
              struct.setValuesListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TIMESTAMPS_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list226 = iprot.readListBegin();
                struct.timestampsList = new java.util.ArrayList<java.nio.ByteBuffer>(_list226.size);
                @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer _elem227;
                for (int _i228 = 0; _i228 < _list226.size; ++_i228)
                {
                  _elem227 = iprot.readBinary();
                  struct.timestampsList.add(_elem227);
                }
                iprot.readListEnd();
              }
              struct.setTimestampsListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // TYPES_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list229 = iprot.readListBegin();
                struct.typesList = new java.util.ArrayList<java.util.List<java.lang.Integer>>(_list229.size);
                @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Integer> _elem230;
                for (int _i231 = 0; _i231 < _list229.size; ++_i231)
                {
                  {
                    org.apache.thrift.protocol.TList _list232 = iprot.readListBegin();
                    _elem230 = new java.util.ArrayList<java.lang.Integer>(_list232.size);
                    int _elem233;
                    for (int _i234 = 0; _i234 < _list232.size; ++_i234)
                    {
                      _elem233 = iprot.readI32();
                      _elem230.add(_elem233);
                    }
                    iprot.readListEnd();
                  }
                  struct.typesList.add(_elem230);
                }
                iprot.readListEnd();
              }
              struct.setTypesListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // SIZE_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list235 = iprot.readListBegin();
                struct.sizeList = new java.util.ArrayList<java.lang.Integer>(_list235.size);
                int _elem236;
                for (int _i237 = 0; _i237 < _list235.size; ++_i237)
                {
                  _elem236 = iprot.readI32();
                  struct.sizeList.add(_elem236);
                }
                iprot.readListEnd();
              }
              struct.setSizeListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // IS_ALIGNED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isAligned = iprot.readBool();
              struct.setIsAlignedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetSessionId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'sessionId' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TSInsertTabletsReq struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(SESSION_ID_FIELD_DESC);
      oprot.writeI64(struct.sessionId);
      oprot.writeFieldEnd();
      if (struct.prefixPaths != null) {
        oprot.writeFieldBegin(PREFIX_PATHS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.prefixPaths.size()));
          for (java.lang.String _iter238 : struct.prefixPaths)
          {
            oprot.writeString(_iter238);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.measurementsList != null) {
        oprot.writeFieldBegin(MEASUREMENTS_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, struct.measurementsList.size()));
          for (java.util.List<java.lang.String> _iter239 : struct.measurementsList)
          {
            {
              oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, _iter239.size()));
              for (java.lang.String _iter240 : _iter239)
              {
                oprot.writeString(_iter240);
              }
              oprot.writeListEnd();
            }
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.valuesList != null) {
        oprot.writeFieldBegin(VALUES_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.valuesList.size()));
          for (java.nio.ByteBuffer _iter241 : struct.valuesList)
          {
            oprot.writeBinary(_iter241);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.timestampsList != null) {
        oprot.writeFieldBegin(TIMESTAMPS_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.timestampsList.size()));
          for (java.nio.ByteBuffer _iter242 : struct.timestampsList)
          {
            oprot.writeBinary(_iter242);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.typesList != null) {
        oprot.writeFieldBegin(TYPES_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, struct.typesList.size()));
          for (java.util.List<java.lang.Integer> _iter243 : struct.typesList)
          {
            {
              oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, _iter243.size()));
              for (int _iter244 : _iter243)
              {
                oprot.writeI32(_iter244);
              }
              oprot.writeListEnd();
            }
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.sizeList != null) {
        oprot.writeFieldBegin(SIZE_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.sizeList.size()));
          for (int _iter245 : struct.sizeList)
          {
            oprot.writeI32(_iter245);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.isSetIsAligned()) {
        oprot.writeFieldBegin(IS_ALIGNED_FIELD_DESC);
        oprot.writeBool(struct.isAligned);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TSInsertTabletsReqTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TSInsertTabletsReqTupleScheme getScheme() {
      return new TSInsertTabletsReqTupleScheme();
    }
  }

  private static class TSInsertTabletsReqTupleScheme extends org.apache.thrift.scheme.TupleScheme<TSInsertTabletsReq> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TSInsertTabletsReq struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeI64(struct.sessionId);
      {
        oprot.writeI32(struct.prefixPaths.size());
        for (java.lang.String _iter246 : struct.prefixPaths)
        {
          oprot.writeString(_iter246);
        }
      }
      {
        oprot.writeI32(struct.measurementsList.size());
        for (java.util.List<java.lang.String> _iter247 : struct.measurementsList)
        {
          {
            oprot.writeI32(_iter247.size());
            for (java.lang.String _iter248 : _iter247)
            {
              oprot.writeString(_iter248);
            }
          }
        }
      }
      {
        oprot.writeI32(struct.valuesList.size());
        for (java.nio.ByteBuffer _iter249 : struct.valuesList)
        {
          oprot.writeBinary(_iter249);
        }
      }
      {
        oprot.writeI32(struct.timestampsList.size());
        for (java.nio.ByteBuffer _iter250 : struct.timestampsList)
        {
          oprot.writeBinary(_iter250);
        }
      }
      {
        oprot.writeI32(struct.typesList.size());
        for (java.util.List<java.lang.Integer> _iter251 : struct.typesList)
        {
          {
            oprot.writeI32(_iter251.size());
            for (int _iter252 : _iter251)
            {
              oprot.writeI32(_iter252);
            }
          }
        }
      }
      {
        oprot.writeI32(struct.sizeList.size());
        for (int _iter253 : struct.sizeList)
        {
          oprot.writeI32(_iter253);
        }
      }
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetIsAligned()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetIsAligned()) {
        oprot.writeBool(struct.isAligned);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TSInsertTabletsReq struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.sessionId = iprot.readI64();
      struct.setSessionIdIsSet(true);
      {
        org.apache.thrift.protocol.TList _list254 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRING);
        struct.prefixPaths = new java.util.ArrayList<java.lang.String>(_list254.size);
        @org.apache.thrift.annotation.Nullable java.lang.String _elem255;
        for (int _i256 = 0; _i256 < _list254.size; ++_i256)
        {
          _elem255 = iprot.readString();
          struct.prefixPaths.add(_elem255);
        }
      }
      struct.setPrefixPathsIsSet(true);
      {
        org.apache.thrift.protocol.TList _list257 = iprot.readListBegin(org.apache.thrift.protocol.TType.LIST);
        struct.measurementsList = new java.util.ArrayList<java.util.List<java.lang.String>>(_list257.size);
        @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> _elem258;
        for (int _i259 = 0; _i259 < _list257.size; ++_i259)
        {
          {
            org.apache.thrift.protocol.TList _list260 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRING);
            _elem258 = new java.util.ArrayList<java.lang.String>(_list260.size);
            @org.apache.thrift.annotation.Nullable java.lang.String _elem261;
            for (int _i262 = 0; _i262 < _list260.size; ++_i262)
            {
              _elem261 = iprot.readString();
              _elem258.add(_elem261);
            }
          }
          struct.measurementsList.add(_elem258);
        }
      }
      struct.setMeasurementsListIsSet(true);
      {
        org.apache.thrift.protocol.TList _list263 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRING);
        struct.valuesList = new java.util.ArrayList<java.nio.ByteBuffer>(_list263.size);
        @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer _elem264;
        for (int _i265 = 0; _i265 < _list263.size; ++_i265)
        {
          _elem264 = iprot.readBinary();
          struct.valuesList.add(_elem264);
        }
      }
      struct.setValuesListIsSet(true);
      {
        org.apache.thrift.protocol.TList _list266 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRING);
        struct.timestampsList = new java.util.ArrayList<java.nio.ByteBuffer>(_list266.size);
        @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer _elem267;
        for (int _i268 = 0; _i268 < _list266.size; ++_i268)
        {
          _elem267 = iprot.readBinary();
          struct.timestampsList.add(_elem267);
        }
      }
      struct.setTimestampsListIsSet(true);
      {
        org.apache.thrift.protocol.TList _list269 = iprot.readListBegin(org.apache.thrift.protocol.TType.LIST);
        struct.typesList = new java.util.ArrayList<java.util.List<java.lang.Integer>>(_list269.size);
        @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Integer> _elem270;
        for (int _i271 = 0; _i271 < _list269.size; ++_i271)
        {
          {
            org.apache.thrift.protocol.TList _list272 = iprot.readListBegin(org.apache.thrift.protocol.TType.I32);
            _elem270 = new java.util.ArrayList<java.lang.Integer>(_list272.size);
            int _elem273;
            for (int _i274 = 0; _i274 < _list272.size; ++_i274)
            {
              _elem273 = iprot.readI32();
              _elem270.add(_elem273);
            }
          }
          struct.typesList.add(_elem270);
        }
      }
      struct.setTypesListIsSet(true);
      {
        org.apache.thrift.protocol.TList _list275 = iprot.readListBegin(org.apache.thrift.protocol.TType.I32);
        struct.sizeList = new java.util.ArrayList<java.lang.Integer>(_list275.size);
        int _elem276;
        for (int _i277 = 0; _i277 < _list275.size; ++_i277)
        {
          _elem276 = iprot.readI32();
          struct.sizeList.add(_elem276);
        }
      }
      struct.setSizeListIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        struct.isAligned = iprot.readBool();
        struct.setIsAlignedIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

