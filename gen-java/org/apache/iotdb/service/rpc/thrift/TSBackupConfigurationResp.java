/**
 * Autogenerated by Thrift Compiler (0.20.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.iotdb.service.rpc.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.20.0)", date = "2025-05-09")
public class TSBackupConfigurationResp implements org.apache.thrift.TBase<TSBackupConfigurationResp, TSBackupConfigurationResp._Fields>, java.io.Serializable, Cloneable, Comparable<TSBackupConfigurationResp> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TSBackupConfigurationResp");

  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField ENABLE_OPERATION_SYNC_FIELD_DESC = new org.apache.thrift.protocol.TField("enableOperationSync", org.apache.thrift.protocol.TType.BOOL, (short)2);
  private static final org.apache.thrift.protocol.TField SECONDARY_ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("secondaryAddress", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField SECONDARY_PORT_FIELD_DESC = new org.apache.thrift.protocol.TField("secondaryPort", org.apache.thrift.protocol.TType.I32, (short)4);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TSBackupConfigurationRespStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TSBackupConfigurationRespTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable org.apache.iotdb.common.rpc.thrift.TSStatus status; // required
  public boolean enableOperationSync; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String secondaryAddress; // optional
  public int secondaryPort; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    STATUS((short)1, "status"),
    ENABLE_OPERATION_SYNC((short)2, "enableOperationSync"),
    SECONDARY_ADDRESS((short)3, "secondaryAddress"),
    SECONDARY_PORT((short)4, "secondaryPort");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // STATUS
          return STATUS;
        case 2: // ENABLE_OPERATION_SYNC
          return ENABLE_OPERATION_SYNC;
        case 3: // SECONDARY_ADDRESS
          return SECONDARY_ADDRESS;
        case 4: // SECONDARY_PORT
          return SECONDARY_PORT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ENABLEOPERATIONSYNC_ISSET_ID = 0;
  private static final int __SECONDARYPORT_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.ENABLE_OPERATION_SYNC,_Fields.SECONDARY_ADDRESS,_Fields.SECONDARY_PORT};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.iotdb.common.rpc.thrift.TSStatus.class)));
    tmpMap.put(_Fields.ENABLE_OPERATION_SYNC, new org.apache.thrift.meta_data.FieldMetaData("enableOperationSync", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.SECONDARY_ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("secondaryAddress", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SECONDARY_PORT, new org.apache.thrift.meta_data.FieldMetaData("secondaryPort", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TSBackupConfigurationResp.class, metaDataMap);
  }

  public TSBackupConfigurationResp() {
  }

  public TSBackupConfigurationResp(
    org.apache.iotdb.common.rpc.thrift.TSStatus status)
  {
    this();
    this.status = status;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TSBackupConfigurationResp(TSBackupConfigurationResp other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetStatus()) {
      this.status = new org.apache.iotdb.common.rpc.thrift.TSStatus(other.status);
    }
    this.enableOperationSync = other.enableOperationSync;
    if (other.isSetSecondaryAddress()) {
      this.secondaryAddress = other.secondaryAddress;
    }
    this.secondaryPort = other.secondaryPort;
  }

  @Override
  public TSBackupConfigurationResp deepCopy() {
    return new TSBackupConfigurationResp(this);
  }

  @Override
  public void clear() {
    this.status = null;
    setEnableOperationSyncIsSet(false);
    this.enableOperationSync = false;
    this.secondaryAddress = null;
    setSecondaryPortIsSet(false);
    this.secondaryPort = 0;
  }

  @org.apache.thrift.annotation.Nullable
  public org.apache.iotdb.common.rpc.thrift.TSStatus getStatus() {
    return this.status;
  }

  public TSBackupConfigurationResp setStatus(@org.apache.thrift.annotation.Nullable org.apache.iotdb.common.rpc.thrift.TSStatus status) {
    this.status = status;
    return this;
  }

  public void unsetStatus() {
    this.status = null;
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return this.status != null;
  }

  public void setStatusIsSet(boolean value) {
    if (!value) {
      this.status = null;
    }
  }

  public boolean isEnableOperationSync() {
    return this.enableOperationSync;
  }

  public TSBackupConfigurationResp setEnableOperationSync(boolean enableOperationSync) {
    this.enableOperationSync = enableOperationSync;
    setEnableOperationSyncIsSet(true);
    return this;
  }

  public void unsetEnableOperationSync() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ENABLEOPERATIONSYNC_ISSET_ID);
  }

  /** Returns true if field enableOperationSync is set (has been assigned a value) and false otherwise */
  public boolean isSetEnableOperationSync() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ENABLEOPERATIONSYNC_ISSET_ID);
  }

  public void setEnableOperationSyncIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ENABLEOPERATIONSYNC_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getSecondaryAddress() {
    return this.secondaryAddress;
  }

  public TSBackupConfigurationResp setSecondaryAddress(@org.apache.thrift.annotation.Nullable java.lang.String secondaryAddress) {
    this.secondaryAddress = secondaryAddress;
    return this;
  }

  public void unsetSecondaryAddress() {
    this.secondaryAddress = null;
  }

  /** Returns true if field secondaryAddress is set (has been assigned a value) and false otherwise */
  public boolean isSetSecondaryAddress() {
    return this.secondaryAddress != null;
  }

  public void setSecondaryAddressIsSet(boolean value) {
    if (!value) {
      this.secondaryAddress = null;
    }
  }

  public int getSecondaryPort() {
    return this.secondaryPort;
  }

  public TSBackupConfigurationResp setSecondaryPort(int secondaryPort) {
    this.secondaryPort = secondaryPort;
    setSecondaryPortIsSet(true);
    return this;
  }

  public void unsetSecondaryPort() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SECONDARYPORT_ISSET_ID);
  }

  /** Returns true if field secondaryPort is set (has been assigned a value) and false otherwise */
  public boolean isSetSecondaryPort() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SECONDARYPORT_ISSET_ID);
  }

  public void setSecondaryPortIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SECONDARYPORT_ISSET_ID, value);
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((org.apache.iotdb.common.rpc.thrift.TSStatus)value);
      }
      break;

    case ENABLE_OPERATION_SYNC:
      if (value == null) {
        unsetEnableOperationSync();
      } else {
        setEnableOperationSync((java.lang.Boolean)value);
      }
      break;

    case SECONDARY_ADDRESS:
      if (value == null) {
        unsetSecondaryAddress();
      } else {
        setSecondaryAddress((java.lang.String)value);
      }
      break;

    case SECONDARY_PORT:
      if (value == null) {
        unsetSecondaryPort();
      } else {
        setSecondaryPort((java.lang.Integer)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case STATUS:
      return getStatus();

    case ENABLE_OPERATION_SYNC:
      return isEnableOperationSync();

    case SECONDARY_ADDRESS:
      return getSecondaryAddress();

    case SECONDARY_PORT:
      return getSecondaryPort();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case STATUS:
      return isSetStatus();
    case ENABLE_OPERATION_SYNC:
      return isSetEnableOperationSync();
    case SECONDARY_ADDRESS:
      return isSetSecondaryAddress();
    case SECONDARY_PORT:
      return isSetSecondaryPort();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TSBackupConfigurationResp)
      return this.equals((TSBackupConfigurationResp)that);
    return false;
  }

  public boolean equals(TSBackupConfigurationResp that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_status = true && this.isSetStatus();
    boolean that_present_status = true && that.isSetStatus();
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (!this.status.equals(that.status))
        return false;
    }

    boolean this_present_enableOperationSync = true && this.isSetEnableOperationSync();
    boolean that_present_enableOperationSync = true && that.isSetEnableOperationSync();
    if (this_present_enableOperationSync || that_present_enableOperationSync) {
      if (!(this_present_enableOperationSync && that_present_enableOperationSync))
        return false;
      if (this.enableOperationSync != that.enableOperationSync)
        return false;
    }

    boolean this_present_secondaryAddress = true && this.isSetSecondaryAddress();
    boolean that_present_secondaryAddress = true && that.isSetSecondaryAddress();
    if (this_present_secondaryAddress || that_present_secondaryAddress) {
      if (!(this_present_secondaryAddress && that_present_secondaryAddress))
        return false;
      if (!this.secondaryAddress.equals(that.secondaryAddress))
        return false;
    }

    boolean this_present_secondaryPort = true && this.isSetSecondaryPort();
    boolean that_present_secondaryPort = true && that.isSetSecondaryPort();
    if (this_present_secondaryPort || that_present_secondaryPort) {
      if (!(this_present_secondaryPort && that_present_secondaryPort))
        return false;
      if (this.secondaryPort != that.secondaryPort)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetStatus()) ? 131071 : 524287);
    if (isSetStatus())
      hashCode = hashCode * 8191 + status.hashCode();

    hashCode = hashCode * 8191 + ((isSetEnableOperationSync()) ? 131071 : 524287);
    if (isSetEnableOperationSync())
      hashCode = hashCode * 8191 + ((enableOperationSync) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetSecondaryAddress()) ? 131071 : 524287);
    if (isSetSecondaryAddress())
      hashCode = hashCode * 8191 + secondaryAddress.hashCode();

    hashCode = hashCode * 8191 + ((isSetSecondaryPort()) ? 131071 : 524287);
    if (isSetSecondaryPort())
      hashCode = hashCode * 8191 + secondaryPort;

    return hashCode;
  }

  @Override
  public int compareTo(TSBackupConfigurationResp other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetStatus(), other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetEnableOperationSync(), other.isSetEnableOperationSync());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnableOperationSync()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.enableOperationSync, other.enableOperationSync);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSecondaryAddress(), other.isSetSecondaryAddress());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSecondaryAddress()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.secondaryAddress, other.secondaryAddress);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSecondaryPort(), other.isSetSecondaryPort());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSecondaryPort()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.secondaryPort, other.secondaryPort);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TSBackupConfigurationResp(");
    boolean first = true;

    sb.append("status:");
    if (this.status == null) {
      sb.append("null");
    } else {
      sb.append(this.status);
    }
    first = false;
    if (isSetEnableOperationSync()) {
      if (!first) sb.append(", ");
      sb.append("enableOperationSync:");
      sb.append(this.enableOperationSync);
      first = false;
    }
    if (isSetSecondaryAddress()) {
      if (!first) sb.append(", ");
      sb.append("secondaryAddress:");
      if (this.secondaryAddress == null) {
        sb.append("null");
      } else {
        sb.append(this.secondaryAddress);
      }
      first = false;
    }
    if (isSetSecondaryPort()) {
      if (!first) sb.append(", ");
      sb.append("secondaryPort:");
      sb.append(this.secondaryPort);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (status == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'status' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (status != null) {
      status.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TSBackupConfigurationRespStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TSBackupConfigurationRespStandardScheme getScheme() {
      return new TSBackupConfigurationRespStandardScheme();
    }
  }

  private static class TSBackupConfigurationRespStandardScheme extends org.apache.thrift.scheme.StandardScheme<TSBackupConfigurationResp> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TSBackupConfigurationResp struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.status = new org.apache.iotdb.common.rpc.thrift.TSStatus();
              struct.status.read(iprot);
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ENABLE_OPERATION_SYNC
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.enableOperationSync = iprot.readBool();
              struct.setEnableOperationSyncIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SECONDARY_ADDRESS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.secondaryAddress = iprot.readString();
              struct.setSecondaryAddressIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SECONDARY_PORT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.secondaryPort = iprot.readI32();
              struct.setSecondaryPortIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TSBackupConfigurationResp struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.status != null) {
        oprot.writeFieldBegin(STATUS_FIELD_DESC);
        struct.status.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.isSetEnableOperationSync()) {
        oprot.writeFieldBegin(ENABLE_OPERATION_SYNC_FIELD_DESC);
        oprot.writeBool(struct.enableOperationSync);
        oprot.writeFieldEnd();
      }
      if (struct.secondaryAddress != null) {
        if (struct.isSetSecondaryAddress()) {
          oprot.writeFieldBegin(SECONDARY_ADDRESS_FIELD_DESC);
          oprot.writeString(struct.secondaryAddress);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetSecondaryPort()) {
        oprot.writeFieldBegin(SECONDARY_PORT_FIELD_DESC);
        oprot.writeI32(struct.secondaryPort);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TSBackupConfigurationRespTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TSBackupConfigurationRespTupleScheme getScheme() {
      return new TSBackupConfigurationRespTupleScheme();
    }
  }

  private static class TSBackupConfigurationRespTupleScheme extends org.apache.thrift.scheme.TupleScheme<TSBackupConfigurationResp> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TSBackupConfigurationResp struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.status.write(oprot);
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetEnableOperationSync()) {
        optionals.set(0);
      }
      if (struct.isSetSecondaryAddress()) {
        optionals.set(1);
      }
      if (struct.isSetSecondaryPort()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetEnableOperationSync()) {
        oprot.writeBool(struct.enableOperationSync);
      }
      if (struct.isSetSecondaryAddress()) {
        oprot.writeString(struct.secondaryAddress);
      }
      if (struct.isSetSecondaryPort()) {
        oprot.writeI32(struct.secondaryPort);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TSBackupConfigurationResp struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.status = new org.apache.iotdb.common.rpc.thrift.TSStatus();
      struct.status.read(iprot);
      struct.setStatusIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.enableOperationSync = iprot.readBool();
        struct.setEnableOperationSyncIsSet(true);
      }
      if (incoming.get(1)) {
        struct.secondaryAddress = iprot.readString();
        struct.setSecondaryAddressIsSet(true);
      }
      if (incoming.get(2)) {
        struct.secondaryPort = iprot.readI32();
        struct.setSecondaryPortIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

