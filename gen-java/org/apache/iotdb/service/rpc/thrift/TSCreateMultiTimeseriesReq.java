/**
 * Autogenerated by Thrift Compiler (0.20.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.iotdb.service.rpc.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.20.0)", date = "2025-05-09")
public class TSCreateMultiTimeseriesReq implements org.apache.thrift.TBase<TSCreateMultiTimeseriesReq, TSCreateMultiTimeseriesReq._Fields>, java.io.Serializable, Cloneable, Comparable<TSCreateMultiTimeseriesReq> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TSCreateMultiTimeseriesReq");

  private static final org.apache.thrift.protocol.TField SESSION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sessionId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField PATHS_FIELD_DESC = new org.apache.thrift.protocol.TField("paths", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField DATA_TYPES_FIELD_DESC = new org.apache.thrift.protocol.TField("dataTypes", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField ENCODINGS_FIELD_DESC = new org.apache.thrift.protocol.TField("encodings", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField COMPRESSORS_FIELD_DESC = new org.apache.thrift.protocol.TField("compressors", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField PROPS_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("propsList", org.apache.thrift.protocol.TType.LIST, (short)6);
  private static final org.apache.thrift.protocol.TField TAGS_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("tagsList", org.apache.thrift.protocol.TType.LIST, (short)7);
  private static final org.apache.thrift.protocol.TField ATTRIBUTES_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("attributesList", org.apache.thrift.protocol.TType.LIST, (short)8);
  private static final org.apache.thrift.protocol.TField MEASUREMENT_ALIAS_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("measurementAliasList", org.apache.thrift.protocol.TType.LIST, (short)9);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TSCreateMultiTimeseriesReqStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TSCreateMultiTimeseriesReqTupleSchemeFactory();

  public long sessionId; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> paths; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Integer> dataTypes; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Integer> encodings; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Integer> compressors; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<java.util.Map<java.lang.String,java.lang.String>> propsList; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<java.util.Map<java.lang.String,java.lang.String>> tagsList; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<java.util.Map<java.lang.String,java.lang.String>> attributesList; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> measurementAliasList; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SESSION_ID((short)1, "sessionId"),
    PATHS((short)2, "paths"),
    DATA_TYPES((short)3, "dataTypes"),
    ENCODINGS((short)4, "encodings"),
    COMPRESSORS((short)5, "compressors"),
    PROPS_LIST((short)6, "propsList"),
    TAGS_LIST((short)7, "tagsList"),
    ATTRIBUTES_LIST((short)8, "attributesList"),
    MEASUREMENT_ALIAS_LIST((short)9, "measurementAliasList");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SESSION_ID
          return SESSION_ID;
        case 2: // PATHS
          return PATHS;
        case 3: // DATA_TYPES
          return DATA_TYPES;
        case 4: // ENCODINGS
          return ENCODINGS;
        case 5: // COMPRESSORS
          return COMPRESSORS;
        case 6: // PROPS_LIST
          return PROPS_LIST;
        case 7: // TAGS_LIST
          return TAGS_LIST;
        case 8: // ATTRIBUTES_LIST
          return ATTRIBUTES_LIST;
        case 9: // MEASUREMENT_ALIAS_LIST
          return MEASUREMENT_ALIAS_LIST;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SESSIONID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.PROPS_LIST,_Fields.TAGS_LIST,_Fields.ATTRIBUTES_LIST,_Fields.MEASUREMENT_ALIAS_LIST};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SESSION_ID, new org.apache.thrift.meta_data.FieldMetaData("sessionId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.PATHS, new org.apache.thrift.meta_data.FieldMetaData("paths", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.DATA_TYPES, new org.apache.thrift.meta_data.FieldMetaData("dataTypes", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.ENCODINGS, new org.apache.thrift.meta_data.FieldMetaData("encodings", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.COMPRESSORS, new org.apache.thrift.meta_data.FieldMetaData("compressors", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.PROPS_LIST, new org.apache.thrift.meta_data.FieldMetaData("propsList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)))));
    tmpMap.put(_Fields.TAGS_LIST, new org.apache.thrift.meta_data.FieldMetaData("tagsList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)))));
    tmpMap.put(_Fields.ATTRIBUTES_LIST, new org.apache.thrift.meta_data.FieldMetaData("attributesList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)))));
    tmpMap.put(_Fields.MEASUREMENT_ALIAS_LIST, new org.apache.thrift.meta_data.FieldMetaData("measurementAliasList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TSCreateMultiTimeseriesReq.class, metaDataMap);
  }

  public TSCreateMultiTimeseriesReq() {
  }

  public TSCreateMultiTimeseriesReq(
    long sessionId,
    java.util.List<java.lang.String> paths,
    java.util.List<java.lang.Integer> dataTypes,
    java.util.List<java.lang.Integer> encodings,
    java.util.List<java.lang.Integer> compressors)
  {
    this();
    this.sessionId = sessionId;
    setSessionIdIsSet(true);
    this.paths = paths;
    this.dataTypes = dataTypes;
    this.encodings = encodings;
    this.compressors = compressors;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TSCreateMultiTimeseriesReq(TSCreateMultiTimeseriesReq other) {
    __isset_bitfield = other.__isset_bitfield;
    this.sessionId = other.sessionId;
    if (other.isSetPaths()) {
      java.util.List<java.lang.String> __this__paths = new java.util.ArrayList<java.lang.String>(other.paths);
      this.paths = __this__paths;
    }
    if (other.isSetDataTypes()) {
      java.util.List<java.lang.Integer> __this__dataTypes = new java.util.ArrayList<java.lang.Integer>(other.dataTypes);
      this.dataTypes = __this__dataTypes;
    }
    if (other.isSetEncodings()) {
      java.util.List<java.lang.Integer> __this__encodings = new java.util.ArrayList<java.lang.Integer>(other.encodings);
      this.encodings = __this__encodings;
    }
    if (other.isSetCompressors()) {
      java.util.List<java.lang.Integer> __this__compressors = new java.util.ArrayList<java.lang.Integer>(other.compressors);
      this.compressors = __this__compressors;
    }
    if (other.isSetPropsList()) {
      java.util.List<java.util.Map<java.lang.String,java.lang.String>> __this__propsList = new java.util.ArrayList<java.util.Map<java.lang.String,java.lang.String>>(other.propsList.size());
      for (java.util.Map<java.lang.String,java.lang.String> other_element : other.propsList) {
        java.util.Map<java.lang.String,java.lang.String> __this__propsList_copy = new java.util.HashMap<java.lang.String,java.lang.String>(other_element);
        __this__propsList.add(__this__propsList_copy);
      }
      this.propsList = __this__propsList;
    }
    if (other.isSetTagsList()) {
      java.util.List<java.util.Map<java.lang.String,java.lang.String>> __this__tagsList = new java.util.ArrayList<java.util.Map<java.lang.String,java.lang.String>>(other.tagsList.size());
      for (java.util.Map<java.lang.String,java.lang.String> other_element : other.tagsList) {
        java.util.Map<java.lang.String,java.lang.String> __this__tagsList_copy = new java.util.HashMap<java.lang.String,java.lang.String>(other_element);
        __this__tagsList.add(__this__tagsList_copy);
      }
      this.tagsList = __this__tagsList;
    }
    if (other.isSetAttributesList()) {
      java.util.List<java.util.Map<java.lang.String,java.lang.String>> __this__attributesList = new java.util.ArrayList<java.util.Map<java.lang.String,java.lang.String>>(other.attributesList.size());
      for (java.util.Map<java.lang.String,java.lang.String> other_element : other.attributesList) {
        java.util.Map<java.lang.String,java.lang.String> __this__attributesList_copy = new java.util.HashMap<java.lang.String,java.lang.String>(other_element);
        __this__attributesList.add(__this__attributesList_copy);
      }
      this.attributesList = __this__attributesList;
    }
    if (other.isSetMeasurementAliasList()) {
      java.util.List<java.lang.String> __this__measurementAliasList = new java.util.ArrayList<java.lang.String>(other.measurementAliasList);
      this.measurementAliasList = __this__measurementAliasList;
    }
  }

  @Override
  public TSCreateMultiTimeseriesReq deepCopy() {
    return new TSCreateMultiTimeseriesReq(this);
  }

  @Override
  public void clear() {
    setSessionIdIsSet(false);
    this.sessionId = 0;
    this.paths = null;
    this.dataTypes = null;
    this.encodings = null;
    this.compressors = null;
    this.propsList = null;
    this.tagsList = null;
    this.attributesList = null;
    this.measurementAliasList = null;
  }

  public long getSessionId() {
    return this.sessionId;
  }

  public TSCreateMultiTimeseriesReq setSessionId(long sessionId) {
    this.sessionId = sessionId;
    setSessionIdIsSet(true);
    return this;
  }

  public void unsetSessionId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SESSIONID_ISSET_ID);
  }

  /** Returns true if field sessionId is set (has been assigned a value) and false otherwise */
  public boolean isSetSessionId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SESSIONID_ISSET_ID);
  }

  public void setSessionIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SESSIONID_ISSET_ID, value);
  }

  public int getPathsSize() {
    return (this.paths == null) ? 0 : this.paths.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.String> getPathsIterator() {
    return (this.paths == null) ? null : this.paths.iterator();
  }

  public void addToPaths(java.lang.String elem) {
    if (this.paths == null) {
      this.paths = new java.util.ArrayList<java.lang.String>();
    }
    this.paths.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.String> getPaths() {
    return this.paths;
  }

  public TSCreateMultiTimeseriesReq setPaths(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> paths) {
    this.paths = paths;
    return this;
  }

  public void unsetPaths() {
    this.paths = null;
  }

  /** Returns true if field paths is set (has been assigned a value) and false otherwise */
  public boolean isSetPaths() {
    return this.paths != null;
  }

  public void setPathsIsSet(boolean value) {
    if (!value) {
      this.paths = null;
    }
  }

  public int getDataTypesSize() {
    return (this.dataTypes == null) ? 0 : this.dataTypes.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.Integer> getDataTypesIterator() {
    return (this.dataTypes == null) ? null : this.dataTypes.iterator();
  }

  public void addToDataTypes(int elem) {
    if (this.dataTypes == null) {
      this.dataTypes = new java.util.ArrayList<java.lang.Integer>();
    }
    this.dataTypes.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.Integer> getDataTypes() {
    return this.dataTypes;
  }

  public TSCreateMultiTimeseriesReq setDataTypes(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Integer> dataTypes) {
    this.dataTypes = dataTypes;
    return this;
  }

  public void unsetDataTypes() {
    this.dataTypes = null;
  }

  /** Returns true if field dataTypes is set (has been assigned a value) and false otherwise */
  public boolean isSetDataTypes() {
    return this.dataTypes != null;
  }

  public void setDataTypesIsSet(boolean value) {
    if (!value) {
      this.dataTypes = null;
    }
  }

  public int getEncodingsSize() {
    return (this.encodings == null) ? 0 : this.encodings.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.Integer> getEncodingsIterator() {
    return (this.encodings == null) ? null : this.encodings.iterator();
  }

  public void addToEncodings(int elem) {
    if (this.encodings == null) {
      this.encodings = new java.util.ArrayList<java.lang.Integer>();
    }
    this.encodings.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.Integer> getEncodings() {
    return this.encodings;
  }

  public TSCreateMultiTimeseriesReq setEncodings(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Integer> encodings) {
    this.encodings = encodings;
    return this;
  }

  public void unsetEncodings() {
    this.encodings = null;
  }

  /** Returns true if field encodings is set (has been assigned a value) and false otherwise */
  public boolean isSetEncodings() {
    return this.encodings != null;
  }

  public void setEncodingsIsSet(boolean value) {
    if (!value) {
      this.encodings = null;
    }
  }

  public int getCompressorsSize() {
    return (this.compressors == null) ? 0 : this.compressors.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.Integer> getCompressorsIterator() {
    return (this.compressors == null) ? null : this.compressors.iterator();
  }

  public void addToCompressors(int elem) {
    if (this.compressors == null) {
      this.compressors = new java.util.ArrayList<java.lang.Integer>();
    }
    this.compressors.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.Integer> getCompressors() {
    return this.compressors;
  }

  public TSCreateMultiTimeseriesReq setCompressors(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Integer> compressors) {
    this.compressors = compressors;
    return this;
  }

  public void unsetCompressors() {
    this.compressors = null;
  }

  /** Returns true if field compressors is set (has been assigned a value) and false otherwise */
  public boolean isSetCompressors() {
    return this.compressors != null;
  }

  public void setCompressorsIsSet(boolean value) {
    if (!value) {
      this.compressors = null;
    }
  }

  public int getPropsListSize() {
    return (this.propsList == null) ? 0 : this.propsList.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.util.Map<java.lang.String,java.lang.String>> getPropsListIterator() {
    return (this.propsList == null) ? null : this.propsList.iterator();
  }

  public void addToPropsList(java.util.Map<java.lang.String,java.lang.String> elem) {
    if (this.propsList == null) {
      this.propsList = new java.util.ArrayList<java.util.Map<java.lang.String,java.lang.String>>();
    }
    this.propsList.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.util.Map<java.lang.String,java.lang.String>> getPropsList() {
    return this.propsList;
  }

  public TSCreateMultiTimeseriesReq setPropsList(@org.apache.thrift.annotation.Nullable java.util.List<java.util.Map<java.lang.String,java.lang.String>> propsList) {
    this.propsList = propsList;
    return this;
  }

  public void unsetPropsList() {
    this.propsList = null;
  }

  /** Returns true if field propsList is set (has been assigned a value) and false otherwise */
  public boolean isSetPropsList() {
    return this.propsList != null;
  }

  public void setPropsListIsSet(boolean value) {
    if (!value) {
      this.propsList = null;
    }
  }

  public int getTagsListSize() {
    return (this.tagsList == null) ? 0 : this.tagsList.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.util.Map<java.lang.String,java.lang.String>> getTagsListIterator() {
    return (this.tagsList == null) ? null : this.tagsList.iterator();
  }

  public void addToTagsList(java.util.Map<java.lang.String,java.lang.String> elem) {
    if (this.tagsList == null) {
      this.tagsList = new java.util.ArrayList<java.util.Map<java.lang.String,java.lang.String>>();
    }
    this.tagsList.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.util.Map<java.lang.String,java.lang.String>> getTagsList() {
    return this.tagsList;
  }

  public TSCreateMultiTimeseriesReq setTagsList(@org.apache.thrift.annotation.Nullable java.util.List<java.util.Map<java.lang.String,java.lang.String>> tagsList) {
    this.tagsList = tagsList;
    return this;
  }

  public void unsetTagsList() {
    this.tagsList = null;
  }

  /** Returns true if field tagsList is set (has been assigned a value) and false otherwise */
  public boolean isSetTagsList() {
    return this.tagsList != null;
  }

  public void setTagsListIsSet(boolean value) {
    if (!value) {
      this.tagsList = null;
    }
  }

  public int getAttributesListSize() {
    return (this.attributesList == null) ? 0 : this.attributesList.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.util.Map<java.lang.String,java.lang.String>> getAttributesListIterator() {
    return (this.attributesList == null) ? null : this.attributesList.iterator();
  }

  public void addToAttributesList(java.util.Map<java.lang.String,java.lang.String> elem) {
    if (this.attributesList == null) {
      this.attributesList = new java.util.ArrayList<java.util.Map<java.lang.String,java.lang.String>>();
    }
    this.attributesList.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.util.Map<java.lang.String,java.lang.String>> getAttributesList() {
    return this.attributesList;
  }

  public TSCreateMultiTimeseriesReq setAttributesList(@org.apache.thrift.annotation.Nullable java.util.List<java.util.Map<java.lang.String,java.lang.String>> attributesList) {
    this.attributesList = attributesList;
    return this;
  }

  public void unsetAttributesList() {
    this.attributesList = null;
  }

  /** Returns true if field attributesList is set (has been assigned a value) and false otherwise */
  public boolean isSetAttributesList() {
    return this.attributesList != null;
  }

  public void setAttributesListIsSet(boolean value) {
    if (!value) {
      this.attributesList = null;
    }
  }

  public int getMeasurementAliasListSize() {
    return (this.measurementAliasList == null) ? 0 : this.measurementAliasList.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.String> getMeasurementAliasListIterator() {
    return (this.measurementAliasList == null) ? null : this.measurementAliasList.iterator();
  }

  public void addToMeasurementAliasList(java.lang.String elem) {
    if (this.measurementAliasList == null) {
      this.measurementAliasList = new java.util.ArrayList<java.lang.String>();
    }
    this.measurementAliasList.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.String> getMeasurementAliasList() {
    return this.measurementAliasList;
  }

  public TSCreateMultiTimeseriesReq setMeasurementAliasList(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> measurementAliasList) {
    this.measurementAliasList = measurementAliasList;
    return this;
  }

  public void unsetMeasurementAliasList() {
    this.measurementAliasList = null;
  }

  /** Returns true if field measurementAliasList is set (has been assigned a value) and false otherwise */
  public boolean isSetMeasurementAliasList() {
    return this.measurementAliasList != null;
  }

  public void setMeasurementAliasListIsSet(boolean value) {
    if (!value) {
      this.measurementAliasList = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case SESSION_ID:
      if (value == null) {
        unsetSessionId();
      } else {
        setSessionId((java.lang.Long)value);
      }
      break;

    case PATHS:
      if (value == null) {
        unsetPaths();
      } else {
        setPaths((java.util.List<java.lang.String>)value);
      }
      break;

    case DATA_TYPES:
      if (value == null) {
        unsetDataTypes();
      } else {
        setDataTypes((java.util.List<java.lang.Integer>)value);
      }
      break;

    case ENCODINGS:
      if (value == null) {
        unsetEncodings();
      } else {
        setEncodings((java.util.List<java.lang.Integer>)value);
      }
      break;

    case COMPRESSORS:
      if (value == null) {
        unsetCompressors();
      } else {
        setCompressors((java.util.List<java.lang.Integer>)value);
      }
      break;

    case PROPS_LIST:
      if (value == null) {
        unsetPropsList();
      } else {
        setPropsList((java.util.List<java.util.Map<java.lang.String,java.lang.String>>)value);
      }
      break;

    case TAGS_LIST:
      if (value == null) {
        unsetTagsList();
      } else {
        setTagsList((java.util.List<java.util.Map<java.lang.String,java.lang.String>>)value);
      }
      break;

    case ATTRIBUTES_LIST:
      if (value == null) {
        unsetAttributesList();
      } else {
        setAttributesList((java.util.List<java.util.Map<java.lang.String,java.lang.String>>)value);
      }
      break;

    case MEASUREMENT_ALIAS_LIST:
      if (value == null) {
        unsetMeasurementAliasList();
      } else {
        setMeasurementAliasList((java.util.List<java.lang.String>)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case SESSION_ID:
      return getSessionId();

    case PATHS:
      return getPaths();

    case DATA_TYPES:
      return getDataTypes();

    case ENCODINGS:
      return getEncodings();

    case COMPRESSORS:
      return getCompressors();

    case PROPS_LIST:
      return getPropsList();

    case TAGS_LIST:
      return getTagsList();

    case ATTRIBUTES_LIST:
      return getAttributesList();

    case MEASUREMENT_ALIAS_LIST:
      return getMeasurementAliasList();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case SESSION_ID:
      return isSetSessionId();
    case PATHS:
      return isSetPaths();
    case DATA_TYPES:
      return isSetDataTypes();
    case ENCODINGS:
      return isSetEncodings();
    case COMPRESSORS:
      return isSetCompressors();
    case PROPS_LIST:
      return isSetPropsList();
    case TAGS_LIST:
      return isSetTagsList();
    case ATTRIBUTES_LIST:
      return isSetAttributesList();
    case MEASUREMENT_ALIAS_LIST:
      return isSetMeasurementAliasList();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TSCreateMultiTimeseriesReq)
      return this.equals((TSCreateMultiTimeseriesReq)that);
    return false;
  }

  public boolean equals(TSCreateMultiTimeseriesReq that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_sessionId = true;
    boolean that_present_sessionId = true;
    if (this_present_sessionId || that_present_sessionId) {
      if (!(this_present_sessionId && that_present_sessionId))
        return false;
      if (this.sessionId != that.sessionId)
        return false;
    }

    boolean this_present_paths = true && this.isSetPaths();
    boolean that_present_paths = true && that.isSetPaths();
    if (this_present_paths || that_present_paths) {
      if (!(this_present_paths && that_present_paths))
        return false;
      if (!this.paths.equals(that.paths))
        return false;
    }

    boolean this_present_dataTypes = true && this.isSetDataTypes();
    boolean that_present_dataTypes = true && that.isSetDataTypes();
    if (this_present_dataTypes || that_present_dataTypes) {
      if (!(this_present_dataTypes && that_present_dataTypes))
        return false;
      if (!this.dataTypes.equals(that.dataTypes))
        return false;
    }

    boolean this_present_encodings = true && this.isSetEncodings();
    boolean that_present_encodings = true && that.isSetEncodings();
    if (this_present_encodings || that_present_encodings) {
      if (!(this_present_encodings && that_present_encodings))
        return false;
      if (!this.encodings.equals(that.encodings))
        return false;
    }

    boolean this_present_compressors = true && this.isSetCompressors();
    boolean that_present_compressors = true && that.isSetCompressors();
    if (this_present_compressors || that_present_compressors) {
      if (!(this_present_compressors && that_present_compressors))
        return false;
      if (!this.compressors.equals(that.compressors))
        return false;
    }

    boolean this_present_propsList = true && this.isSetPropsList();
    boolean that_present_propsList = true && that.isSetPropsList();
    if (this_present_propsList || that_present_propsList) {
      if (!(this_present_propsList && that_present_propsList))
        return false;
      if (!this.propsList.equals(that.propsList))
        return false;
    }

    boolean this_present_tagsList = true && this.isSetTagsList();
    boolean that_present_tagsList = true && that.isSetTagsList();
    if (this_present_tagsList || that_present_tagsList) {
      if (!(this_present_tagsList && that_present_tagsList))
        return false;
      if (!this.tagsList.equals(that.tagsList))
        return false;
    }

    boolean this_present_attributesList = true && this.isSetAttributesList();
    boolean that_present_attributesList = true && that.isSetAttributesList();
    if (this_present_attributesList || that_present_attributesList) {
      if (!(this_present_attributesList && that_present_attributesList))
        return false;
      if (!this.attributesList.equals(that.attributesList))
        return false;
    }

    boolean this_present_measurementAliasList = true && this.isSetMeasurementAliasList();
    boolean that_present_measurementAliasList = true && that.isSetMeasurementAliasList();
    if (this_present_measurementAliasList || that_present_measurementAliasList) {
      if (!(this_present_measurementAliasList && that_present_measurementAliasList))
        return false;
      if (!this.measurementAliasList.equals(that.measurementAliasList))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(sessionId);

    hashCode = hashCode * 8191 + ((isSetPaths()) ? 131071 : 524287);
    if (isSetPaths())
      hashCode = hashCode * 8191 + paths.hashCode();

    hashCode = hashCode * 8191 + ((isSetDataTypes()) ? 131071 : 524287);
    if (isSetDataTypes())
      hashCode = hashCode * 8191 + dataTypes.hashCode();

    hashCode = hashCode * 8191 + ((isSetEncodings()) ? 131071 : 524287);
    if (isSetEncodings())
      hashCode = hashCode * 8191 + encodings.hashCode();

    hashCode = hashCode * 8191 + ((isSetCompressors()) ? 131071 : 524287);
    if (isSetCompressors())
      hashCode = hashCode * 8191 + compressors.hashCode();

    hashCode = hashCode * 8191 + ((isSetPropsList()) ? 131071 : 524287);
    if (isSetPropsList())
      hashCode = hashCode * 8191 + propsList.hashCode();

    hashCode = hashCode * 8191 + ((isSetTagsList()) ? 131071 : 524287);
    if (isSetTagsList())
      hashCode = hashCode * 8191 + tagsList.hashCode();

    hashCode = hashCode * 8191 + ((isSetAttributesList()) ? 131071 : 524287);
    if (isSetAttributesList())
      hashCode = hashCode * 8191 + attributesList.hashCode();

    hashCode = hashCode * 8191 + ((isSetMeasurementAliasList()) ? 131071 : 524287);
    if (isSetMeasurementAliasList())
      hashCode = hashCode * 8191 + measurementAliasList.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TSCreateMultiTimeseriesReq other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetSessionId(), other.isSetSessionId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSessionId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sessionId, other.sessionId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPaths(), other.isSetPaths());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPaths()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paths, other.paths);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetDataTypes(), other.isSetDataTypes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDataTypes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dataTypes, other.dataTypes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetEncodings(), other.isSetEncodings());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEncodings()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.encodings, other.encodings);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetCompressors(), other.isSetCompressors());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompressors()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.compressors, other.compressors);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPropsList(), other.isSetPropsList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPropsList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.propsList, other.propsList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTagsList(), other.isSetTagsList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTagsList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tagsList, other.tagsList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetAttributesList(), other.isSetAttributesList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAttributesList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attributesList, other.attributesList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetMeasurementAliasList(), other.isSetMeasurementAliasList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMeasurementAliasList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.measurementAliasList, other.measurementAliasList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TSCreateMultiTimeseriesReq(");
    boolean first = true;

    sb.append("sessionId:");
    sb.append(this.sessionId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("paths:");
    if (this.paths == null) {
      sb.append("null");
    } else {
      sb.append(this.paths);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("dataTypes:");
    if (this.dataTypes == null) {
      sb.append("null");
    } else {
      sb.append(this.dataTypes);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("encodings:");
    if (this.encodings == null) {
      sb.append("null");
    } else {
      sb.append(this.encodings);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("compressors:");
    if (this.compressors == null) {
      sb.append("null");
    } else {
      sb.append(this.compressors);
    }
    first = false;
    if (isSetPropsList()) {
      if (!first) sb.append(", ");
      sb.append("propsList:");
      if (this.propsList == null) {
        sb.append("null");
      } else {
        sb.append(this.propsList);
      }
      first = false;
    }
    if (isSetTagsList()) {
      if (!first) sb.append(", ");
      sb.append("tagsList:");
      if (this.tagsList == null) {
        sb.append("null");
      } else {
        sb.append(this.tagsList);
      }
      first = false;
    }
    if (isSetAttributesList()) {
      if (!first) sb.append(", ");
      sb.append("attributesList:");
      if (this.attributesList == null) {
        sb.append("null");
      } else {
        sb.append(this.attributesList);
      }
      first = false;
    }
    if (isSetMeasurementAliasList()) {
      if (!first) sb.append(", ");
      sb.append("measurementAliasList:");
      if (this.measurementAliasList == null) {
        sb.append("null");
      } else {
        sb.append(this.measurementAliasList);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'sessionId' because it's a primitive and you chose the non-beans generator.
    if (paths == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'paths' was not present! Struct: " + toString());
    }
    if (dataTypes == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'dataTypes' was not present! Struct: " + toString());
    }
    if (encodings == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'encodings' was not present! Struct: " + toString());
    }
    if (compressors == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'compressors' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TSCreateMultiTimeseriesReqStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TSCreateMultiTimeseriesReqStandardScheme getScheme() {
      return new TSCreateMultiTimeseriesReqStandardScheme();
    }
  }

  private static class TSCreateMultiTimeseriesReqStandardScheme extends org.apache.thrift.scheme.StandardScheme<TSCreateMultiTimeseriesReq> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TSCreateMultiTimeseriesReq struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SESSION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.sessionId = iprot.readI64();
              struct.setSessionIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PATHS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list592 = iprot.readListBegin();
                struct.paths = new java.util.ArrayList<java.lang.String>(_list592.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _elem593;
                for (int _i594 = 0; _i594 < _list592.size; ++_i594)
                {
                  _elem593 = iprot.readString();
                  struct.paths.add(_elem593);
                }
                iprot.readListEnd();
              }
              struct.setPathsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DATA_TYPES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list595 = iprot.readListBegin();
                struct.dataTypes = new java.util.ArrayList<java.lang.Integer>(_list595.size);
                int _elem596;
                for (int _i597 = 0; _i597 < _list595.size; ++_i597)
                {
                  _elem596 = iprot.readI32();
                  struct.dataTypes.add(_elem596);
                }
                iprot.readListEnd();
              }
              struct.setDataTypesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ENCODINGS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list598 = iprot.readListBegin();
                struct.encodings = new java.util.ArrayList<java.lang.Integer>(_list598.size);
                int _elem599;
                for (int _i600 = 0; _i600 < _list598.size; ++_i600)
                {
                  _elem599 = iprot.readI32();
                  struct.encodings.add(_elem599);
                }
                iprot.readListEnd();
              }
              struct.setEncodingsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // COMPRESSORS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list601 = iprot.readListBegin();
                struct.compressors = new java.util.ArrayList<java.lang.Integer>(_list601.size);
                int _elem602;
                for (int _i603 = 0; _i603 < _list601.size; ++_i603)
                {
                  _elem602 = iprot.readI32();
                  struct.compressors.add(_elem602);
                }
                iprot.readListEnd();
              }
              struct.setCompressorsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // PROPS_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list604 = iprot.readListBegin();
                struct.propsList = new java.util.ArrayList<java.util.Map<java.lang.String,java.lang.String>>(_list604.size);
                @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> _elem605;
                for (int _i606 = 0; _i606 < _list604.size; ++_i606)
                {
                  {
                    org.apache.thrift.protocol.TMap _map607 = iprot.readMapBegin();
                    _elem605 = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map607.size);
                    @org.apache.thrift.annotation.Nullable java.lang.String _key608;
                    @org.apache.thrift.annotation.Nullable java.lang.String _val609;
                    for (int _i610 = 0; _i610 < _map607.size; ++_i610)
                    {
                      _key608 = iprot.readString();
                      _val609 = iprot.readString();
                      _elem605.put(_key608, _val609);
                    }
                    iprot.readMapEnd();
                  }
                  struct.propsList.add(_elem605);
                }
                iprot.readListEnd();
              }
              struct.setPropsListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // TAGS_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list611 = iprot.readListBegin();
                struct.tagsList = new java.util.ArrayList<java.util.Map<java.lang.String,java.lang.String>>(_list611.size);
                @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> _elem612;
                for (int _i613 = 0; _i613 < _list611.size; ++_i613)
                {
                  {
                    org.apache.thrift.protocol.TMap _map614 = iprot.readMapBegin();
                    _elem612 = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map614.size);
                    @org.apache.thrift.annotation.Nullable java.lang.String _key615;
                    @org.apache.thrift.annotation.Nullable java.lang.String _val616;
                    for (int _i617 = 0; _i617 < _map614.size; ++_i617)
                    {
                      _key615 = iprot.readString();
                      _val616 = iprot.readString();
                      _elem612.put(_key615, _val616);
                    }
                    iprot.readMapEnd();
                  }
                  struct.tagsList.add(_elem612);
                }
                iprot.readListEnd();
              }
              struct.setTagsListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // ATTRIBUTES_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list618 = iprot.readListBegin();
                struct.attributesList = new java.util.ArrayList<java.util.Map<java.lang.String,java.lang.String>>(_list618.size);
                @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> _elem619;
                for (int _i620 = 0; _i620 < _list618.size; ++_i620)
                {
                  {
                    org.apache.thrift.protocol.TMap _map621 = iprot.readMapBegin();
                    _elem619 = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map621.size);
                    @org.apache.thrift.annotation.Nullable java.lang.String _key622;
                    @org.apache.thrift.annotation.Nullable java.lang.String _val623;
                    for (int _i624 = 0; _i624 < _map621.size; ++_i624)
                    {
                      _key622 = iprot.readString();
                      _val623 = iprot.readString();
                      _elem619.put(_key622, _val623);
                    }
                    iprot.readMapEnd();
                  }
                  struct.attributesList.add(_elem619);
                }
                iprot.readListEnd();
              }
              struct.setAttributesListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // MEASUREMENT_ALIAS_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list625 = iprot.readListBegin();
                struct.measurementAliasList = new java.util.ArrayList<java.lang.String>(_list625.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _elem626;
                for (int _i627 = 0; _i627 < _list625.size; ++_i627)
                {
                  _elem626 = iprot.readString();
                  struct.measurementAliasList.add(_elem626);
                }
                iprot.readListEnd();
              }
              struct.setMeasurementAliasListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetSessionId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'sessionId' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TSCreateMultiTimeseriesReq struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(SESSION_ID_FIELD_DESC);
      oprot.writeI64(struct.sessionId);
      oprot.writeFieldEnd();
      if (struct.paths != null) {
        oprot.writeFieldBegin(PATHS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.paths.size()));
          for (java.lang.String _iter628 : struct.paths)
          {
            oprot.writeString(_iter628);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.dataTypes != null) {
        oprot.writeFieldBegin(DATA_TYPES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.dataTypes.size()));
          for (int _iter629 : struct.dataTypes)
          {
            oprot.writeI32(_iter629);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.encodings != null) {
        oprot.writeFieldBegin(ENCODINGS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.encodings.size()));
          for (int _iter630 : struct.encodings)
          {
            oprot.writeI32(_iter630);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.compressors != null) {
        oprot.writeFieldBegin(COMPRESSORS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.compressors.size()));
          for (int _iter631 : struct.compressors)
          {
            oprot.writeI32(_iter631);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.propsList != null) {
        if (struct.isSetPropsList()) {
          oprot.writeFieldBegin(PROPS_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.MAP, struct.propsList.size()));
            for (java.util.Map<java.lang.String,java.lang.String> _iter632 : struct.propsList)
            {
              {
                oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, _iter632.size()));
                for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter633 : _iter632.entrySet())
                {
                  oprot.writeString(_iter633.getKey());
                  oprot.writeString(_iter633.getValue());
                }
                oprot.writeMapEnd();
              }
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.tagsList != null) {
        if (struct.isSetTagsList()) {
          oprot.writeFieldBegin(TAGS_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.MAP, struct.tagsList.size()));
            for (java.util.Map<java.lang.String,java.lang.String> _iter634 : struct.tagsList)
            {
              {
                oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, _iter634.size()));
                for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter635 : _iter634.entrySet())
                {
                  oprot.writeString(_iter635.getKey());
                  oprot.writeString(_iter635.getValue());
                }
                oprot.writeMapEnd();
              }
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.attributesList != null) {
        if (struct.isSetAttributesList()) {
          oprot.writeFieldBegin(ATTRIBUTES_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.MAP, struct.attributesList.size()));
            for (java.util.Map<java.lang.String,java.lang.String> _iter636 : struct.attributesList)
            {
              {
                oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, _iter636.size()));
                for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter637 : _iter636.entrySet())
                {
                  oprot.writeString(_iter637.getKey());
                  oprot.writeString(_iter637.getValue());
                }
                oprot.writeMapEnd();
              }
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.measurementAliasList != null) {
        if (struct.isSetMeasurementAliasList()) {
          oprot.writeFieldBegin(MEASUREMENT_ALIAS_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.measurementAliasList.size()));
            for (java.lang.String _iter638 : struct.measurementAliasList)
            {
              oprot.writeString(_iter638);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TSCreateMultiTimeseriesReqTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TSCreateMultiTimeseriesReqTupleScheme getScheme() {
      return new TSCreateMultiTimeseriesReqTupleScheme();
    }
  }

  private static class TSCreateMultiTimeseriesReqTupleScheme extends org.apache.thrift.scheme.TupleScheme<TSCreateMultiTimeseriesReq> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TSCreateMultiTimeseriesReq struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeI64(struct.sessionId);
      {
        oprot.writeI32(struct.paths.size());
        for (java.lang.String _iter639 : struct.paths)
        {
          oprot.writeString(_iter639);
        }
      }
      {
        oprot.writeI32(struct.dataTypes.size());
        for (int _iter640 : struct.dataTypes)
        {
          oprot.writeI32(_iter640);
        }
      }
      {
        oprot.writeI32(struct.encodings.size());
        for (int _iter641 : struct.encodings)
        {
          oprot.writeI32(_iter641);
        }
      }
      {
        oprot.writeI32(struct.compressors.size());
        for (int _iter642 : struct.compressors)
        {
          oprot.writeI32(_iter642);
        }
      }
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetPropsList()) {
        optionals.set(0);
      }
      if (struct.isSetTagsList()) {
        optionals.set(1);
      }
      if (struct.isSetAttributesList()) {
        optionals.set(2);
      }
      if (struct.isSetMeasurementAliasList()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetPropsList()) {
        {
          oprot.writeI32(struct.propsList.size());
          for (java.util.Map<java.lang.String,java.lang.String> _iter643 : struct.propsList)
          {
            {
              oprot.writeI32(_iter643.size());
              for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter644 : _iter643.entrySet())
              {
                oprot.writeString(_iter644.getKey());
                oprot.writeString(_iter644.getValue());
              }
            }
          }
        }
      }
      if (struct.isSetTagsList()) {
        {
          oprot.writeI32(struct.tagsList.size());
          for (java.util.Map<java.lang.String,java.lang.String> _iter645 : struct.tagsList)
          {
            {
              oprot.writeI32(_iter645.size());
              for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter646 : _iter645.entrySet())
              {
                oprot.writeString(_iter646.getKey());
                oprot.writeString(_iter646.getValue());
              }
            }
          }
        }
      }
      if (struct.isSetAttributesList()) {
        {
          oprot.writeI32(struct.attributesList.size());
          for (java.util.Map<java.lang.String,java.lang.String> _iter647 : struct.attributesList)
          {
            {
              oprot.writeI32(_iter647.size());
              for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter648 : _iter647.entrySet())
              {
                oprot.writeString(_iter648.getKey());
                oprot.writeString(_iter648.getValue());
              }
            }
          }
        }
      }
      if (struct.isSetMeasurementAliasList()) {
        {
          oprot.writeI32(struct.measurementAliasList.size());
          for (java.lang.String _iter649 : struct.measurementAliasList)
          {
            oprot.writeString(_iter649);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TSCreateMultiTimeseriesReq struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.sessionId = iprot.readI64();
      struct.setSessionIdIsSet(true);
      {
        org.apache.thrift.protocol.TList _list650 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRING);
        struct.paths = new java.util.ArrayList<java.lang.String>(_list650.size);
        @org.apache.thrift.annotation.Nullable java.lang.String _elem651;
        for (int _i652 = 0; _i652 < _list650.size; ++_i652)
        {
          _elem651 = iprot.readString();
          struct.paths.add(_elem651);
        }
      }
      struct.setPathsIsSet(true);
      {
        org.apache.thrift.protocol.TList _list653 = iprot.readListBegin(org.apache.thrift.protocol.TType.I32);
        struct.dataTypes = new java.util.ArrayList<java.lang.Integer>(_list653.size);
        int _elem654;
        for (int _i655 = 0; _i655 < _list653.size; ++_i655)
        {
          _elem654 = iprot.readI32();
          struct.dataTypes.add(_elem654);
        }
      }
      struct.setDataTypesIsSet(true);
      {
        org.apache.thrift.protocol.TList _list656 = iprot.readListBegin(org.apache.thrift.protocol.TType.I32);
        struct.encodings = new java.util.ArrayList<java.lang.Integer>(_list656.size);
        int _elem657;
        for (int _i658 = 0; _i658 < _list656.size; ++_i658)
        {
          _elem657 = iprot.readI32();
          struct.encodings.add(_elem657);
        }
      }
      struct.setEncodingsIsSet(true);
      {
        org.apache.thrift.protocol.TList _list659 = iprot.readListBegin(org.apache.thrift.protocol.TType.I32);
        struct.compressors = new java.util.ArrayList<java.lang.Integer>(_list659.size);
        int _elem660;
        for (int _i661 = 0; _i661 < _list659.size; ++_i661)
        {
          _elem660 = iprot.readI32();
          struct.compressors.add(_elem660);
        }
      }
      struct.setCompressorsIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list662 = iprot.readListBegin(org.apache.thrift.protocol.TType.MAP);
          struct.propsList = new java.util.ArrayList<java.util.Map<java.lang.String,java.lang.String>>(_list662.size);
          @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> _elem663;
          for (int _i664 = 0; _i664 < _list662.size; ++_i664)
          {
            {
              org.apache.thrift.protocol.TMap _map665 = iprot.readMapBegin(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING); 
              _elem663 = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map665.size);
              @org.apache.thrift.annotation.Nullable java.lang.String _key666;
              @org.apache.thrift.annotation.Nullable java.lang.String _val667;
              for (int _i668 = 0; _i668 < _map665.size; ++_i668)
              {
                _key666 = iprot.readString();
                _val667 = iprot.readString();
                _elem663.put(_key666, _val667);
              }
            }
            struct.propsList.add(_elem663);
          }
        }
        struct.setPropsListIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list669 = iprot.readListBegin(org.apache.thrift.protocol.TType.MAP);
          struct.tagsList = new java.util.ArrayList<java.util.Map<java.lang.String,java.lang.String>>(_list669.size);
          @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> _elem670;
          for (int _i671 = 0; _i671 < _list669.size; ++_i671)
          {
            {
              org.apache.thrift.protocol.TMap _map672 = iprot.readMapBegin(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING); 
              _elem670 = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map672.size);
              @org.apache.thrift.annotation.Nullable java.lang.String _key673;
              @org.apache.thrift.annotation.Nullable java.lang.String _val674;
              for (int _i675 = 0; _i675 < _map672.size; ++_i675)
              {
                _key673 = iprot.readString();
                _val674 = iprot.readString();
                _elem670.put(_key673, _val674);
              }
            }
            struct.tagsList.add(_elem670);
          }
        }
        struct.setTagsListIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list676 = iprot.readListBegin(org.apache.thrift.protocol.TType.MAP);
          struct.attributesList = new java.util.ArrayList<java.util.Map<java.lang.String,java.lang.String>>(_list676.size);
          @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> _elem677;
          for (int _i678 = 0; _i678 < _list676.size; ++_i678)
          {
            {
              org.apache.thrift.protocol.TMap _map679 = iprot.readMapBegin(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING); 
              _elem677 = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map679.size);
              @org.apache.thrift.annotation.Nullable java.lang.String _key680;
              @org.apache.thrift.annotation.Nullable java.lang.String _val681;
              for (int _i682 = 0; _i682 < _map679.size; ++_i682)
              {
                _key680 = iprot.readString();
                _val681 = iprot.readString();
                _elem677.put(_key680, _val681);
              }
            }
            struct.attributesList.add(_elem677);
          }
        }
        struct.setAttributesListIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list683 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRING);
          struct.measurementAliasList = new java.util.ArrayList<java.lang.String>(_list683.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _elem684;
          for (int _i685 = 0; _i685 < _list683.size; ++_i685)
          {
            _elem684 = iprot.readString();
            struct.measurementAliasList.add(_elem684);
          }
        }
        struct.setMeasurementAliasListIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

