/**
 * Autogenerated by Thrift Compiler (0.20.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.iotdb.service.rpc.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.20.0)", date = "2025-05-09")
public class TSQueryNonAlignDataSet implements org.apache.thrift.TBase<TSQueryNonAlignDataSet, TSQueryNonAlignDataSet._Fields>, java.io.Serializable, Cloneable, Comparable<TSQueryNonAlignDataSet> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TSQueryNonAlignDataSet");

  private static final org.apache.thrift.protocol.TField TIME_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("timeList", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField VALUE_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("valueList", org.apache.thrift.protocol.TType.LIST, (short)2);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TSQueryNonAlignDataSetStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TSQueryNonAlignDataSetTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.util.List<java.nio.ByteBuffer> timeList; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<java.nio.ByteBuffer> valueList; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TIME_LIST((short)1, "timeList"),
    VALUE_LIST((short)2, "valueList");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TIME_LIST
          return TIME_LIST;
        case 2: // VALUE_LIST
          return VALUE_LIST;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TIME_LIST, new org.apache.thrift.meta_data.FieldMetaData("timeList", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING            , true))));
    tmpMap.put(_Fields.VALUE_LIST, new org.apache.thrift.meta_data.FieldMetaData("valueList", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING            , true))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TSQueryNonAlignDataSet.class, metaDataMap);
  }

  public TSQueryNonAlignDataSet() {
  }

  public TSQueryNonAlignDataSet(
    java.util.List<java.nio.ByteBuffer> timeList,
    java.util.List<java.nio.ByteBuffer> valueList)
  {
    this();
    this.timeList = timeList;
    this.valueList = valueList;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TSQueryNonAlignDataSet(TSQueryNonAlignDataSet other) {
    if (other.isSetTimeList()) {
      java.util.List<java.nio.ByteBuffer> __this__timeList = new java.util.ArrayList<java.nio.ByteBuffer>(other.timeList);
      this.timeList = __this__timeList;
    }
    if (other.isSetValueList()) {
      java.util.List<java.nio.ByteBuffer> __this__valueList = new java.util.ArrayList<java.nio.ByteBuffer>(other.valueList);
      this.valueList = __this__valueList;
    }
  }

  @Override
  public TSQueryNonAlignDataSet deepCopy() {
    return new TSQueryNonAlignDataSet(this);
  }

  @Override
  public void clear() {
    this.timeList = null;
    this.valueList = null;
  }

  public int getTimeListSize() {
    return (this.timeList == null) ? 0 : this.timeList.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.nio.ByteBuffer> getTimeListIterator() {
    return (this.timeList == null) ? null : this.timeList.iterator();
  }

  public void addToTimeList(java.nio.ByteBuffer elem) {
    if (this.timeList == null) {
      this.timeList = new java.util.ArrayList<java.nio.ByteBuffer>();
    }
    this.timeList.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.nio.ByteBuffer> getTimeList() {
    return this.timeList;
  }

  public TSQueryNonAlignDataSet setTimeList(@org.apache.thrift.annotation.Nullable java.util.List<java.nio.ByteBuffer> timeList) {
    this.timeList = timeList;
    return this;
  }

  public void unsetTimeList() {
    this.timeList = null;
  }

  /** Returns true if field timeList is set (has been assigned a value) and false otherwise */
  public boolean isSetTimeList() {
    return this.timeList != null;
  }

  public void setTimeListIsSet(boolean value) {
    if (!value) {
      this.timeList = null;
    }
  }

  public int getValueListSize() {
    return (this.valueList == null) ? 0 : this.valueList.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.nio.ByteBuffer> getValueListIterator() {
    return (this.valueList == null) ? null : this.valueList.iterator();
  }

  public void addToValueList(java.nio.ByteBuffer elem) {
    if (this.valueList == null) {
      this.valueList = new java.util.ArrayList<java.nio.ByteBuffer>();
    }
    this.valueList.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.nio.ByteBuffer> getValueList() {
    return this.valueList;
  }

  public TSQueryNonAlignDataSet setValueList(@org.apache.thrift.annotation.Nullable java.util.List<java.nio.ByteBuffer> valueList) {
    this.valueList = valueList;
    return this;
  }

  public void unsetValueList() {
    this.valueList = null;
  }

  /** Returns true if field valueList is set (has been assigned a value) and false otherwise */
  public boolean isSetValueList() {
    return this.valueList != null;
  }

  public void setValueListIsSet(boolean value) {
    if (!value) {
      this.valueList = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case TIME_LIST:
      if (value == null) {
        unsetTimeList();
      } else {
        setTimeList((java.util.List<java.nio.ByteBuffer>)value);
      }
      break;

    case VALUE_LIST:
      if (value == null) {
        unsetValueList();
      } else {
        setValueList((java.util.List<java.nio.ByteBuffer>)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case TIME_LIST:
      return getTimeList();

    case VALUE_LIST:
      return getValueList();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case TIME_LIST:
      return isSetTimeList();
    case VALUE_LIST:
      return isSetValueList();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TSQueryNonAlignDataSet)
      return this.equals((TSQueryNonAlignDataSet)that);
    return false;
  }

  public boolean equals(TSQueryNonAlignDataSet that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_timeList = true && this.isSetTimeList();
    boolean that_present_timeList = true && that.isSetTimeList();
    if (this_present_timeList || that_present_timeList) {
      if (!(this_present_timeList && that_present_timeList))
        return false;
      if (!this.timeList.equals(that.timeList))
        return false;
    }

    boolean this_present_valueList = true && this.isSetValueList();
    boolean that_present_valueList = true && that.isSetValueList();
    if (this_present_valueList || that_present_valueList) {
      if (!(this_present_valueList && that_present_valueList))
        return false;
      if (!this.valueList.equals(that.valueList))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetTimeList()) ? 131071 : 524287);
    if (isSetTimeList())
      hashCode = hashCode * 8191 + timeList.hashCode();

    hashCode = hashCode * 8191 + ((isSetValueList()) ? 131071 : 524287);
    if (isSetValueList())
      hashCode = hashCode * 8191 + valueList.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TSQueryNonAlignDataSet other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetTimeList(), other.isSetTimeList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimeList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timeList, other.timeList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetValueList(), other.isSetValueList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetValueList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.valueList, other.valueList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TSQueryNonAlignDataSet(");
    boolean first = true;

    sb.append("timeList:");
    if (this.timeList == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.timeList, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("valueList:");
    if (this.valueList == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.valueList, sb);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (timeList == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'timeList' was not present! Struct: " + toString());
    }
    if (valueList == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'valueList' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TSQueryNonAlignDataSetStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TSQueryNonAlignDataSetStandardScheme getScheme() {
      return new TSQueryNonAlignDataSetStandardScheme();
    }
  }

  private static class TSQueryNonAlignDataSetStandardScheme extends org.apache.thrift.scheme.StandardScheme<TSQueryNonAlignDataSet> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TSQueryNonAlignDataSet struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TIME_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                struct.timeList = new java.util.ArrayList<java.nio.ByteBuffer>(_list16.size);
                @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer _elem17;
                for (int _i18 = 0; _i18 < _list16.size; ++_i18)
                {
                  _elem17 = iprot.readBinary();
                  struct.timeList.add(_elem17);
                }
                iprot.readListEnd();
              }
              struct.setTimeListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // VALUE_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list19 = iprot.readListBegin();
                struct.valueList = new java.util.ArrayList<java.nio.ByteBuffer>(_list19.size);
                @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer _elem20;
                for (int _i21 = 0; _i21 < _list19.size; ++_i21)
                {
                  _elem20 = iprot.readBinary();
                  struct.valueList.add(_elem20);
                }
                iprot.readListEnd();
              }
              struct.setValueListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TSQueryNonAlignDataSet struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.timeList != null) {
        oprot.writeFieldBegin(TIME_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.timeList.size()));
          for (java.nio.ByteBuffer _iter22 : struct.timeList)
          {
            oprot.writeBinary(_iter22);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.valueList != null) {
        oprot.writeFieldBegin(VALUE_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.valueList.size()));
          for (java.nio.ByteBuffer _iter23 : struct.valueList)
          {
            oprot.writeBinary(_iter23);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TSQueryNonAlignDataSetTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TSQueryNonAlignDataSetTupleScheme getScheme() {
      return new TSQueryNonAlignDataSetTupleScheme();
    }
  }

  private static class TSQueryNonAlignDataSetTupleScheme extends org.apache.thrift.scheme.TupleScheme<TSQueryNonAlignDataSet> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TSQueryNonAlignDataSet struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      {
        oprot.writeI32(struct.timeList.size());
        for (java.nio.ByteBuffer _iter24 : struct.timeList)
        {
          oprot.writeBinary(_iter24);
        }
      }
      {
        oprot.writeI32(struct.valueList.size());
        for (java.nio.ByteBuffer _iter25 : struct.valueList)
        {
          oprot.writeBinary(_iter25);
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TSQueryNonAlignDataSet struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      {
        org.apache.thrift.protocol.TList _list26 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRING);
        struct.timeList = new java.util.ArrayList<java.nio.ByteBuffer>(_list26.size);
        @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer _elem27;
        for (int _i28 = 0; _i28 < _list26.size; ++_i28)
        {
          _elem27 = iprot.readBinary();
          struct.timeList.add(_elem27);
        }
      }
      struct.setTimeListIsSet(true);
      {
        org.apache.thrift.protocol.TList _list29 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRING);
        struct.valueList = new java.util.ArrayList<java.nio.ByteBuffer>(_list29.size);
        @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer _elem30;
        for (int _i31 = 0; _i31 < _list29.size; ++_i31)
        {
          _elem30 = iprot.readBinary();
          struct.valueList.add(_elem30);
        }
      }
      struct.setValueListIsSet(true);
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

