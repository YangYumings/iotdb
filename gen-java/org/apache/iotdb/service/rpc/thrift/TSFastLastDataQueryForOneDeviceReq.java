/**
 * Autogenerated by Thrift Compiler (0.20.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.iotdb.service.rpc.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.20.0)", date = "2025-05-09")
public class TSFastLastDataQueryForOneDeviceReq implements org.apache.thrift.TBase<TSFastLastDataQueryForOneDeviceReq, TSFastLastDataQueryForOneDeviceReq._Fields>, java.io.Serializable, Cloneable, Comparable<TSFastLastDataQueryForOneDeviceReq> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TSFastLastDataQueryForOneDeviceReq");

  private static final org.apache.thrift.protocol.TField SESSION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sessionId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField DB_FIELD_DESC = new org.apache.thrift.protocol.TField("db", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField DEVICE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("deviceId", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField SENSORS_FIELD_DESC = new org.apache.thrift.protocol.TField("sensors", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField FETCH_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("fetchSize", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField STATEMENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("statementId", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField ENABLE_REDIRECT_QUERY_FIELD_DESC = new org.apache.thrift.protocol.TField("enableRedirectQuery", org.apache.thrift.protocol.TType.BOOL, (short)7);
  private static final org.apache.thrift.protocol.TField JDBC_QUERY_FIELD_DESC = new org.apache.thrift.protocol.TField("jdbcQuery", org.apache.thrift.protocol.TType.BOOL, (short)8);
  private static final org.apache.thrift.protocol.TField TIMEOUT_FIELD_DESC = new org.apache.thrift.protocol.TField("timeout", org.apache.thrift.protocol.TType.I64, (short)9);
  private static final org.apache.thrift.protocol.TField LEGAL_PATH_NODES_FIELD_DESC = new org.apache.thrift.protocol.TField("legalPathNodes", org.apache.thrift.protocol.TType.BOOL, (short)10);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TSFastLastDataQueryForOneDeviceReqStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TSFastLastDataQueryForOneDeviceReqTupleSchemeFactory();

  public long sessionId; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String db; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String deviceId; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> sensors; // required
  public int fetchSize; // optional
  public long statementId; // required
  public boolean enableRedirectQuery; // optional
  public boolean jdbcQuery; // optional
  public long timeout; // optional
  public boolean legalPathNodes; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SESSION_ID((short)1, "sessionId"),
    DB((short)2, "db"),
    DEVICE_ID((short)3, "deviceId"),
    SENSORS((short)4, "sensors"),
    FETCH_SIZE((short)5, "fetchSize"),
    STATEMENT_ID((short)6, "statementId"),
    ENABLE_REDIRECT_QUERY((short)7, "enableRedirectQuery"),
    JDBC_QUERY((short)8, "jdbcQuery"),
    TIMEOUT((short)9, "timeout"),
    LEGAL_PATH_NODES((short)10, "legalPathNodes");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SESSION_ID
          return SESSION_ID;
        case 2: // DB
          return DB;
        case 3: // DEVICE_ID
          return DEVICE_ID;
        case 4: // SENSORS
          return SENSORS;
        case 5: // FETCH_SIZE
          return FETCH_SIZE;
        case 6: // STATEMENT_ID
          return STATEMENT_ID;
        case 7: // ENABLE_REDIRECT_QUERY
          return ENABLE_REDIRECT_QUERY;
        case 8: // JDBC_QUERY
          return JDBC_QUERY;
        case 9: // TIMEOUT
          return TIMEOUT;
        case 10: // LEGAL_PATH_NODES
          return LEGAL_PATH_NODES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SESSIONID_ISSET_ID = 0;
  private static final int __FETCHSIZE_ISSET_ID = 1;
  private static final int __STATEMENTID_ISSET_ID = 2;
  private static final int __ENABLEREDIRECTQUERY_ISSET_ID = 3;
  private static final int __JDBCQUERY_ISSET_ID = 4;
  private static final int __TIMEOUT_ISSET_ID = 5;
  private static final int __LEGALPATHNODES_ISSET_ID = 6;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.FETCH_SIZE,_Fields.ENABLE_REDIRECT_QUERY,_Fields.JDBC_QUERY,_Fields.TIMEOUT,_Fields.LEGAL_PATH_NODES};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SESSION_ID, new org.apache.thrift.meta_data.FieldMetaData("sessionId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.DB, new org.apache.thrift.meta_data.FieldMetaData("db", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DEVICE_ID, new org.apache.thrift.meta_data.FieldMetaData("deviceId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SENSORS, new org.apache.thrift.meta_data.FieldMetaData("sensors", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.FETCH_SIZE, new org.apache.thrift.meta_data.FieldMetaData("fetchSize", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.STATEMENT_ID, new org.apache.thrift.meta_data.FieldMetaData("statementId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ENABLE_REDIRECT_QUERY, new org.apache.thrift.meta_data.FieldMetaData("enableRedirectQuery", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.JDBC_QUERY, new org.apache.thrift.meta_data.FieldMetaData("jdbcQuery", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.TIMEOUT, new org.apache.thrift.meta_data.FieldMetaData("timeout", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LEGAL_PATH_NODES, new org.apache.thrift.meta_data.FieldMetaData("legalPathNodes", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TSFastLastDataQueryForOneDeviceReq.class, metaDataMap);
  }

  public TSFastLastDataQueryForOneDeviceReq() {
  }

  public TSFastLastDataQueryForOneDeviceReq(
    long sessionId,
    java.lang.String db,
    java.lang.String deviceId,
    java.util.List<java.lang.String> sensors,
    long statementId)
  {
    this();
    this.sessionId = sessionId;
    setSessionIdIsSet(true);
    this.db = db;
    this.deviceId = deviceId;
    this.sensors = sensors;
    this.statementId = statementId;
    setStatementIdIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TSFastLastDataQueryForOneDeviceReq(TSFastLastDataQueryForOneDeviceReq other) {
    __isset_bitfield = other.__isset_bitfield;
    this.sessionId = other.sessionId;
    if (other.isSetDb()) {
      this.db = other.db;
    }
    if (other.isSetDeviceId()) {
      this.deviceId = other.deviceId;
    }
    if (other.isSetSensors()) {
      java.util.List<java.lang.String> __this__sensors = new java.util.ArrayList<java.lang.String>(other.sensors);
      this.sensors = __this__sensors;
    }
    this.fetchSize = other.fetchSize;
    this.statementId = other.statementId;
    this.enableRedirectQuery = other.enableRedirectQuery;
    this.jdbcQuery = other.jdbcQuery;
    this.timeout = other.timeout;
    this.legalPathNodes = other.legalPathNodes;
  }

  @Override
  public TSFastLastDataQueryForOneDeviceReq deepCopy() {
    return new TSFastLastDataQueryForOneDeviceReq(this);
  }

  @Override
  public void clear() {
    setSessionIdIsSet(false);
    this.sessionId = 0;
    this.db = null;
    this.deviceId = null;
    this.sensors = null;
    setFetchSizeIsSet(false);
    this.fetchSize = 0;
    setStatementIdIsSet(false);
    this.statementId = 0;
    setEnableRedirectQueryIsSet(false);
    this.enableRedirectQuery = false;
    setJdbcQueryIsSet(false);
    this.jdbcQuery = false;
    setTimeoutIsSet(false);
    this.timeout = 0;
    setLegalPathNodesIsSet(false);
    this.legalPathNodes = false;
  }

  public long getSessionId() {
    return this.sessionId;
  }

  public TSFastLastDataQueryForOneDeviceReq setSessionId(long sessionId) {
    this.sessionId = sessionId;
    setSessionIdIsSet(true);
    return this;
  }

  public void unsetSessionId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SESSIONID_ISSET_ID);
  }

  /** Returns true if field sessionId is set (has been assigned a value) and false otherwise */
  public boolean isSetSessionId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SESSIONID_ISSET_ID);
  }

  public void setSessionIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SESSIONID_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getDb() {
    return this.db;
  }

  public TSFastLastDataQueryForOneDeviceReq setDb(@org.apache.thrift.annotation.Nullable java.lang.String db) {
    this.db = db;
    return this;
  }

  public void unsetDb() {
    this.db = null;
  }

  /** Returns true if field db is set (has been assigned a value) and false otherwise */
  public boolean isSetDb() {
    return this.db != null;
  }

  public void setDbIsSet(boolean value) {
    if (!value) {
      this.db = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getDeviceId() {
    return this.deviceId;
  }

  public TSFastLastDataQueryForOneDeviceReq setDeviceId(@org.apache.thrift.annotation.Nullable java.lang.String deviceId) {
    this.deviceId = deviceId;
    return this;
  }

  public void unsetDeviceId() {
    this.deviceId = null;
  }

  /** Returns true if field deviceId is set (has been assigned a value) and false otherwise */
  public boolean isSetDeviceId() {
    return this.deviceId != null;
  }

  public void setDeviceIdIsSet(boolean value) {
    if (!value) {
      this.deviceId = null;
    }
  }

  public int getSensorsSize() {
    return (this.sensors == null) ? 0 : this.sensors.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.String> getSensorsIterator() {
    return (this.sensors == null) ? null : this.sensors.iterator();
  }

  public void addToSensors(java.lang.String elem) {
    if (this.sensors == null) {
      this.sensors = new java.util.ArrayList<java.lang.String>();
    }
    this.sensors.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.String> getSensors() {
    return this.sensors;
  }

  public TSFastLastDataQueryForOneDeviceReq setSensors(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> sensors) {
    this.sensors = sensors;
    return this;
  }

  public void unsetSensors() {
    this.sensors = null;
  }

  /** Returns true if field sensors is set (has been assigned a value) and false otherwise */
  public boolean isSetSensors() {
    return this.sensors != null;
  }

  public void setSensorsIsSet(boolean value) {
    if (!value) {
      this.sensors = null;
    }
  }

  public int getFetchSize() {
    return this.fetchSize;
  }

  public TSFastLastDataQueryForOneDeviceReq setFetchSize(int fetchSize) {
    this.fetchSize = fetchSize;
    setFetchSizeIsSet(true);
    return this;
  }

  public void unsetFetchSize() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FETCHSIZE_ISSET_ID);
  }

  /** Returns true if field fetchSize is set (has been assigned a value) and false otherwise */
  public boolean isSetFetchSize() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FETCHSIZE_ISSET_ID);
  }

  public void setFetchSizeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FETCHSIZE_ISSET_ID, value);
  }

  public long getStatementId() {
    return this.statementId;
  }

  public TSFastLastDataQueryForOneDeviceReq setStatementId(long statementId) {
    this.statementId = statementId;
    setStatementIdIsSet(true);
    return this;
  }

  public void unsetStatementId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __STATEMENTID_ISSET_ID);
  }

  /** Returns true if field statementId is set (has been assigned a value) and false otherwise */
  public boolean isSetStatementId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __STATEMENTID_ISSET_ID);
  }

  public void setStatementIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __STATEMENTID_ISSET_ID, value);
  }

  public boolean isEnableRedirectQuery() {
    return this.enableRedirectQuery;
  }

  public TSFastLastDataQueryForOneDeviceReq setEnableRedirectQuery(boolean enableRedirectQuery) {
    this.enableRedirectQuery = enableRedirectQuery;
    setEnableRedirectQueryIsSet(true);
    return this;
  }

  public void unsetEnableRedirectQuery() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ENABLEREDIRECTQUERY_ISSET_ID);
  }

  /** Returns true if field enableRedirectQuery is set (has been assigned a value) and false otherwise */
  public boolean isSetEnableRedirectQuery() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ENABLEREDIRECTQUERY_ISSET_ID);
  }

  public void setEnableRedirectQueryIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ENABLEREDIRECTQUERY_ISSET_ID, value);
  }

  public boolean isJdbcQuery() {
    return this.jdbcQuery;
  }

  public TSFastLastDataQueryForOneDeviceReq setJdbcQuery(boolean jdbcQuery) {
    this.jdbcQuery = jdbcQuery;
    setJdbcQueryIsSet(true);
    return this;
  }

  public void unsetJdbcQuery() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __JDBCQUERY_ISSET_ID);
  }

  /** Returns true if field jdbcQuery is set (has been assigned a value) and false otherwise */
  public boolean isSetJdbcQuery() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __JDBCQUERY_ISSET_ID);
  }

  public void setJdbcQueryIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __JDBCQUERY_ISSET_ID, value);
  }

  public long getTimeout() {
    return this.timeout;
  }

  public TSFastLastDataQueryForOneDeviceReq setTimeout(long timeout) {
    this.timeout = timeout;
    setTimeoutIsSet(true);
    return this;
  }

  public void unsetTimeout() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TIMEOUT_ISSET_ID);
  }

  /** Returns true if field timeout is set (has been assigned a value) and false otherwise */
  public boolean isSetTimeout() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TIMEOUT_ISSET_ID);
  }

  public void setTimeoutIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TIMEOUT_ISSET_ID, value);
  }

  public boolean isLegalPathNodes() {
    return this.legalPathNodes;
  }

  public TSFastLastDataQueryForOneDeviceReq setLegalPathNodes(boolean legalPathNodes) {
    this.legalPathNodes = legalPathNodes;
    setLegalPathNodesIsSet(true);
    return this;
  }

  public void unsetLegalPathNodes() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LEGALPATHNODES_ISSET_ID);
  }

  /** Returns true if field legalPathNodes is set (has been assigned a value) and false otherwise */
  public boolean isSetLegalPathNodes() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LEGALPATHNODES_ISSET_ID);
  }

  public void setLegalPathNodesIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LEGALPATHNODES_ISSET_ID, value);
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case SESSION_ID:
      if (value == null) {
        unsetSessionId();
      } else {
        setSessionId((java.lang.Long)value);
      }
      break;

    case DB:
      if (value == null) {
        unsetDb();
      } else {
        setDb((java.lang.String)value);
      }
      break;

    case DEVICE_ID:
      if (value == null) {
        unsetDeviceId();
      } else {
        setDeviceId((java.lang.String)value);
      }
      break;

    case SENSORS:
      if (value == null) {
        unsetSensors();
      } else {
        setSensors((java.util.List<java.lang.String>)value);
      }
      break;

    case FETCH_SIZE:
      if (value == null) {
        unsetFetchSize();
      } else {
        setFetchSize((java.lang.Integer)value);
      }
      break;

    case STATEMENT_ID:
      if (value == null) {
        unsetStatementId();
      } else {
        setStatementId((java.lang.Long)value);
      }
      break;

    case ENABLE_REDIRECT_QUERY:
      if (value == null) {
        unsetEnableRedirectQuery();
      } else {
        setEnableRedirectQuery((java.lang.Boolean)value);
      }
      break;

    case JDBC_QUERY:
      if (value == null) {
        unsetJdbcQuery();
      } else {
        setJdbcQuery((java.lang.Boolean)value);
      }
      break;

    case TIMEOUT:
      if (value == null) {
        unsetTimeout();
      } else {
        setTimeout((java.lang.Long)value);
      }
      break;

    case LEGAL_PATH_NODES:
      if (value == null) {
        unsetLegalPathNodes();
      } else {
        setLegalPathNodes((java.lang.Boolean)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case SESSION_ID:
      return getSessionId();

    case DB:
      return getDb();

    case DEVICE_ID:
      return getDeviceId();

    case SENSORS:
      return getSensors();

    case FETCH_SIZE:
      return getFetchSize();

    case STATEMENT_ID:
      return getStatementId();

    case ENABLE_REDIRECT_QUERY:
      return isEnableRedirectQuery();

    case JDBC_QUERY:
      return isJdbcQuery();

    case TIMEOUT:
      return getTimeout();

    case LEGAL_PATH_NODES:
      return isLegalPathNodes();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case SESSION_ID:
      return isSetSessionId();
    case DB:
      return isSetDb();
    case DEVICE_ID:
      return isSetDeviceId();
    case SENSORS:
      return isSetSensors();
    case FETCH_SIZE:
      return isSetFetchSize();
    case STATEMENT_ID:
      return isSetStatementId();
    case ENABLE_REDIRECT_QUERY:
      return isSetEnableRedirectQuery();
    case JDBC_QUERY:
      return isSetJdbcQuery();
    case TIMEOUT:
      return isSetTimeout();
    case LEGAL_PATH_NODES:
      return isSetLegalPathNodes();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TSFastLastDataQueryForOneDeviceReq)
      return this.equals((TSFastLastDataQueryForOneDeviceReq)that);
    return false;
  }

  public boolean equals(TSFastLastDataQueryForOneDeviceReq that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_sessionId = true;
    boolean that_present_sessionId = true;
    if (this_present_sessionId || that_present_sessionId) {
      if (!(this_present_sessionId && that_present_sessionId))
        return false;
      if (this.sessionId != that.sessionId)
        return false;
    }

    boolean this_present_db = true && this.isSetDb();
    boolean that_present_db = true && that.isSetDb();
    if (this_present_db || that_present_db) {
      if (!(this_present_db && that_present_db))
        return false;
      if (!this.db.equals(that.db))
        return false;
    }

    boolean this_present_deviceId = true && this.isSetDeviceId();
    boolean that_present_deviceId = true && that.isSetDeviceId();
    if (this_present_deviceId || that_present_deviceId) {
      if (!(this_present_deviceId && that_present_deviceId))
        return false;
      if (!this.deviceId.equals(that.deviceId))
        return false;
    }

    boolean this_present_sensors = true && this.isSetSensors();
    boolean that_present_sensors = true && that.isSetSensors();
    if (this_present_sensors || that_present_sensors) {
      if (!(this_present_sensors && that_present_sensors))
        return false;
      if (!this.sensors.equals(that.sensors))
        return false;
    }

    boolean this_present_fetchSize = true && this.isSetFetchSize();
    boolean that_present_fetchSize = true && that.isSetFetchSize();
    if (this_present_fetchSize || that_present_fetchSize) {
      if (!(this_present_fetchSize && that_present_fetchSize))
        return false;
      if (this.fetchSize != that.fetchSize)
        return false;
    }

    boolean this_present_statementId = true;
    boolean that_present_statementId = true;
    if (this_present_statementId || that_present_statementId) {
      if (!(this_present_statementId && that_present_statementId))
        return false;
      if (this.statementId != that.statementId)
        return false;
    }

    boolean this_present_enableRedirectQuery = true && this.isSetEnableRedirectQuery();
    boolean that_present_enableRedirectQuery = true && that.isSetEnableRedirectQuery();
    if (this_present_enableRedirectQuery || that_present_enableRedirectQuery) {
      if (!(this_present_enableRedirectQuery && that_present_enableRedirectQuery))
        return false;
      if (this.enableRedirectQuery != that.enableRedirectQuery)
        return false;
    }

    boolean this_present_jdbcQuery = true && this.isSetJdbcQuery();
    boolean that_present_jdbcQuery = true && that.isSetJdbcQuery();
    if (this_present_jdbcQuery || that_present_jdbcQuery) {
      if (!(this_present_jdbcQuery && that_present_jdbcQuery))
        return false;
      if (this.jdbcQuery != that.jdbcQuery)
        return false;
    }

    boolean this_present_timeout = true && this.isSetTimeout();
    boolean that_present_timeout = true && that.isSetTimeout();
    if (this_present_timeout || that_present_timeout) {
      if (!(this_present_timeout && that_present_timeout))
        return false;
      if (this.timeout != that.timeout)
        return false;
    }

    boolean this_present_legalPathNodes = true && this.isSetLegalPathNodes();
    boolean that_present_legalPathNodes = true && that.isSetLegalPathNodes();
    if (this_present_legalPathNodes || that_present_legalPathNodes) {
      if (!(this_present_legalPathNodes && that_present_legalPathNodes))
        return false;
      if (this.legalPathNodes != that.legalPathNodes)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(sessionId);

    hashCode = hashCode * 8191 + ((isSetDb()) ? 131071 : 524287);
    if (isSetDb())
      hashCode = hashCode * 8191 + db.hashCode();

    hashCode = hashCode * 8191 + ((isSetDeviceId()) ? 131071 : 524287);
    if (isSetDeviceId())
      hashCode = hashCode * 8191 + deviceId.hashCode();

    hashCode = hashCode * 8191 + ((isSetSensors()) ? 131071 : 524287);
    if (isSetSensors())
      hashCode = hashCode * 8191 + sensors.hashCode();

    hashCode = hashCode * 8191 + ((isSetFetchSize()) ? 131071 : 524287);
    if (isSetFetchSize())
      hashCode = hashCode * 8191 + fetchSize;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(statementId);

    hashCode = hashCode * 8191 + ((isSetEnableRedirectQuery()) ? 131071 : 524287);
    if (isSetEnableRedirectQuery())
      hashCode = hashCode * 8191 + ((enableRedirectQuery) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetJdbcQuery()) ? 131071 : 524287);
    if (isSetJdbcQuery())
      hashCode = hashCode * 8191 + ((jdbcQuery) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetTimeout()) ? 131071 : 524287);
    if (isSetTimeout())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(timeout);

    hashCode = hashCode * 8191 + ((isSetLegalPathNodes()) ? 131071 : 524287);
    if (isSetLegalPathNodes())
      hashCode = hashCode * 8191 + ((legalPathNodes) ? 131071 : 524287);

    return hashCode;
  }

  @Override
  public int compareTo(TSFastLastDataQueryForOneDeviceReq other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetSessionId(), other.isSetSessionId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSessionId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sessionId, other.sessionId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetDb(), other.isSetDb());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDb()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.db, other.db);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetDeviceId(), other.isSetDeviceId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeviceId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deviceId, other.deviceId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSensors(), other.isSetSensors());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSensors()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sensors, other.sensors);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetFetchSize(), other.isSetFetchSize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFetchSize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fetchSize, other.fetchSize);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetStatementId(), other.isSetStatementId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatementId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.statementId, other.statementId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetEnableRedirectQuery(), other.isSetEnableRedirectQuery());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnableRedirectQuery()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.enableRedirectQuery, other.enableRedirectQuery);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetJdbcQuery(), other.isSetJdbcQuery());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJdbcQuery()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jdbcQuery, other.jdbcQuery);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTimeout(), other.isSetTimeout());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimeout()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timeout, other.timeout);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetLegalPathNodes(), other.isSetLegalPathNodes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLegalPathNodes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.legalPathNodes, other.legalPathNodes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TSFastLastDataQueryForOneDeviceReq(");
    boolean first = true;

    sb.append("sessionId:");
    sb.append(this.sessionId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("db:");
    if (this.db == null) {
      sb.append("null");
    } else {
      sb.append(this.db);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("deviceId:");
    if (this.deviceId == null) {
      sb.append("null");
    } else {
      sb.append(this.deviceId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sensors:");
    if (this.sensors == null) {
      sb.append("null");
    } else {
      sb.append(this.sensors);
    }
    first = false;
    if (isSetFetchSize()) {
      if (!first) sb.append(", ");
      sb.append("fetchSize:");
      sb.append(this.fetchSize);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("statementId:");
    sb.append(this.statementId);
    first = false;
    if (isSetEnableRedirectQuery()) {
      if (!first) sb.append(", ");
      sb.append("enableRedirectQuery:");
      sb.append(this.enableRedirectQuery);
      first = false;
    }
    if (isSetJdbcQuery()) {
      if (!first) sb.append(", ");
      sb.append("jdbcQuery:");
      sb.append(this.jdbcQuery);
      first = false;
    }
    if (isSetTimeout()) {
      if (!first) sb.append(", ");
      sb.append("timeout:");
      sb.append(this.timeout);
      first = false;
    }
    if (isSetLegalPathNodes()) {
      if (!first) sb.append(", ");
      sb.append("legalPathNodes:");
      sb.append(this.legalPathNodes);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'sessionId' because it's a primitive and you chose the non-beans generator.
    if (db == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'db' was not present! Struct: " + toString());
    }
    if (deviceId == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'deviceId' was not present! Struct: " + toString());
    }
    if (sensors == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'sensors' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'statementId' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TSFastLastDataQueryForOneDeviceReqStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TSFastLastDataQueryForOneDeviceReqStandardScheme getScheme() {
      return new TSFastLastDataQueryForOneDeviceReqStandardScheme();
    }
  }

  private static class TSFastLastDataQueryForOneDeviceReqStandardScheme extends org.apache.thrift.scheme.StandardScheme<TSFastLastDataQueryForOneDeviceReq> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TSFastLastDataQueryForOneDeviceReq struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SESSION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.sessionId = iprot.readI64();
              struct.setSessionIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DB
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.db = iprot.readString();
              struct.setDbIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DEVICE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.deviceId = iprot.readString();
              struct.setDeviceIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SENSORS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list568 = iprot.readListBegin();
                struct.sensors = new java.util.ArrayList<java.lang.String>(_list568.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _elem569;
                for (int _i570 = 0; _i570 < _list568.size; ++_i570)
                {
                  _elem569 = iprot.readString();
                  struct.sensors.add(_elem569);
                }
                iprot.readListEnd();
              }
              struct.setSensorsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // FETCH_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.fetchSize = iprot.readI32();
              struct.setFetchSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // STATEMENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.statementId = iprot.readI64();
              struct.setStatementIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // ENABLE_REDIRECT_QUERY
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.enableRedirectQuery = iprot.readBool();
              struct.setEnableRedirectQueryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // JDBC_QUERY
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.jdbcQuery = iprot.readBool();
              struct.setJdbcQueryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // TIMEOUT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.timeout = iprot.readI64();
              struct.setTimeoutIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // LEGAL_PATH_NODES
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.legalPathNodes = iprot.readBool();
              struct.setLegalPathNodesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetSessionId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'sessionId' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetStatementId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'statementId' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TSFastLastDataQueryForOneDeviceReq struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(SESSION_ID_FIELD_DESC);
      oprot.writeI64(struct.sessionId);
      oprot.writeFieldEnd();
      if (struct.db != null) {
        oprot.writeFieldBegin(DB_FIELD_DESC);
        oprot.writeString(struct.db);
        oprot.writeFieldEnd();
      }
      if (struct.deviceId != null) {
        oprot.writeFieldBegin(DEVICE_ID_FIELD_DESC);
        oprot.writeString(struct.deviceId);
        oprot.writeFieldEnd();
      }
      if (struct.sensors != null) {
        oprot.writeFieldBegin(SENSORS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.sensors.size()));
          for (java.lang.String _iter571 : struct.sensors)
          {
            oprot.writeString(_iter571);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.isSetFetchSize()) {
        oprot.writeFieldBegin(FETCH_SIZE_FIELD_DESC);
        oprot.writeI32(struct.fetchSize);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(STATEMENT_ID_FIELD_DESC);
      oprot.writeI64(struct.statementId);
      oprot.writeFieldEnd();
      if (struct.isSetEnableRedirectQuery()) {
        oprot.writeFieldBegin(ENABLE_REDIRECT_QUERY_FIELD_DESC);
        oprot.writeBool(struct.enableRedirectQuery);
        oprot.writeFieldEnd();
      }
      if (struct.isSetJdbcQuery()) {
        oprot.writeFieldBegin(JDBC_QUERY_FIELD_DESC);
        oprot.writeBool(struct.jdbcQuery);
        oprot.writeFieldEnd();
      }
      if (struct.isSetTimeout()) {
        oprot.writeFieldBegin(TIMEOUT_FIELD_DESC);
        oprot.writeI64(struct.timeout);
        oprot.writeFieldEnd();
      }
      if (struct.isSetLegalPathNodes()) {
        oprot.writeFieldBegin(LEGAL_PATH_NODES_FIELD_DESC);
        oprot.writeBool(struct.legalPathNodes);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TSFastLastDataQueryForOneDeviceReqTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TSFastLastDataQueryForOneDeviceReqTupleScheme getScheme() {
      return new TSFastLastDataQueryForOneDeviceReqTupleScheme();
    }
  }

  private static class TSFastLastDataQueryForOneDeviceReqTupleScheme extends org.apache.thrift.scheme.TupleScheme<TSFastLastDataQueryForOneDeviceReq> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TSFastLastDataQueryForOneDeviceReq struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeI64(struct.sessionId);
      oprot.writeString(struct.db);
      oprot.writeString(struct.deviceId);
      {
        oprot.writeI32(struct.sensors.size());
        for (java.lang.String _iter572 : struct.sensors)
        {
          oprot.writeString(_iter572);
        }
      }
      oprot.writeI64(struct.statementId);
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetFetchSize()) {
        optionals.set(0);
      }
      if (struct.isSetEnableRedirectQuery()) {
        optionals.set(1);
      }
      if (struct.isSetJdbcQuery()) {
        optionals.set(2);
      }
      if (struct.isSetTimeout()) {
        optionals.set(3);
      }
      if (struct.isSetLegalPathNodes()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetFetchSize()) {
        oprot.writeI32(struct.fetchSize);
      }
      if (struct.isSetEnableRedirectQuery()) {
        oprot.writeBool(struct.enableRedirectQuery);
      }
      if (struct.isSetJdbcQuery()) {
        oprot.writeBool(struct.jdbcQuery);
      }
      if (struct.isSetTimeout()) {
        oprot.writeI64(struct.timeout);
      }
      if (struct.isSetLegalPathNodes()) {
        oprot.writeBool(struct.legalPathNodes);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TSFastLastDataQueryForOneDeviceReq struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.sessionId = iprot.readI64();
      struct.setSessionIdIsSet(true);
      struct.db = iprot.readString();
      struct.setDbIsSet(true);
      struct.deviceId = iprot.readString();
      struct.setDeviceIdIsSet(true);
      {
        org.apache.thrift.protocol.TList _list573 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRING);
        struct.sensors = new java.util.ArrayList<java.lang.String>(_list573.size);
        @org.apache.thrift.annotation.Nullable java.lang.String _elem574;
        for (int _i575 = 0; _i575 < _list573.size; ++_i575)
        {
          _elem574 = iprot.readString();
          struct.sensors.add(_elem574);
        }
      }
      struct.setSensorsIsSet(true);
      struct.statementId = iprot.readI64();
      struct.setStatementIdIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.fetchSize = iprot.readI32();
        struct.setFetchSizeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.enableRedirectQuery = iprot.readBool();
        struct.setEnableRedirectQueryIsSet(true);
      }
      if (incoming.get(2)) {
        struct.jdbcQuery = iprot.readBool();
        struct.setJdbcQueryIsSet(true);
      }
      if (incoming.get(3)) {
        struct.timeout = iprot.readI64();
        struct.setTimeoutIsSet(true);
      }
      if (incoming.get(4)) {
        struct.legalPathNodes = iprot.readBool();
        struct.setLegalPathNodesIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

