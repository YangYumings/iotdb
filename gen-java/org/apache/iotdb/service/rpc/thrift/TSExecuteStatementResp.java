/**
 * Autogenerated by Thrift Compiler (0.20.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.iotdb.service.rpc.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.20.0)", date = "2025-05-09")
public class TSExecuteStatementResp implements org.apache.thrift.TBase<TSExecuteStatementResp, TSExecuteStatementResp._Fields>, java.io.Serializable, Cloneable, Comparable<TSExecuteStatementResp> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TSExecuteStatementResp");

  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField QUERY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("queryId", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField COLUMNS_FIELD_DESC = new org.apache.thrift.protocol.TField("columns", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField OPERATION_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("operationType", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField IGNORE_TIME_STAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("ignoreTimeStamp", org.apache.thrift.protocol.TType.BOOL, (short)5);
  private static final org.apache.thrift.protocol.TField DATA_TYPE_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("dataTypeList", org.apache.thrift.protocol.TType.LIST, (short)6);
  private static final org.apache.thrift.protocol.TField QUERY_DATA_SET_FIELD_DESC = new org.apache.thrift.protocol.TField("queryDataSet", org.apache.thrift.protocol.TType.STRUCT, (short)7);
  private static final org.apache.thrift.protocol.TField NON_ALIGN_QUERY_DATA_SET_FIELD_DESC = new org.apache.thrift.protocol.TField("nonAlignQueryDataSet", org.apache.thrift.protocol.TType.STRUCT, (short)8);
  private static final org.apache.thrift.protocol.TField COLUMN_NAME_INDEX_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("columnNameIndexMap", org.apache.thrift.protocol.TType.MAP, (short)9);
  private static final org.apache.thrift.protocol.TField SG_COLUMNS_FIELD_DESC = new org.apache.thrift.protocol.TField("sgColumns", org.apache.thrift.protocol.TType.LIST, (short)10);
  private static final org.apache.thrift.protocol.TField ALIAS_COLUMNS_FIELD_DESC = new org.apache.thrift.protocol.TField("aliasColumns", org.apache.thrift.protocol.TType.LIST, (short)11);
  private static final org.apache.thrift.protocol.TField TRACING_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("tracingInfo", org.apache.thrift.protocol.TType.STRUCT, (short)12);
  private static final org.apache.thrift.protocol.TField QUERY_RESULT_FIELD_DESC = new org.apache.thrift.protocol.TField("queryResult", org.apache.thrift.protocol.TType.LIST, (short)13);
  private static final org.apache.thrift.protocol.TField MORE_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("moreData", org.apache.thrift.protocol.TType.BOOL, (short)14);
  private static final org.apache.thrift.protocol.TField DATABASE_FIELD_DESC = new org.apache.thrift.protocol.TField("database", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField TABLE_MODEL_FIELD_DESC = new org.apache.thrift.protocol.TField("tableModel", org.apache.thrift.protocol.TType.BOOL, (short)16);
  private static final org.apache.thrift.protocol.TField COLUMN_INDEX2_TS_BLOCK_COLUMN_INDEX_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("columnIndex2TsBlockColumnIndexList", org.apache.thrift.protocol.TType.LIST, (short)17);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TSExecuteStatementRespStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TSExecuteStatementRespTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable org.apache.iotdb.common.rpc.thrift.TSStatus status; // required
  public long queryId; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> columns; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String operationType; // optional
  public boolean ignoreTimeStamp; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> dataTypeList; // optional
  public @org.apache.thrift.annotation.Nullable TSQueryDataSet queryDataSet; // optional
  public @org.apache.thrift.annotation.Nullable TSQueryNonAlignDataSet nonAlignQueryDataSet; // optional
  public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.Integer> columnNameIndexMap; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> sgColumns; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Byte> aliasColumns; // optional
  public @org.apache.thrift.annotation.Nullable TSTracingInfo tracingInfo; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<java.nio.ByteBuffer> queryResult; // optional
  public boolean moreData; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String database; // optional
  public boolean tableModel; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Integer> columnIndex2TsBlockColumnIndexList; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    STATUS((short)1, "status"),
    QUERY_ID((short)2, "queryId"),
    COLUMNS((short)3, "columns"),
    OPERATION_TYPE((short)4, "operationType"),
    IGNORE_TIME_STAMP((short)5, "ignoreTimeStamp"),
    DATA_TYPE_LIST((short)6, "dataTypeList"),
    QUERY_DATA_SET((short)7, "queryDataSet"),
    NON_ALIGN_QUERY_DATA_SET((short)8, "nonAlignQueryDataSet"),
    COLUMN_NAME_INDEX_MAP((short)9, "columnNameIndexMap"),
    SG_COLUMNS((short)10, "sgColumns"),
    ALIAS_COLUMNS((short)11, "aliasColumns"),
    TRACING_INFO((short)12, "tracingInfo"),
    QUERY_RESULT((short)13, "queryResult"),
    MORE_DATA((short)14, "moreData"),
    DATABASE((short)15, "database"),
    TABLE_MODEL((short)16, "tableModel"),
    COLUMN_INDEX2_TS_BLOCK_COLUMN_INDEX_LIST((short)17, "columnIndex2TsBlockColumnIndexList");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // STATUS
          return STATUS;
        case 2: // QUERY_ID
          return QUERY_ID;
        case 3: // COLUMNS
          return COLUMNS;
        case 4: // OPERATION_TYPE
          return OPERATION_TYPE;
        case 5: // IGNORE_TIME_STAMP
          return IGNORE_TIME_STAMP;
        case 6: // DATA_TYPE_LIST
          return DATA_TYPE_LIST;
        case 7: // QUERY_DATA_SET
          return QUERY_DATA_SET;
        case 8: // NON_ALIGN_QUERY_DATA_SET
          return NON_ALIGN_QUERY_DATA_SET;
        case 9: // COLUMN_NAME_INDEX_MAP
          return COLUMN_NAME_INDEX_MAP;
        case 10: // SG_COLUMNS
          return SG_COLUMNS;
        case 11: // ALIAS_COLUMNS
          return ALIAS_COLUMNS;
        case 12: // TRACING_INFO
          return TRACING_INFO;
        case 13: // QUERY_RESULT
          return QUERY_RESULT;
        case 14: // MORE_DATA
          return MORE_DATA;
        case 15: // DATABASE
          return DATABASE;
        case 16: // TABLE_MODEL
          return TABLE_MODEL;
        case 17: // COLUMN_INDEX2_TS_BLOCK_COLUMN_INDEX_LIST
          return COLUMN_INDEX2_TS_BLOCK_COLUMN_INDEX_LIST;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __QUERYID_ISSET_ID = 0;
  private static final int __IGNORETIMESTAMP_ISSET_ID = 1;
  private static final int __MOREDATA_ISSET_ID = 2;
  private static final int __TABLEMODEL_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.QUERY_ID,_Fields.COLUMNS,_Fields.OPERATION_TYPE,_Fields.IGNORE_TIME_STAMP,_Fields.DATA_TYPE_LIST,_Fields.QUERY_DATA_SET,_Fields.NON_ALIGN_QUERY_DATA_SET,_Fields.COLUMN_NAME_INDEX_MAP,_Fields.SG_COLUMNS,_Fields.ALIAS_COLUMNS,_Fields.TRACING_INFO,_Fields.QUERY_RESULT,_Fields.MORE_DATA,_Fields.DATABASE,_Fields.TABLE_MODEL,_Fields.COLUMN_INDEX2_TS_BLOCK_COLUMN_INDEX_LIST};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.iotdb.common.rpc.thrift.TSStatus.class)));
    tmpMap.put(_Fields.QUERY_ID, new org.apache.thrift.meta_data.FieldMetaData("queryId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.COLUMNS, new org.apache.thrift.meta_data.FieldMetaData("columns", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.OPERATION_TYPE, new org.apache.thrift.meta_data.FieldMetaData("operationType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IGNORE_TIME_STAMP, new org.apache.thrift.meta_data.FieldMetaData("ignoreTimeStamp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.DATA_TYPE_LIST, new org.apache.thrift.meta_data.FieldMetaData("dataTypeList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.QUERY_DATA_SET, new org.apache.thrift.meta_data.FieldMetaData("queryDataSet", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TSQueryDataSet.class)));
    tmpMap.put(_Fields.NON_ALIGN_QUERY_DATA_SET, new org.apache.thrift.meta_data.FieldMetaData("nonAlignQueryDataSet", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TSQueryNonAlignDataSet.class)));
    tmpMap.put(_Fields.COLUMN_NAME_INDEX_MAP, new org.apache.thrift.meta_data.FieldMetaData("columnNameIndexMap", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.SG_COLUMNS, new org.apache.thrift.meta_data.FieldMetaData("sgColumns", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.ALIAS_COLUMNS, new org.apache.thrift.meta_data.FieldMetaData("aliasColumns", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE))));
    tmpMap.put(_Fields.TRACING_INFO, new org.apache.thrift.meta_data.FieldMetaData("tracingInfo", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TSTracingInfo.class)));
    tmpMap.put(_Fields.QUERY_RESULT, new org.apache.thrift.meta_data.FieldMetaData("queryResult", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING            , true))));
    tmpMap.put(_Fields.MORE_DATA, new org.apache.thrift.meta_data.FieldMetaData("moreData", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.DATABASE, new org.apache.thrift.meta_data.FieldMetaData("database", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TABLE_MODEL, new org.apache.thrift.meta_data.FieldMetaData("tableModel", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.COLUMN_INDEX2_TS_BLOCK_COLUMN_INDEX_LIST, new org.apache.thrift.meta_data.FieldMetaData("columnIndex2TsBlockColumnIndexList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TSExecuteStatementResp.class, metaDataMap);
  }

  public TSExecuteStatementResp() {
  }

  public TSExecuteStatementResp(
    org.apache.iotdb.common.rpc.thrift.TSStatus status)
  {
    this();
    this.status = status;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TSExecuteStatementResp(TSExecuteStatementResp other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetStatus()) {
      this.status = new org.apache.iotdb.common.rpc.thrift.TSStatus(other.status);
    }
    this.queryId = other.queryId;
    if (other.isSetColumns()) {
      java.util.List<java.lang.String> __this__columns = new java.util.ArrayList<java.lang.String>(other.columns);
      this.columns = __this__columns;
    }
    if (other.isSetOperationType()) {
      this.operationType = other.operationType;
    }
    this.ignoreTimeStamp = other.ignoreTimeStamp;
    if (other.isSetDataTypeList()) {
      java.util.List<java.lang.String> __this__dataTypeList = new java.util.ArrayList<java.lang.String>(other.dataTypeList);
      this.dataTypeList = __this__dataTypeList;
    }
    if (other.isSetQueryDataSet()) {
      this.queryDataSet = new TSQueryDataSet(other.queryDataSet);
    }
    if (other.isSetNonAlignQueryDataSet()) {
      this.nonAlignQueryDataSet = new TSQueryNonAlignDataSet(other.nonAlignQueryDataSet);
    }
    if (other.isSetColumnNameIndexMap()) {
      java.util.Map<java.lang.String,java.lang.Integer> __this__columnNameIndexMap = new java.util.HashMap<java.lang.String,java.lang.Integer>(other.columnNameIndexMap);
      this.columnNameIndexMap = __this__columnNameIndexMap;
    }
    if (other.isSetSgColumns()) {
      java.util.List<java.lang.String> __this__sgColumns = new java.util.ArrayList<java.lang.String>(other.sgColumns);
      this.sgColumns = __this__sgColumns;
    }
    if (other.isSetAliasColumns()) {
      java.util.List<java.lang.Byte> __this__aliasColumns = new java.util.ArrayList<java.lang.Byte>(other.aliasColumns);
      this.aliasColumns = __this__aliasColumns;
    }
    if (other.isSetTracingInfo()) {
      this.tracingInfo = new TSTracingInfo(other.tracingInfo);
    }
    if (other.isSetQueryResult()) {
      java.util.List<java.nio.ByteBuffer> __this__queryResult = new java.util.ArrayList<java.nio.ByteBuffer>(other.queryResult);
      this.queryResult = __this__queryResult;
    }
    this.moreData = other.moreData;
    if (other.isSetDatabase()) {
      this.database = other.database;
    }
    this.tableModel = other.tableModel;
    if (other.isSetColumnIndex2TsBlockColumnIndexList()) {
      java.util.List<java.lang.Integer> __this__columnIndex2TsBlockColumnIndexList = new java.util.ArrayList<java.lang.Integer>(other.columnIndex2TsBlockColumnIndexList);
      this.columnIndex2TsBlockColumnIndexList = __this__columnIndex2TsBlockColumnIndexList;
    }
  }

  @Override
  public TSExecuteStatementResp deepCopy() {
    return new TSExecuteStatementResp(this);
  }

  @Override
  public void clear() {
    this.status = null;
    setQueryIdIsSet(false);
    this.queryId = 0;
    this.columns = null;
    this.operationType = null;
    setIgnoreTimeStampIsSet(false);
    this.ignoreTimeStamp = false;
    this.dataTypeList = null;
    this.queryDataSet = null;
    this.nonAlignQueryDataSet = null;
    this.columnNameIndexMap = null;
    this.sgColumns = null;
    this.aliasColumns = null;
    this.tracingInfo = null;
    this.queryResult = null;
    setMoreDataIsSet(false);
    this.moreData = false;
    this.database = null;
    setTableModelIsSet(false);
    this.tableModel = false;
    this.columnIndex2TsBlockColumnIndexList = null;
  }

  @org.apache.thrift.annotation.Nullable
  public org.apache.iotdb.common.rpc.thrift.TSStatus getStatus() {
    return this.status;
  }

  public TSExecuteStatementResp setStatus(@org.apache.thrift.annotation.Nullable org.apache.iotdb.common.rpc.thrift.TSStatus status) {
    this.status = status;
    return this;
  }

  public void unsetStatus() {
    this.status = null;
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return this.status != null;
  }

  public void setStatusIsSet(boolean value) {
    if (!value) {
      this.status = null;
    }
  }

  public long getQueryId() {
    return this.queryId;
  }

  public TSExecuteStatementResp setQueryId(long queryId) {
    this.queryId = queryId;
    setQueryIdIsSet(true);
    return this;
  }

  public void unsetQueryId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __QUERYID_ISSET_ID);
  }

  /** Returns true if field queryId is set (has been assigned a value) and false otherwise */
  public boolean isSetQueryId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __QUERYID_ISSET_ID);
  }

  public void setQueryIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __QUERYID_ISSET_ID, value);
  }

  public int getColumnsSize() {
    return (this.columns == null) ? 0 : this.columns.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.String> getColumnsIterator() {
    return (this.columns == null) ? null : this.columns.iterator();
  }

  public void addToColumns(java.lang.String elem) {
    if (this.columns == null) {
      this.columns = new java.util.ArrayList<java.lang.String>();
    }
    this.columns.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.String> getColumns() {
    return this.columns;
  }

  public TSExecuteStatementResp setColumns(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> columns) {
    this.columns = columns;
    return this;
  }

  public void unsetColumns() {
    this.columns = null;
  }

  /** Returns true if field columns is set (has been assigned a value) and false otherwise */
  public boolean isSetColumns() {
    return this.columns != null;
  }

  public void setColumnsIsSet(boolean value) {
    if (!value) {
      this.columns = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getOperationType() {
    return this.operationType;
  }

  public TSExecuteStatementResp setOperationType(@org.apache.thrift.annotation.Nullable java.lang.String operationType) {
    this.operationType = operationType;
    return this;
  }

  public void unsetOperationType() {
    this.operationType = null;
  }

  /** Returns true if field operationType is set (has been assigned a value) and false otherwise */
  public boolean isSetOperationType() {
    return this.operationType != null;
  }

  public void setOperationTypeIsSet(boolean value) {
    if (!value) {
      this.operationType = null;
    }
  }

  public boolean isIgnoreTimeStamp() {
    return this.ignoreTimeStamp;
  }

  public TSExecuteStatementResp setIgnoreTimeStamp(boolean ignoreTimeStamp) {
    this.ignoreTimeStamp = ignoreTimeStamp;
    setIgnoreTimeStampIsSet(true);
    return this;
  }

  public void unsetIgnoreTimeStamp() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __IGNORETIMESTAMP_ISSET_ID);
  }

  /** Returns true if field ignoreTimeStamp is set (has been assigned a value) and false otherwise */
  public boolean isSetIgnoreTimeStamp() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __IGNORETIMESTAMP_ISSET_ID);
  }

  public void setIgnoreTimeStampIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __IGNORETIMESTAMP_ISSET_ID, value);
  }

  public int getDataTypeListSize() {
    return (this.dataTypeList == null) ? 0 : this.dataTypeList.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.String> getDataTypeListIterator() {
    return (this.dataTypeList == null) ? null : this.dataTypeList.iterator();
  }

  public void addToDataTypeList(java.lang.String elem) {
    if (this.dataTypeList == null) {
      this.dataTypeList = new java.util.ArrayList<java.lang.String>();
    }
    this.dataTypeList.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.String> getDataTypeList() {
    return this.dataTypeList;
  }

  public TSExecuteStatementResp setDataTypeList(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> dataTypeList) {
    this.dataTypeList = dataTypeList;
    return this;
  }

  public void unsetDataTypeList() {
    this.dataTypeList = null;
  }

  /** Returns true if field dataTypeList is set (has been assigned a value) and false otherwise */
  public boolean isSetDataTypeList() {
    return this.dataTypeList != null;
  }

  public void setDataTypeListIsSet(boolean value) {
    if (!value) {
      this.dataTypeList = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TSQueryDataSet getQueryDataSet() {
    return this.queryDataSet;
  }

  public TSExecuteStatementResp setQueryDataSet(@org.apache.thrift.annotation.Nullable TSQueryDataSet queryDataSet) {
    this.queryDataSet = queryDataSet;
    return this;
  }

  public void unsetQueryDataSet() {
    this.queryDataSet = null;
  }

  /** Returns true if field queryDataSet is set (has been assigned a value) and false otherwise */
  public boolean isSetQueryDataSet() {
    return this.queryDataSet != null;
  }

  public void setQueryDataSetIsSet(boolean value) {
    if (!value) {
      this.queryDataSet = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TSQueryNonAlignDataSet getNonAlignQueryDataSet() {
    return this.nonAlignQueryDataSet;
  }

  public TSExecuteStatementResp setNonAlignQueryDataSet(@org.apache.thrift.annotation.Nullable TSQueryNonAlignDataSet nonAlignQueryDataSet) {
    this.nonAlignQueryDataSet = nonAlignQueryDataSet;
    return this;
  }

  public void unsetNonAlignQueryDataSet() {
    this.nonAlignQueryDataSet = null;
  }

  /** Returns true if field nonAlignQueryDataSet is set (has been assigned a value) and false otherwise */
  public boolean isSetNonAlignQueryDataSet() {
    return this.nonAlignQueryDataSet != null;
  }

  public void setNonAlignQueryDataSetIsSet(boolean value) {
    if (!value) {
      this.nonAlignQueryDataSet = null;
    }
  }

  public int getColumnNameIndexMapSize() {
    return (this.columnNameIndexMap == null) ? 0 : this.columnNameIndexMap.size();
  }

  public void putToColumnNameIndexMap(java.lang.String key, int val) {
    if (this.columnNameIndexMap == null) {
      this.columnNameIndexMap = new java.util.HashMap<java.lang.String,java.lang.Integer>();
    }
    this.columnNameIndexMap.put(key, val);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Map<java.lang.String,java.lang.Integer> getColumnNameIndexMap() {
    return this.columnNameIndexMap;
  }

  public TSExecuteStatementResp setColumnNameIndexMap(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.Integer> columnNameIndexMap) {
    this.columnNameIndexMap = columnNameIndexMap;
    return this;
  }

  public void unsetColumnNameIndexMap() {
    this.columnNameIndexMap = null;
  }

  /** Returns true if field columnNameIndexMap is set (has been assigned a value) and false otherwise */
  public boolean isSetColumnNameIndexMap() {
    return this.columnNameIndexMap != null;
  }

  public void setColumnNameIndexMapIsSet(boolean value) {
    if (!value) {
      this.columnNameIndexMap = null;
    }
  }

  public int getSgColumnsSize() {
    return (this.sgColumns == null) ? 0 : this.sgColumns.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.String> getSgColumnsIterator() {
    return (this.sgColumns == null) ? null : this.sgColumns.iterator();
  }

  public void addToSgColumns(java.lang.String elem) {
    if (this.sgColumns == null) {
      this.sgColumns = new java.util.ArrayList<java.lang.String>();
    }
    this.sgColumns.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.String> getSgColumns() {
    return this.sgColumns;
  }

  public TSExecuteStatementResp setSgColumns(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> sgColumns) {
    this.sgColumns = sgColumns;
    return this;
  }

  public void unsetSgColumns() {
    this.sgColumns = null;
  }

  /** Returns true if field sgColumns is set (has been assigned a value) and false otherwise */
  public boolean isSetSgColumns() {
    return this.sgColumns != null;
  }

  public void setSgColumnsIsSet(boolean value) {
    if (!value) {
      this.sgColumns = null;
    }
  }

  public int getAliasColumnsSize() {
    return (this.aliasColumns == null) ? 0 : this.aliasColumns.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.Byte> getAliasColumnsIterator() {
    return (this.aliasColumns == null) ? null : this.aliasColumns.iterator();
  }

  public void addToAliasColumns(byte elem) {
    if (this.aliasColumns == null) {
      this.aliasColumns = new java.util.ArrayList<java.lang.Byte>();
    }
    this.aliasColumns.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.Byte> getAliasColumns() {
    return this.aliasColumns;
  }

  public TSExecuteStatementResp setAliasColumns(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Byte> aliasColumns) {
    this.aliasColumns = aliasColumns;
    return this;
  }

  public void unsetAliasColumns() {
    this.aliasColumns = null;
  }

  /** Returns true if field aliasColumns is set (has been assigned a value) and false otherwise */
  public boolean isSetAliasColumns() {
    return this.aliasColumns != null;
  }

  public void setAliasColumnsIsSet(boolean value) {
    if (!value) {
      this.aliasColumns = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TSTracingInfo getTracingInfo() {
    return this.tracingInfo;
  }

  public TSExecuteStatementResp setTracingInfo(@org.apache.thrift.annotation.Nullable TSTracingInfo tracingInfo) {
    this.tracingInfo = tracingInfo;
    return this;
  }

  public void unsetTracingInfo() {
    this.tracingInfo = null;
  }

  /** Returns true if field tracingInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetTracingInfo() {
    return this.tracingInfo != null;
  }

  public void setTracingInfoIsSet(boolean value) {
    if (!value) {
      this.tracingInfo = null;
    }
  }

  public int getQueryResultSize() {
    return (this.queryResult == null) ? 0 : this.queryResult.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.nio.ByteBuffer> getQueryResultIterator() {
    return (this.queryResult == null) ? null : this.queryResult.iterator();
  }

  public void addToQueryResult(java.nio.ByteBuffer elem) {
    if (this.queryResult == null) {
      this.queryResult = new java.util.ArrayList<java.nio.ByteBuffer>();
    }
    this.queryResult.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.nio.ByteBuffer> getQueryResult() {
    return this.queryResult;
  }

  public TSExecuteStatementResp setQueryResult(@org.apache.thrift.annotation.Nullable java.util.List<java.nio.ByteBuffer> queryResult) {
    this.queryResult = queryResult;
    return this;
  }

  public void unsetQueryResult() {
    this.queryResult = null;
  }

  /** Returns true if field queryResult is set (has been assigned a value) and false otherwise */
  public boolean isSetQueryResult() {
    return this.queryResult != null;
  }

  public void setQueryResultIsSet(boolean value) {
    if (!value) {
      this.queryResult = null;
    }
  }

  public boolean isMoreData() {
    return this.moreData;
  }

  public TSExecuteStatementResp setMoreData(boolean moreData) {
    this.moreData = moreData;
    setMoreDataIsSet(true);
    return this;
  }

  public void unsetMoreData() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MOREDATA_ISSET_ID);
  }

  /** Returns true if field moreData is set (has been assigned a value) and false otherwise */
  public boolean isSetMoreData() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MOREDATA_ISSET_ID);
  }

  public void setMoreDataIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MOREDATA_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getDatabase() {
    return this.database;
  }

  public TSExecuteStatementResp setDatabase(@org.apache.thrift.annotation.Nullable java.lang.String database) {
    this.database = database;
    return this;
  }

  public void unsetDatabase() {
    this.database = null;
  }

  /** Returns true if field database is set (has been assigned a value) and false otherwise */
  public boolean isSetDatabase() {
    return this.database != null;
  }

  public void setDatabaseIsSet(boolean value) {
    if (!value) {
      this.database = null;
    }
  }

  public boolean isTableModel() {
    return this.tableModel;
  }

  public TSExecuteStatementResp setTableModel(boolean tableModel) {
    this.tableModel = tableModel;
    setTableModelIsSet(true);
    return this;
  }

  public void unsetTableModel() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TABLEMODEL_ISSET_ID);
  }

  /** Returns true if field tableModel is set (has been assigned a value) and false otherwise */
  public boolean isSetTableModel() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TABLEMODEL_ISSET_ID);
  }

  public void setTableModelIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TABLEMODEL_ISSET_ID, value);
  }

  public int getColumnIndex2TsBlockColumnIndexListSize() {
    return (this.columnIndex2TsBlockColumnIndexList == null) ? 0 : this.columnIndex2TsBlockColumnIndexList.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.Integer> getColumnIndex2TsBlockColumnIndexListIterator() {
    return (this.columnIndex2TsBlockColumnIndexList == null) ? null : this.columnIndex2TsBlockColumnIndexList.iterator();
  }

  public void addToColumnIndex2TsBlockColumnIndexList(int elem) {
    if (this.columnIndex2TsBlockColumnIndexList == null) {
      this.columnIndex2TsBlockColumnIndexList = new java.util.ArrayList<java.lang.Integer>();
    }
    this.columnIndex2TsBlockColumnIndexList.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.Integer> getColumnIndex2TsBlockColumnIndexList() {
    return this.columnIndex2TsBlockColumnIndexList;
  }

  public TSExecuteStatementResp setColumnIndex2TsBlockColumnIndexList(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Integer> columnIndex2TsBlockColumnIndexList) {
    this.columnIndex2TsBlockColumnIndexList = columnIndex2TsBlockColumnIndexList;
    return this;
  }

  public void unsetColumnIndex2TsBlockColumnIndexList() {
    this.columnIndex2TsBlockColumnIndexList = null;
  }

  /** Returns true if field columnIndex2TsBlockColumnIndexList is set (has been assigned a value) and false otherwise */
  public boolean isSetColumnIndex2TsBlockColumnIndexList() {
    return this.columnIndex2TsBlockColumnIndexList != null;
  }

  public void setColumnIndex2TsBlockColumnIndexListIsSet(boolean value) {
    if (!value) {
      this.columnIndex2TsBlockColumnIndexList = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((org.apache.iotdb.common.rpc.thrift.TSStatus)value);
      }
      break;

    case QUERY_ID:
      if (value == null) {
        unsetQueryId();
      } else {
        setQueryId((java.lang.Long)value);
      }
      break;

    case COLUMNS:
      if (value == null) {
        unsetColumns();
      } else {
        setColumns((java.util.List<java.lang.String>)value);
      }
      break;

    case OPERATION_TYPE:
      if (value == null) {
        unsetOperationType();
      } else {
        setOperationType((java.lang.String)value);
      }
      break;

    case IGNORE_TIME_STAMP:
      if (value == null) {
        unsetIgnoreTimeStamp();
      } else {
        setIgnoreTimeStamp((java.lang.Boolean)value);
      }
      break;

    case DATA_TYPE_LIST:
      if (value == null) {
        unsetDataTypeList();
      } else {
        setDataTypeList((java.util.List<java.lang.String>)value);
      }
      break;

    case QUERY_DATA_SET:
      if (value == null) {
        unsetQueryDataSet();
      } else {
        setQueryDataSet((TSQueryDataSet)value);
      }
      break;

    case NON_ALIGN_QUERY_DATA_SET:
      if (value == null) {
        unsetNonAlignQueryDataSet();
      } else {
        setNonAlignQueryDataSet((TSQueryNonAlignDataSet)value);
      }
      break;

    case COLUMN_NAME_INDEX_MAP:
      if (value == null) {
        unsetColumnNameIndexMap();
      } else {
        setColumnNameIndexMap((java.util.Map<java.lang.String,java.lang.Integer>)value);
      }
      break;

    case SG_COLUMNS:
      if (value == null) {
        unsetSgColumns();
      } else {
        setSgColumns((java.util.List<java.lang.String>)value);
      }
      break;

    case ALIAS_COLUMNS:
      if (value == null) {
        unsetAliasColumns();
      } else {
        setAliasColumns((java.util.List<java.lang.Byte>)value);
      }
      break;

    case TRACING_INFO:
      if (value == null) {
        unsetTracingInfo();
      } else {
        setTracingInfo((TSTracingInfo)value);
      }
      break;

    case QUERY_RESULT:
      if (value == null) {
        unsetQueryResult();
      } else {
        setQueryResult((java.util.List<java.nio.ByteBuffer>)value);
      }
      break;

    case MORE_DATA:
      if (value == null) {
        unsetMoreData();
      } else {
        setMoreData((java.lang.Boolean)value);
      }
      break;

    case DATABASE:
      if (value == null) {
        unsetDatabase();
      } else {
        setDatabase((java.lang.String)value);
      }
      break;

    case TABLE_MODEL:
      if (value == null) {
        unsetTableModel();
      } else {
        setTableModel((java.lang.Boolean)value);
      }
      break;

    case COLUMN_INDEX2_TS_BLOCK_COLUMN_INDEX_LIST:
      if (value == null) {
        unsetColumnIndex2TsBlockColumnIndexList();
      } else {
        setColumnIndex2TsBlockColumnIndexList((java.util.List<java.lang.Integer>)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case STATUS:
      return getStatus();

    case QUERY_ID:
      return getQueryId();

    case COLUMNS:
      return getColumns();

    case OPERATION_TYPE:
      return getOperationType();

    case IGNORE_TIME_STAMP:
      return isIgnoreTimeStamp();

    case DATA_TYPE_LIST:
      return getDataTypeList();

    case QUERY_DATA_SET:
      return getQueryDataSet();

    case NON_ALIGN_QUERY_DATA_SET:
      return getNonAlignQueryDataSet();

    case COLUMN_NAME_INDEX_MAP:
      return getColumnNameIndexMap();

    case SG_COLUMNS:
      return getSgColumns();

    case ALIAS_COLUMNS:
      return getAliasColumns();

    case TRACING_INFO:
      return getTracingInfo();

    case QUERY_RESULT:
      return getQueryResult();

    case MORE_DATA:
      return isMoreData();

    case DATABASE:
      return getDatabase();

    case TABLE_MODEL:
      return isTableModel();

    case COLUMN_INDEX2_TS_BLOCK_COLUMN_INDEX_LIST:
      return getColumnIndex2TsBlockColumnIndexList();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case STATUS:
      return isSetStatus();
    case QUERY_ID:
      return isSetQueryId();
    case COLUMNS:
      return isSetColumns();
    case OPERATION_TYPE:
      return isSetOperationType();
    case IGNORE_TIME_STAMP:
      return isSetIgnoreTimeStamp();
    case DATA_TYPE_LIST:
      return isSetDataTypeList();
    case QUERY_DATA_SET:
      return isSetQueryDataSet();
    case NON_ALIGN_QUERY_DATA_SET:
      return isSetNonAlignQueryDataSet();
    case COLUMN_NAME_INDEX_MAP:
      return isSetColumnNameIndexMap();
    case SG_COLUMNS:
      return isSetSgColumns();
    case ALIAS_COLUMNS:
      return isSetAliasColumns();
    case TRACING_INFO:
      return isSetTracingInfo();
    case QUERY_RESULT:
      return isSetQueryResult();
    case MORE_DATA:
      return isSetMoreData();
    case DATABASE:
      return isSetDatabase();
    case TABLE_MODEL:
      return isSetTableModel();
    case COLUMN_INDEX2_TS_BLOCK_COLUMN_INDEX_LIST:
      return isSetColumnIndex2TsBlockColumnIndexList();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TSExecuteStatementResp)
      return this.equals((TSExecuteStatementResp)that);
    return false;
  }

  public boolean equals(TSExecuteStatementResp that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_status = true && this.isSetStatus();
    boolean that_present_status = true && that.isSetStatus();
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (!this.status.equals(that.status))
        return false;
    }

    boolean this_present_queryId = true && this.isSetQueryId();
    boolean that_present_queryId = true && that.isSetQueryId();
    if (this_present_queryId || that_present_queryId) {
      if (!(this_present_queryId && that_present_queryId))
        return false;
      if (this.queryId != that.queryId)
        return false;
    }

    boolean this_present_columns = true && this.isSetColumns();
    boolean that_present_columns = true && that.isSetColumns();
    if (this_present_columns || that_present_columns) {
      if (!(this_present_columns && that_present_columns))
        return false;
      if (!this.columns.equals(that.columns))
        return false;
    }

    boolean this_present_operationType = true && this.isSetOperationType();
    boolean that_present_operationType = true && that.isSetOperationType();
    if (this_present_operationType || that_present_operationType) {
      if (!(this_present_operationType && that_present_operationType))
        return false;
      if (!this.operationType.equals(that.operationType))
        return false;
    }

    boolean this_present_ignoreTimeStamp = true && this.isSetIgnoreTimeStamp();
    boolean that_present_ignoreTimeStamp = true && that.isSetIgnoreTimeStamp();
    if (this_present_ignoreTimeStamp || that_present_ignoreTimeStamp) {
      if (!(this_present_ignoreTimeStamp && that_present_ignoreTimeStamp))
        return false;
      if (this.ignoreTimeStamp != that.ignoreTimeStamp)
        return false;
    }

    boolean this_present_dataTypeList = true && this.isSetDataTypeList();
    boolean that_present_dataTypeList = true && that.isSetDataTypeList();
    if (this_present_dataTypeList || that_present_dataTypeList) {
      if (!(this_present_dataTypeList && that_present_dataTypeList))
        return false;
      if (!this.dataTypeList.equals(that.dataTypeList))
        return false;
    }

    boolean this_present_queryDataSet = true && this.isSetQueryDataSet();
    boolean that_present_queryDataSet = true && that.isSetQueryDataSet();
    if (this_present_queryDataSet || that_present_queryDataSet) {
      if (!(this_present_queryDataSet && that_present_queryDataSet))
        return false;
      if (!this.queryDataSet.equals(that.queryDataSet))
        return false;
    }

    boolean this_present_nonAlignQueryDataSet = true && this.isSetNonAlignQueryDataSet();
    boolean that_present_nonAlignQueryDataSet = true && that.isSetNonAlignQueryDataSet();
    if (this_present_nonAlignQueryDataSet || that_present_nonAlignQueryDataSet) {
      if (!(this_present_nonAlignQueryDataSet && that_present_nonAlignQueryDataSet))
        return false;
      if (!this.nonAlignQueryDataSet.equals(that.nonAlignQueryDataSet))
        return false;
    }

    boolean this_present_columnNameIndexMap = true && this.isSetColumnNameIndexMap();
    boolean that_present_columnNameIndexMap = true && that.isSetColumnNameIndexMap();
    if (this_present_columnNameIndexMap || that_present_columnNameIndexMap) {
      if (!(this_present_columnNameIndexMap && that_present_columnNameIndexMap))
        return false;
      if (!this.columnNameIndexMap.equals(that.columnNameIndexMap))
        return false;
    }

    boolean this_present_sgColumns = true && this.isSetSgColumns();
    boolean that_present_sgColumns = true && that.isSetSgColumns();
    if (this_present_sgColumns || that_present_sgColumns) {
      if (!(this_present_sgColumns && that_present_sgColumns))
        return false;
      if (!this.sgColumns.equals(that.sgColumns))
        return false;
    }

    boolean this_present_aliasColumns = true && this.isSetAliasColumns();
    boolean that_present_aliasColumns = true && that.isSetAliasColumns();
    if (this_present_aliasColumns || that_present_aliasColumns) {
      if (!(this_present_aliasColumns && that_present_aliasColumns))
        return false;
      if (!this.aliasColumns.equals(that.aliasColumns))
        return false;
    }

    boolean this_present_tracingInfo = true && this.isSetTracingInfo();
    boolean that_present_tracingInfo = true && that.isSetTracingInfo();
    if (this_present_tracingInfo || that_present_tracingInfo) {
      if (!(this_present_tracingInfo && that_present_tracingInfo))
        return false;
      if (!this.tracingInfo.equals(that.tracingInfo))
        return false;
    }

    boolean this_present_queryResult = true && this.isSetQueryResult();
    boolean that_present_queryResult = true && that.isSetQueryResult();
    if (this_present_queryResult || that_present_queryResult) {
      if (!(this_present_queryResult && that_present_queryResult))
        return false;
      if (!this.queryResult.equals(that.queryResult))
        return false;
    }

    boolean this_present_moreData = true && this.isSetMoreData();
    boolean that_present_moreData = true && that.isSetMoreData();
    if (this_present_moreData || that_present_moreData) {
      if (!(this_present_moreData && that_present_moreData))
        return false;
      if (this.moreData != that.moreData)
        return false;
    }

    boolean this_present_database = true && this.isSetDatabase();
    boolean that_present_database = true && that.isSetDatabase();
    if (this_present_database || that_present_database) {
      if (!(this_present_database && that_present_database))
        return false;
      if (!this.database.equals(that.database))
        return false;
    }

    boolean this_present_tableModel = true && this.isSetTableModel();
    boolean that_present_tableModel = true && that.isSetTableModel();
    if (this_present_tableModel || that_present_tableModel) {
      if (!(this_present_tableModel && that_present_tableModel))
        return false;
      if (this.tableModel != that.tableModel)
        return false;
    }

    boolean this_present_columnIndex2TsBlockColumnIndexList = true && this.isSetColumnIndex2TsBlockColumnIndexList();
    boolean that_present_columnIndex2TsBlockColumnIndexList = true && that.isSetColumnIndex2TsBlockColumnIndexList();
    if (this_present_columnIndex2TsBlockColumnIndexList || that_present_columnIndex2TsBlockColumnIndexList) {
      if (!(this_present_columnIndex2TsBlockColumnIndexList && that_present_columnIndex2TsBlockColumnIndexList))
        return false;
      if (!this.columnIndex2TsBlockColumnIndexList.equals(that.columnIndex2TsBlockColumnIndexList))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetStatus()) ? 131071 : 524287);
    if (isSetStatus())
      hashCode = hashCode * 8191 + status.hashCode();

    hashCode = hashCode * 8191 + ((isSetQueryId()) ? 131071 : 524287);
    if (isSetQueryId())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(queryId);

    hashCode = hashCode * 8191 + ((isSetColumns()) ? 131071 : 524287);
    if (isSetColumns())
      hashCode = hashCode * 8191 + columns.hashCode();

    hashCode = hashCode * 8191 + ((isSetOperationType()) ? 131071 : 524287);
    if (isSetOperationType())
      hashCode = hashCode * 8191 + operationType.hashCode();

    hashCode = hashCode * 8191 + ((isSetIgnoreTimeStamp()) ? 131071 : 524287);
    if (isSetIgnoreTimeStamp())
      hashCode = hashCode * 8191 + ((ignoreTimeStamp) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetDataTypeList()) ? 131071 : 524287);
    if (isSetDataTypeList())
      hashCode = hashCode * 8191 + dataTypeList.hashCode();

    hashCode = hashCode * 8191 + ((isSetQueryDataSet()) ? 131071 : 524287);
    if (isSetQueryDataSet())
      hashCode = hashCode * 8191 + queryDataSet.hashCode();

    hashCode = hashCode * 8191 + ((isSetNonAlignQueryDataSet()) ? 131071 : 524287);
    if (isSetNonAlignQueryDataSet())
      hashCode = hashCode * 8191 + nonAlignQueryDataSet.hashCode();

    hashCode = hashCode * 8191 + ((isSetColumnNameIndexMap()) ? 131071 : 524287);
    if (isSetColumnNameIndexMap())
      hashCode = hashCode * 8191 + columnNameIndexMap.hashCode();

    hashCode = hashCode * 8191 + ((isSetSgColumns()) ? 131071 : 524287);
    if (isSetSgColumns())
      hashCode = hashCode * 8191 + sgColumns.hashCode();

    hashCode = hashCode * 8191 + ((isSetAliasColumns()) ? 131071 : 524287);
    if (isSetAliasColumns())
      hashCode = hashCode * 8191 + aliasColumns.hashCode();

    hashCode = hashCode * 8191 + ((isSetTracingInfo()) ? 131071 : 524287);
    if (isSetTracingInfo())
      hashCode = hashCode * 8191 + tracingInfo.hashCode();

    hashCode = hashCode * 8191 + ((isSetQueryResult()) ? 131071 : 524287);
    if (isSetQueryResult())
      hashCode = hashCode * 8191 + queryResult.hashCode();

    hashCode = hashCode * 8191 + ((isSetMoreData()) ? 131071 : 524287);
    if (isSetMoreData())
      hashCode = hashCode * 8191 + ((moreData) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetDatabase()) ? 131071 : 524287);
    if (isSetDatabase())
      hashCode = hashCode * 8191 + database.hashCode();

    hashCode = hashCode * 8191 + ((isSetTableModel()) ? 131071 : 524287);
    if (isSetTableModel())
      hashCode = hashCode * 8191 + ((tableModel) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetColumnIndex2TsBlockColumnIndexList()) ? 131071 : 524287);
    if (isSetColumnIndex2TsBlockColumnIndexList())
      hashCode = hashCode * 8191 + columnIndex2TsBlockColumnIndexList.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TSExecuteStatementResp other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetStatus(), other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetQueryId(), other.isSetQueryId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQueryId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.queryId, other.queryId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetColumns(), other.isSetColumns());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetColumns()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.columns, other.columns);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetOperationType(), other.isSetOperationType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOperationType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.operationType, other.operationType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetIgnoreTimeStamp(), other.isSetIgnoreTimeStamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIgnoreTimeStamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ignoreTimeStamp, other.ignoreTimeStamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetDataTypeList(), other.isSetDataTypeList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDataTypeList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dataTypeList, other.dataTypeList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetQueryDataSet(), other.isSetQueryDataSet());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQueryDataSet()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.queryDataSet, other.queryDataSet);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetNonAlignQueryDataSet(), other.isSetNonAlignQueryDataSet());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNonAlignQueryDataSet()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nonAlignQueryDataSet, other.nonAlignQueryDataSet);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetColumnNameIndexMap(), other.isSetColumnNameIndexMap());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetColumnNameIndexMap()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.columnNameIndexMap, other.columnNameIndexMap);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSgColumns(), other.isSetSgColumns());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSgColumns()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sgColumns, other.sgColumns);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetAliasColumns(), other.isSetAliasColumns());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAliasColumns()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.aliasColumns, other.aliasColumns);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTracingInfo(), other.isSetTracingInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTracingInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tracingInfo, other.tracingInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetQueryResult(), other.isSetQueryResult());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQueryResult()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.queryResult, other.queryResult);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetMoreData(), other.isSetMoreData());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMoreData()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.moreData, other.moreData);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetDatabase(), other.isSetDatabase());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDatabase()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.database, other.database);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTableModel(), other.isSetTableModel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTableModel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tableModel, other.tableModel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetColumnIndex2TsBlockColumnIndexList(), other.isSetColumnIndex2TsBlockColumnIndexList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetColumnIndex2TsBlockColumnIndexList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.columnIndex2TsBlockColumnIndexList, other.columnIndex2TsBlockColumnIndexList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TSExecuteStatementResp(");
    boolean first = true;

    sb.append("status:");
    if (this.status == null) {
      sb.append("null");
    } else {
      sb.append(this.status);
    }
    first = false;
    if (isSetQueryId()) {
      if (!first) sb.append(", ");
      sb.append("queryId:");
      sb.append(this.queryId);
      first = false;
    }
    if (isSetColumns()) {
      if (!first) sb.append(", ");
      sb.append("columns:");
      if (this.columns == null) {
        sb.append("null");
      } else {
        sb.append(this.columns);
      }
      first = false;
    }
    if (isSetOperationType()) {
      if (!first) sb.append(", ");
      sb.append("operationType:");
      if (this.operationType == null) {
        sb.append("null");
      } else {
        sb.append(this.operationType);
      }
      first = false;
    }
    if (isSetIgnoreTimeStamp()) {
      if (!first) sb.append(", ");
      sb.append("ignoreTimeStamp:");
      sb.append(this.ignoreTimeStamp);
      first = false;
    }
    if (isSetDataTypeList()) {
      if (!first) sb.append(", ");
      sb.append("dataTypeList:");
      if (this.dataTypeList == null) {
        sb.append("null");
      } else {
        sb.append(this.dataTypeList);
      }
      first = false;
    }
    if (isSetQueryDataSet()) {
      if (!first) sb.append(", ");
      sb.append("queryDataSet:");
      if (this.queryDataSet == null) {
        sb.append("null");
      } else {
        sb.append(this.queryDataSet);
      }
      first = false;
    }
    if (isSetNonAlignQueryDataSet()) {
      if (!first) sb.append(", ");
      sb.append("nonAlignQueryDataSet:");
      if (this.nonAlignQueryDataSet == null) {
        sb.append("null");
      } else {
        sb.append(this.nonAlignQueryDataSet);
      }
      first = false;
    }
    if (isSetColumnNameIndexMap()) {
      if (!first) sb.append(", ");
      sb.append("columnNameIndexMap:");
      if (this.columnNameIndexMap == null) {
        sb.append("null");
      } else {
        sb.append(this.columnNameIndexMap);
      }
      first = false;
    }
    if (isSetSgColumns()) {
      if (!first) sb.append(", ");
      sb.append("sgColumns:");
      if (this.sgColumns == null) {
        sb.append("null");
      } else {
        sb.append(this.sgColumns);
      }
      first = false;
    }
    if (isSetAliasColumns()) {
      if (!first) sb.append(", ");
      sb.append("aliasColumns:");
      if (this.aliasColumns == null) {
        sb.append("null");
      } else {
        sb.append(this.aliasColumns);
      }
      first = false;
    }
    if (isSetTracingInfo()) {
      if (!first) sb.append(", ");
      sb.append("tracingInfo:");
      if (this.tracingInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.tracingInfo);
      }
      first = false;
    }
    if (isSetQueryResult()) {
      if (!first) sb.append(", ");
      sb.append("queryResult:");
      if (this.queryResult == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.queryResult, sb);
      }
      first = false;
    }
    if (isSetMoreData()) {
      if (!first) sb.append(", ");
      sb.append("moreData:");
      sb.append(this.moreData);
      first = false;
    }
    if (isSetDatabase()) {
      if (!first) sb.append(", ");
      sb.append("database:");
      if (this.database == null) {
        sb.append("null");
      } else {
        sb.append(this.database);
      }
      first = false;
    }
    if (isSetTableModel()) {
      if (!first) sb.append(", ");
      sb.append("tableModel:");
      sb.append(this.tableModel);
      first = false;
    }
    if (isSetColumnIndex2TsBlockColumnIndexList()) {
      if (!first) sb.append(", ");
      sb.append("columnIndex2TsBlockColumnIndexList:");
      if (this.columnIndex2TsBlockColumnIndexList == null) {
        sb.append("null");
      } else {
        sb.append(this.columnIndex2TsBlockColumnIndexList);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (status == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'status' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (status != null) {
      status.validate();
    }
    if (queryDataSet != null) {
      queryDataSet.validate();
    }
    if (nonAlignQueryDataSet != null) {
      nonAlignQueryDataSet.validate();
    }
    if (tracingInfo != null) {
      tracingInfo.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TSExecuteStatementRespStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TSExecuteStatementRespStandardScheme getScheme() {
      return new TSExecuteStatementRespStandardScheme();
    }
  }

  private static class TSExecuteStatementRespStandardScheme extends org.apache.thrift.scheme.StandardScheme<TSExecuteStatementResp> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TSExecuteStatementResp struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.status = new org.apache.iotdb.common.rpc.thrift.TSStatus();
              struct.status.read(iprot);
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // QUERY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.queryId = iprot.readI64();
              struct.setQueryIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // COLUMNS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list48 = iprot.readListBegin();
                struct.columns = new java.util.ArrayList<java.lang.String>(_list48.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _elem49;
                for (int _i50 = 0; _i50 < _list48.size; ++_i50)
                {
                  _elem49 = iprot.readString();
                  struct.columns.add(_elem49);
                }
                iprot.readListEnd();
              }
              struct.setColumnsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // OPERATION_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.operationType = iprot.readString();
              struct.setOperationTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // IGNORE_TIME_STAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.ignoreTimeStamp = iprot.readBool();
              struct.setIgnoreTimeStampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // DATA_TYPE_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list51 = iprot.readListBegin();
                struct.dataTypeList = new java.util.ArrayList<java.lang.String>(_list51.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _elem52;
                for (int _i53 = 0; _i53 < _list51.size; ++_i53)
                {
                  _elem52 = iprot.readString();
                  struct.dataTypeList.add(_elem52);
                }
                iprot.readListEnd();
              }
              struct.setDataTypeListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // QUERY_DATA_SET
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.queryDataSet = new TSQueryDataSet();
              struct.queryDataSet.read(iprot);
              struct.setQueryDataSetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // NON_ALIGN_QUERY_DATA_SET
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.nonAlignQueryDataSet = new TSQueryNonAlignDataSet();
              struct.nonAlignQueryDataSet.read(iprot);
              struct.setNonAlignQueryDataSetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // COLUMN_NAME_INDEX_MAP
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map54 = iprot.readMapBegin();
                struct.columnNameIndexMap = new java.util.HashMap<java.lang.String,java.lang.Integer>(2*_map54.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _key55;
                int _val56;
                for (int _i57 = 0; _i57 < _map54.size; ++_i57)
                {
                  _key55 = iprot.readString();
                  _val56 = iprot.readI32();
                  struct.columnNameIndexMap.put(_key55, _val56);
                }
                iprot.readMapEnd();
              }
              struct.setColumnNameIndexMapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // SG_COLUMNS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list58 = iprot.readListBegin();
                struct.sgColumns = new java.util.ArrayList<java.lang.String>(_list58.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _elem59;
                for (int _i60 = 0; _i60 < _list58.size; ++_i60)
                {
                  _elem59 = iprot.readString();
                  struct.sgColumns.add(_elem59);
                }
                iprot.readListEnd();
              }
              struct.setSgColumnsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // ALIAS_COLUMNS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list61 = iprot.readListBegin();
                struct.aliasColumns = new java.util.ArrayList<java.lang.Byte>(_list61.size);
                byte _elem62;
                for (int _i63 = 0; _i63 < _list61.size; ++_i63)
                {
                  _elem62 = iprot.readByte();
                  struct.aliasColumns.add(_elem62);
                }
                iprot.readListEnd();
              }
              struct.setAliasColumnsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // TRACING_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.tracingInfo = new TSTracingInfo();
              struct.tracingInfo.read(iprot);
              struct.setTracingInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // QUERY_RESULT
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list64 = iprot.readListBegin();
                struct.queryResult = new java.util.ArrayList<java.nio.ByteBuffer>(_list64.size);
                @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer _elem65;
                for (int _i66 = 0; _i66 < _list64.size; ++_i66)
                {
                  _elem65 = iprot.readBinary();
                  struct.queryResult.add(_elem65);
                }
                iprot.readListEnd();
              }
              struct.setQueryResultIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // MORE_DATA
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.moreData = iprot.readBool();
              struct.setMoreDataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // DATABASE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.database = iprot.readString();
              struct.setDatabaseIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // TABLE_MODEL
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.tableModel = iprot.readBool();
              struct.setTableModelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // COLUMN_INDEX2_TS_BLOCK_COLUMN_INDEX_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list67 = iprot.readListBegin();
                struct.columnIndex2TsBlockColumnIndexList = new java.util.ArrayList<java.lang.Integer>(_list67.size);
                int _elem68;
                for (int _i69 = 0; _i69 < _list67.size; ++_i69)
                {
                  _elem68 = iprot.readI32();
                  struct.columnIndex2TsBlockColumnIndexList.add(_elem68);
                }
                iprot.readListEnd();
              }
              struct.setColumnIndex2TsBlockColumnIndexListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TSExecuteStatementResp struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.status != null) {
        oprot.writeFieldBegin(STATUS_FIELD_DESC);
        struct.status.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.isSetQueryId()) {
        oprot.writeFieldBegin(QUERY_ID_FIELD_DESC);
        oprot.writeI64(struct.queryId);
        oprot.writeFieldEnd();
      }
      if (struct.columns != null) {
        if (struct.isSetColumns()) {
          oprot.writeFieldBegin(COLUMNS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.columns.size()));
            for (java.lang.String _iter70 : struct.columns)
            {
              oprot.writeString(_iter70);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.operationType != null) {
        if (struct.isSetOperationType()) {
          oprot.writeFieldBegin(OPERATION_TYPE_FIELD_DESC);
          oprot.writeString(struct.operationType);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetIgnoreTimeStamp()) {
        oprot.writeFieldBegin(IGNORE_TIME_STAMP_FIELD_DESC);
        oprot.writeBool(struct.ignoreTimeStamp);
        oprot.writeFieldEnd();
      }
      if (struct.dataTypeList != null) {
        if (struct.isSetDataTypeList()) {
          oprot.writeFieldBegin(DATA_TYPE_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.dataTypeList.size()));
            for (java.lang.String _iter71 : struct.dataTypeList)
            {
              oprot.writeString(_iter71);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.queryDataSet != null) {
        if (struct.isSetQueryDataSet()) {
          oprot.writeFieldBegin(QUERY_DATA_SET_FIELD_DESC);
          struct.queryDataSet.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.nonAlignQueryDataSet != null) {
        if (struct.isSetNonAlignQueryDataSet()) {
          oprot.writeFieldBegin(NON_ALIGN_QUERY_DATA_SET_FIELD_DESC);
          struct.nonAlignQueryDataSet.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.columnNameIndexMap != null) {
        if (struct.isSetColumnNameIndexMap()) {
          oprot.writeFieldBegin(COLUMN_NAME_INDEX_MAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I32, struct.columnNameIndexMap.size()));
            for (java.util.Map.Entry<java.lang.String, java.lang.Integer> _iter72 : struct.columnNameIndexMap.entrySet())
            {
              oprot.writeString(_iter72.getKey());
              oprot.writeI32(_iter72.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.sgColumns != null) {
        if (struct.isSetSgColumns()) {
          oprot.writeFieldBegin(SG_COLUMNS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.sgColumns.size()));
            for (java.lang.String _iter73 : struct.sgColumns)
            {
              oprot.writeString(_iter73);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.aliasColumns != null) {
        if (struct.isSetAliasColumns()) {
          oprot.writeFieldBegin(ALIAS_COLUMNS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.BYTE, struct.aliasColumns.size()));
            for (byte _iter74 : struct.aliasColumns)
            {
              oprot.writeByte(_iter74);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.tracingInfo != null) {
        if (struct.isSetTracingInfo()) {
          oprot.writeFieldBegin(TRACING_INFO_FIELD_DESC);
          struct.tracingInfo.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.queryResult != null) {
        if (struct.isSetQueryResult()) {
          oprot.writeFieldBegin(QUERY_RESULT_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.queryResult.size()));
            for (java.nio.ByteBuffer _iter75 : struct.queryResult)
            {
              oprot.writeBinary(_iter75);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetMoreData()) {
        oprot.writeFieldBegin(MORE_DATA_FIELD_DESC);
        oprot.writeBool(struct.moreData);
        oprot.writeFieldEnd();
      }
      if (struct.database != null) {
        if (struct.isSetDatabase()) {
          oprot.writeFieldBegin(DATABASE_FIELD_DESC);
          oprot.writeString(struct.database);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetTableModel()) {
        oprot.writeFieldBegin(TABLE_MODEL_FIELD_DESC);
        oprot.writeBool(struct.tableModel);
        oprot.writeFieldEnd();
      }
      if (struct.columnIndex2TsBlockColumnIndexList != null) {
        if (struct.isSetColumnIndex2TsBlockColumnIndexList()) {
          oprot.writeFieldBegin(COLUMN_INDEX2_TS_BLOCK_COLUMN_INDEX_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.columnIndex2TsBlockColumnIndexList.size()));
            for (int _iter76 : struct.columnIndex2TsBlockColumnIndexList)
            {
              oprot.writeI32(_iter76);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TSExecuteStatementRespTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TSExecuteStatementRespTupleScheme getScheme() {
      return new TSExecuteStatementRespTupleScheme();
    }
  }

  private static class TSExecuteStatementRespTupleScheme extends org.apache.thrift.scheme.TupleScheme<TSExecuteStatementResp> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TSExecuteStatementResp struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.status.write(oprot);
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetQueryId()) {
        optionals.set(0);
      }
      if (struct.isSetColumns()) {
        optionals.set(1);
      }
      if (struct.isSetOperationType()) {
        optionals.set(2);
      }
      if (struct.isSetIgnoreTimeStamp()) {
        optionals.set(3);
      }
      if (struct.isSetDataTypeList()) {
        optionals.set(4);
      }
      if (struct.isSetQueryDataSet()) {
        optionals.set(5);
      }
      if (struct.isSetNonAlignQueryDataSet()) {
        optionals.set(6);
      }
      if (struct.isSetColumnNameIndexMap()) {
        optionals.set(7);
      }
      if (struct.isSetSgColumns()) {
        optionals.set(8);
      }
      if (struct.isSetAliasColumns()) {
        optionals.set(9);
      }
      if (struct.isSetTracingInfo()) {
        optionals.set(10);
      }
      if (struct.isSetQueryResult()) {
        optionals.set(11);
      }
      if (struct.isSetMoreData()) {
        optionals.set(12);
      }
      if (struct.isSetDatabase()) {
        optionals.set(13);
      }
      if (struct.isSetTableModel()) {
        optionals.set(14);
      }
      if (struct.isSetColumnIndex2TsBlockColumnIndexList()) {
        optionals.set(15);
      }
      oprot.writeBitSet(optionals, 16);
      if (struct.isSetQueryId()) {
        oprot.writeI64(struct.queryId);
      }
      if (struct.isSetColumns()) {
        {
          oprot.writeI32(struct.columns.size());
          for (java.lang.String _iter77 : struct.columns)
          {
            oprot.writeString(_iter77);
          }
        }
      }
      if (struct.isSetOperationType()) {
        oprot.writeString(struct.operationType);
      }
      if (struct.isSetIgnoreTimeStamp()) {
        oprot.writeBool(struct.ignoreTimeStamp);
      }
      if (struct.isSetDataTypeList()) {
        {
          oprot.writeI32(struct.dataTypeList.size());
          for (java.lang.String _iter78 : struct.dataTypeList)
          {
            oprot.writeString(_iter78);
          }
        }
      }
      if (struct.isSetQueryDataSet()) {
        struct.queryDataSet.write(oprot);
      }
      if (struct.isSetNonAlignQueryDataSet()) {
        struct.nonAlignQueryDataSet.write(oprot);
      }
      if (struct.isSetColumnNameIndexMap()) {
        {
          oprot.writeI32(struct.columnNameIndexMap.size());
          for (java.util.Map.Entry<java.lang.String, java.lang.Integer> _iter79 : struct.columnNameIndexMap.entrySet())
          {
            oprot.writeString(_iter79.getKey());
            oprot.writeI32(_iter79.getValue());
          }
        }
      }
      if (struct.isSetSgColumns()) {
        {
          oprot.writeI32(struct.sgColumns.size());
          for (java.lang.String _iter80 : struct.sgColumns)
          {
            oprot.writeString(_iter80);
          }
        }
      }
      if (struct.isSetAliasColumns()) {
        {
          oprot.writeI32(struct.aliasColumns.size());
          for (byte _iter81 : struct.aliasColumns)
          {
            oprot.writeByte(_iter81);
          }
        }
      }
      if (struct.isSetTracingInfo()) {
        struct.tracingInfo.write(oprot);
      }
      if (struct.isSetQueryResult()) {
        {
          oprot.writeI32(struct.queryResult.size());
          for (java.nio.ByteBuffer _iter82 : struct.queryResult)
          {
            oprot.writeBinary(_iter82);
          }
        }
      }
      if (struct.isSetMoreData()) {
        oprot.writeBool(struct.moreData);
      }
      if (struct.isSetDatabase()) {
        oprot.writeString(struct.database);
      }
      if (struct.isSetTableModel()) {
        oprot.writeBool(struct.tableModel);
      }
      if (struct.isSetColumnIndex2TsBlockColumnIndexList()) {
        {
          oprot.writeI32(struct.columnIndex2TsBlockColumnIndexList.size());
          for (int _iter83 : struct.columnIndex2TsBlockColumnIndexList)
          {
            oprot.writeI32(_iter83);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TSExecuteStatementResp struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.status = new org.apache.iotdb.common.rpc.thrift.TSStatus();
      struct.status.read(iprot);
      struct.setStatusIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(16);
      if (incoming.get(0)) {
        struct.queryId = iprot.readI64();
        struct.setQueryIdIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list84 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRING);
          struct.columns = new java.util.ArrayList<java.lang.String>(_list84.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _elem85;
          for (int _i86 = 0; _i86 < _list84.size; ++_i86)
          {
            _elem85 = iprot.readString();
            struct.columns.add(_elem85);
          }
        }
        struct.setColumnsIsSet(true);
      }
      if (incoming.get(2)) {
        struct.operationType = iprot.readString();
        struct.setOperationTypeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.ignoreTimeStamp = iprot.readBool();
        struct.setIgnoreTimeStampIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list87 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRING);
          struct.dataTypeList = new java.util.ArrayList<java.lang.String>(_list87.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _elem88;
          for (int _i89 = 0; _i89 < _list87.size; ++_i89)
          {
            _elem88 = iprot.readString();
            struct.dataTypeList.add(_elem88);
          }
        }
        struct.setDataTypeListIsSet(true);
      }
      if (incoming.get(5)) {
        struct.queryDataSet = new TSQueryDataSet();
        struct.queryDataSet.read(iprot);
        struct.setQueryDataSetIsSet(true);
      }
      if (incoming.get(6)) {
        struct.nonAlignQueryDataSet = new TSQueryNonAlignDataSet();
        struct.nonAlignQueryDataSet.read(iprot);
        struct.setNonAlignQueryDataSetIsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TMap _map90 = iprot.readMapBegin(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I32); 
          struct.columnNameIndexMap = new java.util.HashMap<java.lang.String,java.lang.Integer>(2*_map90.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _key91;
          int _val92;
          for (int _i93 = 0; _i93 < _map90.size; ++_i93)
          {
            _key91 = iprot.readString();
            _val92 = iprot.readI32();
            struct.columnNameIndexMap.put(_key91, _val92);
          }
        }
        struct.setColumnNameIndexMapIsSet(true);
      }
      if (incoming.get(8)) {
        {
          org.apache.thrift.protocol.TList _list94 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRING);
          struct.sgColumns = new java.util.ArrayList<java.lang.String>(_list94.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _elem95;
          for (int _i96 = 0; _i96 < _list94.size; ++_i96)
          {
            _elem95 = iprot.readString();
            struct.sgColumns.add(_elem95);
          }
        }
        struct.setSgColumnsIsSet(true);
      }
      if (incoming.get(9)) {
        {
          org.apache.thrift.protocol.TList _list97 = iprot.readListBegin(org.apache.thrift.protocol.TType.BYTE);
          struct.aliasColumns = new java.util.ArrayList<java.lang.Byte>(_list97.size);
          byte _elem98;
          for (int _i99 = 0; _i99 < _list97.size; ++_i99)
          {
            _elem98 = iprot.readByte();
            struct.aliasColumns.add(_elem98);
          }
        }
        struct.setAliasColumnsIsSet(true);
      }
      if (incoming.get(10)) {
        struct.tracingInfo = new TSTracingInfo();
        struct.tracingInfo.read(iprot);
        struct.setTracingInfoIsSet(true);
      }
      if (incoming.get(11)) {
        {
          org.apache.thrift.protocol.TList _list100 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRING);
          struct.queryResult = new java.util.ArrayList<java.nio.ByteBuffer>(_list100.size);
          @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer _elem101;
          for (int _i102 = 0; _i102 < _list100.size; ++_i102)
          {
            _elem101 = iprot.readBinary();
            struct.queryResult.add(_elem101);
          }
        }
        struct.setQueryResultIsSet(true);
      }
      if (incoming.get(12)) {
        struct.moreData = iprot.readBool();
        struct.setMoreDataIsSet(true);
      }
      if (incoming.get(13)) {
        struct.database = iprot.readString();
        struct.setDatabaseIsSet(true);
      }
      if (incoming.get(14)) {
        struct.tableModel = iprot.readBool();
        struct.setTableModelIsSet(true);
      }
      if (incoming.get(15)) {
        {
          org.apache.thrift.protocol.TList _list103 = iprot.readListBegin(org.apache.thrift.protocol.TType.I32);
          struct.columnIndex2TsBlockColumnIndexList = new java.util.ArrayList<java.lang.Integer>(_list103.size);
          int _elem104;
          for (int _i105 = 0; _i105 < _list103.size; ++_i105)
          {
            _elem104 = iprot.readI32();
            struct.columnIndex2TsBlockColumnIndexList.add(_elem104);
          }
        }
        struct.setColumnIndex2TsBlockColumnIndexListIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

